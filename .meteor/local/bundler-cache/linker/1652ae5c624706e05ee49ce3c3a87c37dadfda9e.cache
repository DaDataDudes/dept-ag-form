[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar _ = Package.underscore._;\nvar meteorInstall = Package['modules-runtime'].meteorInstall;\n\n/* Package-scope variables */\nvar Buffer, process, __g, __e;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"modules\":{\"client.js\":[\"./stubs.js\",\"./buffer.js\",\"./process.js\",\"./css\",function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/modules/client.js                                                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nrequire(\"./stubs.js\");                                                                                                 // 1\nrequire(\"./buffer.js\");                                                                                                // 2\nrequire(\"./process.js\");                                                                                               // 3\n                                                                                                                       // 4\nexports.addStyles = require(\"./css\").addStyles;                                                                        // 5\n                                                                                                                       // 6\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"buffer.js\":[\"buffer\",function(require){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/modules/buffer.js                                                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\ntry {                                                                                                                  // 1\n  Buffer = global.Buffer || require(\"buffer\").Buffer;                                                                  // 2\n} catch (noBuffer) {}                                                                                                  // 3\n                                                                                                                       // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"css.js\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/modules/css.js                                                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar doc = document;                                                                                                    // 1\nvar head = doc.getElementsByTagName(\"head\").item(0);                                                                   // 2\n                                                                                                                       // 3\nexports.addStyles = function (css) {                                                                                   // 4\n  var style = doc.createElement(\"style\");                                                                              // 5\n                                                                                                                       // 6\n  style.setAttribute(\"type\", \"text/css\");                                                                              // 7\n                                                                                                                       // 8\n  // https://msdn.microsoft.com/en-us/library/ms535871(v=vs.85).aspx                                                   // 9\n  var internetExplorerSheetObject =                                                                                    // 10\n    style.sheet || // Edge/IE11.                                                                                       // 11\n    style.styleSheet; // Older IEs.                                                                                    // 12\n                                                                                                                       // 13\n  if (internetExplorerSheetObject) {                                                                                   // 14\n    internetExplorerSheetObject.cssText = css;                                                                         // 15\n  } else {                                                                                                             // 16\n    style.appendChild(doc.createTextNode(css));                                                                        // 17\n  }                                                                                                                    // 18\n                                                                                                                       // 19\n  return head.appendChild(style);                                                                                      // 20\n};                                                                                                                     // 21\n                                                                                                                       // 22\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"process.js\":[\"process\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/modules/process.js                                                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\ntry {                                                                                                                  // 1\n  // The application can run `npm install process` to provide its own                                                  // 2\n  // process stub; otherwise this module will provide a partial stub.                                                  // 3\n  process = global.process || require(\"process\");                                                                      // 4\n} catch (noProcess) {                                                                                                  // 5\n  process = {};                                                                                                        // 6\n}                                                                                                                      // 7\n                                                                                                                       // 8\nif (Meteor.isServer) {                                                                                                 // 9\n  // Make require(\"process\") work on the server in all versions of Node.                                               // 10\n  meteorInstall({                                                                                                      // 11\n    node_modules: {                                                                                                    // 12\n      \"process.js\": function (r, e, module) {                                                                          // 13\n        module.exports = process;                                                                                      // 14\n      }                                                                                                                // 15\n    }                                                                                                                  // 16\n  });                                                                                                                  // 17\n} else {                                                                                                               // 18\n  process.platform = \"browser\";                                                                                        // 19\n  process.nextTick = process.nextTick || Meteor._setImmediate;                                                         // 20\n}                                                                                                                      // 21\n                                                                                                                       // 22\nif (typeof process.env !== \"object\") {                                                                                 // 23\n  process.env = {};                                                                                                    // 24\n}                                                                                                                      // 25\n                                                                                                                       // 26\n_.extend(process.env, meteorEnv);                                                                                      // 27\n                                                                                                                       // 28\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"stubs.js\":[\"meteor-node-stubs\",function(require){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/modules/stubs.js                                                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\ntry {                                                                                                                  // 1\n  // When meteor-node-stubs is installed in the application's root                                                     // 2\n  // node_modules directory, requiring it here installs aliases for stubs                                              // 3\n  // for all Node built-in modules, such as fs, util, and http.                                                        // 4\n  require(\"meteor-node-stubs\");                                                                                        // 5\n} catch (noStubs) {}                                                                                                   // 6\n                                                                                                                       // 7\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]}},\"apollo-client\":{\"gql.js\":[\"graphql/language/parser\",function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/apollo-client/gql.js                                                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n\"use strict\";                                                                                                          // 1\nvar parser_1 = require('graphql/language/parser');                                                                     // 2\nvar cache = {};                                                                                                        // 3\nfunction parseDocument(doc) {                                                                                          // 4\n    if (cache[doc]) {                                                                                                  // 5\n        return cache[doc];                                                                                             // 6\n    }                                                                                                                  // 7\n    var parsed = parser_1.parse(doc);                                                                                  // 8\n    if (!parsed || parsed.kind !== 'Document') {                                                                       // 9\n        throw new Error('Not a valid GraphQL document.');                                                              // 10\n    }                                                                                                                  // 11\n    cache[doc] = parsed;                                                                                               // 12\n    return parsed;                                                                                                     // 13\n}                                                                                                                      // 14\nfunction gql(literals) {                                                                                               // 15\n    var substitutions = [];                                                                                            // 16\n    for (var _i = 1; _i < arguments.length; _i++) {                                                                    // 17\n        substitutions[_i - 1] = arguments[_i];                                                                         // 18\n    }                                                                                                                  // 19\n    var result = '';                                                                                                   // 20\n    for (var i = 0; i < substitutions.length; i++) {                                                                   // 21\n        result += literals[i];                                                                                         // 22\n        result += substitutions[i];                                                                                    // 23\n    }                                                                                                                  // 24\n    result += literals[literals.length - 1];                                                                           // 25\n    return parseDocument(result);                                                                                      // 26\n}                                                                                                                      // 27\nObject.defineProperty(exports, \"__esModule\", { value: true });                                                         // 28\nexports.default = gql;                                                                                                 // 29\nfunction registerGqlTag() {                                                                                            // 30\n    if (typeof window !== 'undefined') {                                                                               // 31\n        window['gql'] = gql;                                                                                           // 32\n    }                                                                                                                  // 33\n    else if (typeof global !== 'undefined') {                                                                          // 34\n        global['gql'] = gql;                                                                                           // 35\n    }                                                                                                                  // 36\n}                                                                                                                      // 37\nexports.registerGqlTag = registerGqlTag;                                                                               // 38\n//# sourceMappingURL=gql.js.map                                                                                        // 39\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"graphql\":{\"language\":{\"parser.js\":[\"./source\",\"../error\",\"./lexer\",\"./kinds\",function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/graphql/language/parser.js                                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n'use strict';                                                                                                          // 1\n                                                                                                                       // 2\nObject.defineProperty(exports, \"__esModule\", {                                                                         // 3\n  value: true                                                                                                          // 4\n});                                                                                                                    // 5\nexports.parse = parse;                                                                                                 // 6\nexports.parseValue = parseValue;                                                                                       // 7\nexports.parseConstValue = parseConstValue;                                                                             // 8\nexports.parseType = parseType;                                                                                         // 9\nexports.parseNamedType = parseNamedType;                                                                               // 10\n                                                                                                                       // 11\nvar _source = require('./source');                                                                                     // 12\n                                                                                                                       // 13\nvar _error = require('../error');                                                                                      // 14\n                                                                                                                       // 15\nvar _lexer = require('./lexer');                                                                                       // 16\n                                                                                                                       // 17\nvar _kinds = require('./kinds');                                                                                       // 18\n                                                                                                                       // 19\n/**                                                                                                                    // 20\n * Given a GraphQL source, parses it into a Document.                                                                  // 21\n * Throws GraphQLError if a syntax error is encountered.                                                               // 22\n */                                                                                                                    // 23\n                                                                                                                       // 24\n                                                                                                                       // 25\n/**                                                                                                                    // 26\n * Configuration options to control parser behavior                                                                    // 27\n */                                                                                                                    // 28\n                                                                                                                       // 29\n/**                                                                                                                    // 30\n *  Copyright (c) 2015, Facebook, Inc.                                                                                 // 31\n *  All rights reserved.                                                                                               // 32\n *                                                                                                                     // 33\n *  This source code is licensed under the BSD-style license found in the                                              // 34\n *  LICENSE file in the root directory of this source tree. An additional grant                                        // 35\n *  of patent rights can be found in the PATENTS file in the same directory.                                           // 36\n */                                                                                                                    // 37\n                                                                                                                       // 38\nfunction parse(source, options) {                                                                                      // 39\n  var sourceObj = source instanceof _source.Source ? source : new _source.Source(source);                              // 40\n  var parser = makeParser(sourceObj, options || {});                                                                   // 41\n  return parseDocument(parser);                                                                                        // 42\n}                                                                                                                      // 43\n                                                                                                                       // 44\n/**                                                                                                                    // 45\n * Given a string containing a GraphQL value, parse the AST for that value.                                            // 46\n * Throws GraphQLError if a syntax error is encountered.                                                               // 47\n *                                                                                                                     // 48\n * This is useful within tools that operate upon GraphQL Values directly and                                           // 49\n * in isolation of complete GraphQL documents.                                                                         // 50\n */                                                                                                                    // 51\nfunction parseValue(source, options) {                                                                                 // 52\n  var sourceObj = source instanceof _source.Source ? source : new _source.Source(source);                              // 53\n  var parser = makeParser(sourceObj, options || {});                                                                   // 54\n  return parseValueLiteral(parser, false);                                                                             // 55\n}                                                                                                                      // 56\n                                                                                                                       // 57\n/**                                                                                                                    // 58\n * Converts a name lex token into a name parse node.                                                                   // 59\n */                                                                                                                    // 60\nfunction parseName(parser) {                                                                                           // 61\n  var token = expect(parser, _lexer.TokenKind.NAME);                                                                   // 62\n  return {                                                                                                             // 63\n    kind: _kinds.NAME,                                                                                                 // 64\n    value: token.value,                                                                                                // 65\n    loc: loc(parser, token.start)                                                                                      // 66\n  };                                                                                                                   // 67\n}                                                                                                                      // 68\n                                                                                                                       // 69\n// Implements the parsing rules in the Document section.                                                               // 70\n                                                                                                                       // 71\n/**                                                                                                                    // 72\n * Document : Definition+                                                                                              // 73\n */                                                                                                                    // 74\nfunction parseDocument(parser) {                                                                                       // 75\n  var start = parser.token.start;                                                                                      // 76\n                                                                                                                       // 77\n  var definitions = [];                                                                                                // 78\n  do {                                                                                                                 // 79\n    definitions.push(parseDefinition(parser));                                                                         // 80\n  } while (!skip(parser, _lexer.TokenKind.EOF));                                                                       // 81\n                                                                                                                       // 82\n  return {                                                                                                             // 83\n    kind: _kinds.DOCUMENT,                                                                                             // 84\n    definitions: definitions,                                                                                          // 85\n    loc: loc(parser, start)                                                                                            // 86\n  };                                                                                                                   // 87\n}                                                                                                                      // 88\n                                                                                                                       // 89\n/**                                                                                                                    // 90\n * Definition :                                                                                                        // 91\n *   - OperationDefinition                                                                                             // 92\n *   - FragmentDefinition                                                                                              // 93\n *   - TypeSystemDefinition                                                                                            // 94\n */                                                                                                                    // 95\nfunction parseDefinition(parser) {                                                                                     // 96\n  if (peek(parser, _lexer.TokenKind.BRACE_L)) {                                                                        // 97\n    return parseOperationDefinition(parser);                                                                           // 98\n  }                                                                                                                    // 99\n                                                                                                                       // 100\n  if (peek(parser, _lexer.TokenKind.NAME)) {                                                                           // 101\n    switch (parser.token.value) {                                                                                      // 102\n      case 'query':                                                                                                    // 103\n      case 'mutation':                                                                                                 // 104\n      // Note: subscription is an experimental non-spec addition.                                                      // 105\n      case 'subscription':                                                                                             // 106\n        return parseOperationDefinition(parser);                                                                       // 107\n                                                                                                                       // 108\n      case 'fragment':                                                                                                 // 109\n        return parseFragmentDefinition(parser);                                                                        // 110\n                                                                                                                       // 111\n      // Note: the Type System IDL is an experimental non-spec addition.                                               // 112\n      case 'schema':                                                                                                   // 113\n      case 'scalar':                                                                                                   // 114\n      case 'type':                                                                                                     // 115\n      case 'interface':                                                                                                // 116\n      case 'union':                                                                                                    // 117\n      case 'enum':                                                                                                     // 118\n      case 'input':                                                                                                    // 119\n      case 'extend':                                                                                                   // 120\n      case 'directive':                                                                                                // 121\n        return parseTypeSystemDefinition(parser);                                                                      // 122\n    }                                                                                                                  // 123\n  }                                                                                                                    // 124\n                                                                                                                       // 125\n  throw unexpected(parser);                                                                                            // 126\n}                                                                                                                      // 127\n                                                                                                                       // 128\n// Implements the parsing rules in the Operations section.                                                             // 129\n                                                                                                                       // 130\n/**                                                                                                                    // 131\n * OperationDefinition :                                                                                               // 132\n *  - SelectionSet                                                                                                     // 133\n *  - OperationType Name? VariableDefinitions? Directives? SelectionSet                                                // 134\n */                                                                                                                    // 135\nfunction parseOperationDefinition(parser) {                                                                            // 136\n  var start = parser.token.start;                                                                                      // 137\n  if (peek(parser, _lexer.TokenKind.BRACE_L)) {                                                                        // 138\n    return {                                                                                                           // 139\n      kind: _kinds.OPERATION_DEFINITION,                                                                               // 140\n      operation: 'query',                                                                                              // 141\n      name: null,                                                                                                      // 142\n      variableDefinitions: null,                                                                                       // 143\n      directives: [],                                                                                                  // 144\n      selectionSet: parseSelectionSet(parser),                                                                         // 145\n      loc: loc(parser, start)                                                                                          // 146\n    };                                                                                                                 // 147\n  }                                                                                                                    // 148\n  var operation = parseOperationType(parser);                                                                          // 149\n  var name = void 0;                                                                                                   // 150\n  if (peek(parser, _lexer.TokenKind.NAME)) {                                                                           // 151\n    name = parseName(parser);                                                                                          // 152\n  }                                                                                                                    // 153\n  return {                                                                                                             // 154\n    kind: _kinds.OPERATION_DEFINITION,                                                                                 // 155\n    operation: operation,                                                                                              // 156\n    name: name,                                                                                                        // 157\n    variableDefinitions: parseVariableDefinitions(parser),                                                             // 158\n    directives: parseDirectives(parser),                                                                               // 159\n    selectionSet: parseSelectionSet(parser),                                                                           // 160\n    loc: loc(parser, start)                                                                                            // 161\n  };                                                                                                                   // 162\n}                                                                                                                      // 163\n                                                                                                                       // 164\n/**                                                                                                                    // 165\n * OperationType : one of query mutation subscription                                                                  // 166\n */                                                                                                                    // 167\nfunction parseOperationType(parser) {                                                                                  // 168\n  var operationToken = expect(parser, _lexer.TokenKind.NAME);                                                          // 169\n  switch (operationToken.value) {                                                                                      // 170\n    case 'query':                                                                                                      // 171\n      return 'query';                                                                                                  // 172\n    case 'mutation':                                                                                                   // 173\n      return 'mutation';                                                                                               // 174\n    // Note: subscription is an experimental non-spec addition.                                                        // 175\n    case 'subscription':                                                                                               // 176\n      return 'subscription';                                                                                           // 177\n  }                                                                                                                    // 178\n                                                                                                                       // 179\n  throw unexpected(parser, operationToken);                                                                            // 180\n}                                                                                                                      // 181\n                                                                                                                       // 182\n/**                                                                                                                    // 183\n * VariableDefinitions : ( VariableDefinition+ )                                                                       // 184\n */                                                                                                                    // 185\nfunction parseVariableDefinitions(parser) {                                                                            // 186\n  return peek(parser, _lexer.TokenKind.PAREN_L) ? many(parser, _lexer.TokenKind.PAREN_L, parseVariableDefinition, _lexer.TokenKind.PAREN_R) : [];\n}                                                                                                                      // 188\n                                                                                                                       // 189\n/**                                                                                                                    // 190\n * VariableDefinition : Variable : Type DefaultValue?                                                                  // 191\n */                                                                                                                    // 192\nfunction parseVariableDefinition(parser) {                                                                             // 193\n  var start = parser.token.start;                                                                                      // 194\n  return {                                                                                                             // 195\n    kind: _kinds.VARIABLE_DEFINITION,                                                                                  // 196\n    variable: parseVariable(parser),                                                                                   // 197\n    type: (expect(parser, _lexer.TokenKind.COLON), parseType(parser)),                                                 // 198\n    defaultValue: skip(parser, _lexer.TokenKind.EQUALS) ? parseValueLiteral(parser, true) : null,                      // 199\n    loc: loc(parser, start)                                                                                            // 200\n  };                                                                                                                   // 201\n}                                                                                                                      // 202\n                                                                                                                       // 203\n/**                                                                                                                    // 204\n * Variable : $ Name                                                                                                   // 205\n */                                                                                                                    // 206\nfunction parseVariable(parser) {                                                                                       // 207\n  var start = parser.token.start;                                                                                      // 208\n  expect(parser, _lexer.TokenKind.DOLLAR);                                                                             // 209\n  return {                                                                                                             // 210\n    kind: _kinds.VARIABLE,                                                                                             // 211\n    name: parseName(parser),                                                                                           // 212\n    loc: loc(parser, start)                                                                                            // 213\n  };                                                                                                                   // 214\n}                                                                                                                      // 215\n                                                                                                                       // 216\n/**                                                                                                                    // 217\n * SelectionSet : { Selection+ }                                                                                       // 218\n */                                                                                                                    // 219\nfunction parseSelectionSet(parser) {                                                                                   // 220\n  var start = parser.token.start;                                                                                      // 221\n  return {                                                                                                             // 222\n    kind: _kinds.SELECTION_SET,                                                                                        // 223\n    selections: many(parser, _lexer.TokenKind.BRACE_L, parseSelection, _lexer.TokenKind.BRACE_R),                      // 224\n    loc: loc(parser, start)                                                                                            // 225\n  };                                                                                                                   // 226\n}                                                                                                                      // 227\n                                                                                                                       // 228\n/**                                                                                                                    // 229\n * Selection :                                                                                                         // 230\n *   - Field                                                                                                           // 231\n *   - FragmentSpread                                                                                                  // 232\n *   - InlineFragment                                                                                                  // 233\n */                                                                                                                    // 234\nfunction parseSelection(parser) {                                                                                      // 235\n  return peek(parser, _lexer.TokenKind.SPREAD) ? parseFragment(parser) : parseField(parser);                           // 236\n}                                                                                                                      // 237\n                                                                                                                       // 238\n/**                                                                                                                    // 239\n * Field : Alias? Name Arguments? Directives? SelectionSet?                                                            // 240\n *                                                                                                                     // 241\n * Alias : Name :                                                                                                      // 242\n */                                                                                                                    // 243\nfunction parseField(parser) {                                                                                          // 244\n  var start = parser.token.start;                                                                                      // 245\n                                                                                                                       // 246\n  var nameOrAlias = parseName(parser);                                                                                 // 247\n  var alias = void 0;                                                                                                  // 248\n  var name = void 0;                                                                                                   // 249\n  if (skip(parser, _lexer.TokenKind.COLON)) {                                                                          // 250\n    alias = nameOrAlias;                                                                                               // 251\n    name = parseName(parser);                                                                                          // 252\n  } else {                                                                                                             // 253\n    alias = null;                                                                                                      // 254\n    name = nameOrAlias;                                                                                                // 255\n  }                                                                                                                    // 256\n                                                                                                                       // 257\n  return {                                                                                                             // 258\n    kind: _kinds.FIELD,                                                                                                // 259\n    alias: alias,                                                                                                      // 260\n    name: name,                                                                                                        // 261\n    arguments: parseArguments(parser),                                                                                 // 262\n    directives: parseDirectives(parser),                                                                               // 263\n    selectionSet: peek(parser, _lexer.TokenKind.BRACE_L) ? parseSelectionSet(parser) : null,                           // 264\n    loc: loc(parser, start)                                                                                            // 265\n  };                                                                                                                   // 266\n}                                                                                                                      // 267\n                                                                                                                       // 268\n/**                                                                                                                    // 269\n * Arguments : ( Argument+ )                                                                                           // 270\n */                                                                                                                    // 271\nfunction parseArguments(parser) {                                                                                      // 272\n  return peek(parser, _lexer.TokenKind.PAREN_L) ? many(parser, _lexer.TokenKind.PAREN_L, parseArgument, _lexer.TokenKind.PAREN_R) : [];\n}                                                                                                                      // 274\n                                                                                                                       // 275\n/**                                                                                                                    // 276\n * Argument : Name : Value                                                                                             // 277\n */                                                                                                                    // 278\nfunction parseArgument(parser) {                                                                                       // 279\n  var start = parser.token.start;                                                                                      // 280\n  return {                                                                                                             // 281\n    kind: _kinds.ARGUMENT,                                                                                             // 282\n    name: parseName(parser),                                                                                           // 283\n    value: (expect(parser, _lexer.TokenKind.COLON), parseValueLiteral(parser, false)),                                 // 284\n    loc: loc(parser, start)                                                                                            // 285\n  };                                                                                                                   // 286\n}                                                                                                                      // 287\n                                                                                                                       // 288\n// Implements the parsing rules in the Fragments section.                                                              // 289\n                                                                                                                       // 290\n/**                                                                                                                    // 291\n * Corresponds to both FragmentSpread and InlineFragment in the spec.                                                  // 292\n *                                                                                                                     // 293\n * FragmentSpread : ... FragmentName Directives?                                                                       // 294\n *                                                                                                                     // 295\n * InlineFragment : ... TypeCondition? Directives? SelectionSet                                                        // 296\n */                                                                                                                    // 297\nfunction parseFragment(parser) {                                                                                       // 298\n  var start = parser.token.start;                                                                                      // 299\n  expect(parser, _lexer.TokenKind.SPREAD);                                                                             // 300\n  if (peek(parser, _lexer.TokenKind.NAME) && parser.token.value !== 'on') {                                            // 301\n    return {                                                                                                           // 302\n      kind: _kinds.FRAGMENT_SPREAD,                                                                                    // 303\n      name: parseFragmentName(parser),                                                                                 // 304\n      directives: parseDirectives(parser),                                                                             // 305\n      loc: loc(parser, start)                                                                                          // 306\n    };                                                                                                                 // 307\n  }                                                                                                                    // 308\n  var typeCondition = null;                                                                                            // 309\n  if (parser.token.value === 'on') {                                                                                   // 310\n    advance(parser);                                                                                                   // 311\n    typeCondition = parseNamedType(parser);                                                                            // 312\n  }                                                                                                                    // 313\n  return {                                                                                                             // 314\n    kind: _kinds.INLINE_FRAGMENT,                                                                                      // 315\n    typeCondition: typeCondition,                                                                                      // 316\n    directives: parseDirectives(parser),                                                                               // 317\n    selectionSet: parseSelectionSet(parser),                                                                           // 318\n    loc: loc(parser, start)                                                                                            // 319\n  };                                                                                                                   // 320\n}                                                                                                                      // 321\n                                                                                                                       // 322\n/**                                                                                                                    // 323\n * FragmentDefinition :                                                                                                // 324\n *   - fragment FragmentName on TypeCondition Directives? SelectionSet                                                 // 325\n *                                                                                                                     // 326\n * TypeCondition : NamedType                                                                                           // 327\n */                                                                                                                    // 328\nfunction parseFragmentDefinition(parser) {                                                                             // 329\n  var start = parser.token.start;                                                                                      // 330\n  expectKeyword(parser, 'fragment');                                                                                   // 331\n  return {                                                                                                             // 332\n    kind: _kinds.FRAGMENT_DEFINITION,                                                                                  // 333\n    name: parseFragmentName(parser),                                                                                   // 334\n    typeCondition: (expectKeyword(parser, 'on'), parseNamedType(parser)),                                              // 335\n    directives: parseDirectives(parser),                                                                               // 336\n    selectionSet: parseSelectionSet(parser),                                                                           // 337\n    loc: loc(parser, start)                                                                                            // 338\n  };                                                                                                                   // 339\n}                                                                                                                      // 340\n                                                                                                                       // 341\n/**                                                                                                                    // 342\n * FragmentName : Name but not `on`                                                                                    // 343\n */                                                                                                                    // 344\nfunction parseFragmentName(parser) {                                                                                   // 345\n  if (parser.token.value === 'on') {                                                                                   // 346\n    throw unexpected(parser);                                                                                          // 347\n  }                                                                                                                    // 348\n  return parseName(parser);                                                                                            // 349\n}                                                                                                                      // 350\n                                                                                                                       // 351\n// Implements the parsing rules in the Values section.                                                                 // 352\n                                                                                                                       // 353\n/**                                                                                                                    // 354\n * Value[Const] :                                                                                                      // 355\n *   - [~Const] Variable                                                                                               // 356\n *   - IntValue                                                                                                        // 357\n *   - FloatValue                                                                                                      // 358\n *   - StringValue                                                                                                     // 359\n *   - BooleanValue                                                                                                    // 360\n *   - EnumValue                                                                                                       // 361\n *   - ListValue[?Const]                                                                                               // 362\n *   - ObjectValue[?Const]                                                                                             // 363\n *                                                                                                                     // 364\n * BooleanValue : one of `true` `false`                                                                                // 365\n *                                                                                                                     // 366\n * EnumValue : Name but not `true`, `false` or `null`                                                                  // 367\n */                                                                                                                    // 368\nfunction parseValueLiteral(parser, isConst) {                                                                          // 369\n  var token = parser.token;                                                                                            // 370\n  switch (token.kind) {                                                                                                // 371\n    case _lexer.TokenKind.BRACKET_L:                                                                                   // 372\n      return parseList(parser, isConst);                                                                               // 373\n    case _lexer.TokenKind.BRACE_L:                                                                                     // 374\n      return parseObject(parser, isConst);                                                                             // 375\n    case _lexer.TokenKind.INT:                                                                                         // 376\n      advance(parser);                                                                                                 // 377\n      return {                                                                                                         // 378\n        kind: _kinds.INT,                                                                                              // 379\n        value: token.value,                                                                                            // 380\n        loc: loc(parser, token.start)                                                                                  // 381\n      };                                                                                                               // 382\n    case _lexer.TokenKind.FLOAT:                                                                                       // 383\n      advance(parser);                                                                                                 // 384\n      return {                                                                                                         // 385\n        kind: _kinds.FLOAT,                                                                                            // 386\n        value: token.value,                                                                                            // 387\n        loc: loc(parser, token.start)                                                                                  // 388\n      };                                                                                                               // 389\n    case _lexer.TokenKind.STRING:                                                                                      // 390\n      advance(parser);                                                                                                 // 391\n      return {                                                                                                         // 392\n        kind: _kinds.STRING,                                                                                           // 393\n        value: token.value,                                                                                            // 394\n        loc: loc(parser, token.start)                                                                                  // 395\n      };                                                                                                               // 396\n    case _lexer.TokenKind.NAME:                                                                                        // 397\n      if (token.value === 'true' || token.value === 'false') {                                                         // 398\n        advance(parser);                                                                                               // 399\n        return {                                                                                                       // 400\n          kind: _kinds.BOOLEAN,                                                                                        // 401\n          value: token.value === 'true',                                                                               // 402\n          loc: loc(parser, token.start)                                                                                // 403\n        };                                                                                                             // 404\n      } else if (token.value !== 'null') {                                                                             // 405\n        advance(parser);                                                                                               // 406\n        return {                                                                                                       // 407\n          kind: _kinds.ENUM,                                                                                           // 408\n          value: token.value,                                                                                          // 409\n          loc: loc(parser, token.start)                                                                                // 410\n        };                                                                                                             // 411\n      }                                                                                                                // 412\n      break;                                                                                                           // 413\n    case _lexer.TokenKind.DOLLAR:                                                                                      // 414\n      if (!isConst) {                                                                                                  // 415\n        return parseVariable(parser);                                                                                  // 416\n      }                                                                                                                // 417\n      break;                                                                                                           // 418\n  }                                                                                                                    // 419\n  throw unexpected(parser);                                                                                            // 420\n}                                                                                                                      // 421\n                                                                                                                       // 422\nfunction parseConstValue(parser) {                                                                                     // 423\n  return parseValueLiteral(parser, true);                                                                              // 424\n}                                                                                                                      // 425\n                                                                                                                       // 426\nfunction parseValueValue(parser) {                                                                                     // 427\n  return parseValueLiteral(parser, false);                                                                             // 428\n}                                                                                                                      // 429\n                                                                                                                       // 430\n/**                                                                                                                    // 431\n * ListValue[Const] :                                                                                                  // 432\n *   - [ ]                                                                                                             // 433\n *   - [ Value[?Const]+ ]                                                                                              // 434\n */                                                                                                                    // 435\nfunction parseList(parser, isConst) {                                                                                  // 436\n  var start = parser.token.start;                                                                                      // 437\n  var item = isConst ? parseConstValue : parseValueValue;                                                              // 438\n  return {                                                                                                             // 439\n    kind: _kinds.LIST,                                                                                                 // 440\n    values: any(parser, _lexer.TokenKind.BRACKET_L, item, _lexer.TokenKind.BRACKET_R),                                 // 441\n    loc: loc(parser, start)                                                                                            // 442\n  };                                                                                                                   // 443\n}                                                                                                                      // 444\n                                                                                                                       // 445\n/**                                                                                                                    // 446\n * ObjectValue[Const] :                                                                                                // 447\n *   - { }                                                                                                             // 448\n *   - { ObjectField[?Const]+ }                                                                                        // 449\n */                                                                                                                    // 450\nfunction parseObject(parser, isConst) {                                                                                // 451\n  var start = parser.token.start;                                                                                      // 452\n  expect(parser, _lexer.TokenKind.BRACE_L);                                                                            // 453\n  var fields = [];                                                                                                     // 454\n  while (!skip(parser, _lexer.TokenKind.BRACE_R)) {                                                                    // 455\n    fields.push(parseObjectField(parser, isConst));                                                                    // 456\n  }                                                                                                                    // 457\n  return {                                                                                                             // 458\n    kind: _kinds.OBJECT,                                                                                               // 459\n    fields: fields,                                                                                                    // 460\n    loc: loc(parser, start)                                                                                            // 461\n  };                                                                                                                   // 462\n}                                                                                                                      // 463\n                                                                                                                       // 464\n/**                                                                                                                    // 465\n * ObjectField[Const] : Name : Value[?Const]                                                                           // 466\n */                                                                                                                    // 467\nfunction parseObjectField(parser, isConst) {                                                                           // 468\n  var start = parser.token.start;                                                                                      // 469\n  return {                                                                                                             // 470\n    kind: _kinds.OBJECT_FIELD,                                                                                         // 471\n    name: parseName(parser),                                                                                           // 472\n    value: (expect(parser, _lexer.TokenKind.COLON), parseValueLiteral(parser, isConst)),                               // 473\n    loc: loc(parser, start)                                                                                            // 474\n  };                                                                                                                   // 475\n}                                                                                                                      // 476\n                                                                                                                       // 477\n// Implements the parsing rules in the Directives section.                                                             // 478\n                                                                                                                       // 479\n/**                                                                                                                    // 480\n * Directives : Directive+                                                                                             // 481\n */                                                                                                                    // 482\nfunction parseDirectives(parser) {                                                                                     // 483\n  var directives = [];                                                                                                 // 484\n  while (peek(parser, _lexer.TokenKind.AT)) {                                                                          // 485\n    directives.push(parseDirective(parser));                                                                           // 486\n  }                                                                                                                    // 487\n  return directives;                                                                                                   // 488\n}                                                                                                                      // 489\n                                                                                                                       // 490\n/**                                                                                                                    // 491\n * Directive : @ Name Arguments?                                                                                       // 492\n */                                                                                                                    // 493\nfunction parseDirective(parser) {                                                                                      // 494\n  var start = parser.token.start;                                                                                      // 495\n  expect(parser, _lexer.TokenKind.AT);                                                                                 // 496\n  return {                                                                                                             // 497\n    kind: _kinds.DIRECTIVE,                                                                                            // 498\n    name: parseName(parser),                                                                                           // 499\n    arguments: parseArguments(parser),                                                                                 // 500\n    loc: loc(parser, start)                                                                                            // 501\n  };                                                                                                                   // 502\n}                                                                                                                      // 503\n                                                                                                                       // 504\n// Implements the parsing rules in the Types section.                                                                  // 505\n                                                                                                                       // 506\n/**                                                                                                                    // 507\n * Type :                                                                                                              // 508\n *   - NamedType                                                                                                       // 509\n *   - ListType                                                                                                        // 510\n *   - NonNullType                                                                                                     // 511\n */                                                                                                                    // 512\nfunction parseType(parser) {                                                                                           // 513\n  var start = parser.token.start;                                                                                      // 514\n  var type = void 0;                                                                                                   // 515\n  if (skip(parser, _lexer.TokenKind.BRACKET_L)) {                                                                      // 516\n    type = parseType(parser);                                                                                          // 517\n    expect(parser, _lexer.TokenKind.BRACKET_R);                                                                        // 518\n    type = {                                                                                                           // 519\n      kind: _kinds.LIST_TYPE,                                                                                          // 520\n      type: type,                                                                                                      // 521\n      loc: loc(parser, start)                                                                                          // 522\n    };                                                                                                                 // 523\n  } else {                                                                                                             // 524\n    type = parseNamedType(parser);                                                                                     // 525\n  }                                                                                                                    // 526\n  if (skip(parser, _lexer.TokenKind.BANG)) {                                                                           // 527\n    return {                                                                                                           // 528\n      kind: _kinds.NON_NULL_TYPE,                                                                                      // 529\n      type: type,                                                                                                      // 530\n      loc: loc(parser, start)                                                                                          // 531\n    };                                                                                                                 // 532\n  }                                                                                                                    // 533\n  return type;                                                                                                         // 534\n}                                                                                                                      // 535\n                                                                                                                       // 536\n/**                                                                                                                    // 537\n * NamedType : Name                                                                                                    // 538\n */                                                                                                                    // 539\nfunction parseNamedType(parser) {                                                                                      // 540\n  var start = parser.token.start;                                                                                      // 541\n  return {                                                                                                             // 542\n    kind: _kinds.NAMED_TYPE,                                                                                           // 543\n    name: parseName(parser),                                                                                           // 544\n    loc: loc(parser, start)                                                                                            // 545\n  };                                                                                                                   // 546\n}                                                                                                                      // 547\n                                                                                                                       // 548\n// Implements the parsing rules in the Type Definition section.                                                        // 549\n                                                                                                                       // 550\n/**                                                                                                                    // 551\n * TypeSystemDefinition :                                                                                              // 552\n *   - TypeDefinition                                                                                                  // 553\n *   - TypeExtensionDefinition                                                                                         // 554\n *   - DirectiveDefinition                                                                                             // 555\n *                                                                                                                     // 556\n * TypeDefinition :                                                                                                    // 557\n *   - ScalarTypeDefinition                                                                                            // 558\n *   - ObjectTypeDefinition                                                                                            // 559\n *   - InterfaceTypeDefinition                                                                                         // 560\n *   - UnionTypeDefinition                                                                                             // 561\n *   - EnumTypeDefinition                                                                                              // 562\n *   - InputObjectTypeDefinition                                                                                       // 563\n */                                                                                                                    // 564\nfunction parseTypeSystemDefinition(parser) {                                                                           // 565\n  if (peek(parser, _lexer.TokenKind.NAME)) {                                                                           // 566\n    switch (parser.token.value) {                                                                                      // 567\n      case 'schema':                                                                                                   // 568\n        return parseSchemaDefinition(parser);                                                                          // 569\n      case 'scalar':                                                                                                   // 570\n        return parseScalarTypeDefinition(parser);                                                                      // 571\n      case 'type':                                                                                                     // 572\n        return parseObjectTypeDefinition(parser);                                                                      // 573\n      case 'interface':                                                                                                // 574\n        return parseInterfaceTypeDefinition(parser);                                                                   // 575\n      case 'union':                                                                                                    // 576\n        return parseUnionTypeDefinition(parser);                                                                       // 577\n      case 'enum':                                                                                                     // 578\n        return parseEnumTypeDefinition(parser);                                                                        // 579\n      case 'input':                                                                                                    // 580\n        return parseInputObjectTypeDefinition(parser);                                                                 // 581\n      case 'extend':                                                                                                   // 582\n        return parseTypeExtensionDefinition(parser);                                                                   // 583\n      case 'directive':                                                                                                // 584\n        return parseDirectiveDefinition(parser);                                                                       // 585\n    }                                                                                                                  // 586\n  }                                                                                                                    // 587\n                                                                                                                       // 588\n  throw unexpected(parser);                                                                                            // 589\n}                                                                                                                      // 590\n                                                                                                                       // 591\n/**                                                                                                                    // 592\n * SchemaDefinition : schema { OperationTypeDefinition+ }                                                              // 593\n *                                                                                                                     // 594\n * OperationTypeDefinition : OperationType : NamedType                                                                 // 595\n */                                                                                                                    // 596\nfunction parseSchemaDefinition(parser) {                                                                               // 597\n  var start = parser.token.start;                                                                                      // 598\n  expectKeyword(parser, 'schema');                                                                                     // 599\n  var operationTypes = many(parser, _lexer.TokenKind.BRACE_L, parseOperationTypeDefinition, _lexer.TokenKind.BRACE_R);\n  return {                                                                                                             // 601\n    kind: _kinds.SCHEMA_DEFINITION,                                                                                    // 602\n    operationTypes: operationTypes,                                                                                    // 603\n    loc: loc(parser, start)                                                                                            // 604\n  };                                                                                                                   // 605\n}                                                                                                                      // 606\n                                                                                                                       // 607\nfunction parseOperationTypeDefinition(parser) {                                                                        // 608\n  var start = parser.token.start;                                                                                      // 609\n  var operation = parseOperationType(parser);                                                                          // 610\n  expect(parser, _lexer.TokenKind.COLON);                                                                              // 611\n  var type = parseNamedType(parser);                                                                                   // 612\n  return {                                                                                                             // 613\n    kind: _kinds.OPERATION_TYPE_DEFINITION,                                                                            // 614\n    operation: operation,                                                                                              // 615\n    type: type,                                                                                                        // 616\n    loc: loc(parser, start)                                                                                            // 617\n  };                                                                                                                   // 618\n}                                                                                                                      // 619\n                                                                                                                       // 620\n/**                                                                                                                    // 621\n * ScalarTypeDefinition : scalar Name                                                                                  // 622\n */                                                                                                                    // 623\nfunction parseScalarTypeDefinition(parser) {                                                                           // 624\n  var start = parser.token.start;                                                                                      // 625\n  expectKeyword(parser, 'scalar');                                                                                     // 626\n  var name = parseName(parser);                                                                                        // 627\n  return {                                                                                                             // 628\n    kind: _kinds.SCALAR_TYPE_DEFINITION,                                                                               // 629\n    name: name,                                                                                                        // 630\n    loc: loc(parser, start)                                                                                            // 631\n  };                                                                                                                   // 632\n}                                                                                                                      // 633\n                                                                                                                       // 634\n/**                                                                                                                    // 635\n * ObjectTypeDefinition : type Name ImplementsInterfaces? { FieldDefinition+ }                                         // 636\n */                                                                                                                    // 637\nfunction parseObjectTypeDefinition(parser) {                                                                           // 638\n  var start = parser.token.start;                                                                                      // 639\n  expectKeyword(parser, 'type');                                                                                       // 640\n  var name = parseName(parser);                                                                                        // 641\n  var interfaces = parseImplementsInterfaces(parser);                                                                  // 642\n  var fields = any(parser, _lexer.TokenKind.BRACE_L, parseFieldDefinition, _lexer.TokenKind.BRACE_R);                  // 643\n  return {                                                                                                             // 644\n    kind: _kinds.OBJECT_TYPE_DEFINITION,                                                                               // 645\n    name: name,                                                                                                        // 646\n    interfaces: interfaces,                                                                                            // 647\n    fields: fields,                                                                                                    // 648\n    loc: loc(parser, start)                                                                                            // 649\n  };                                                                                                                   // 650\n}                                                                                                                      // 651\n                                                                                                                       // 652\n/**                                                                                                                    // 653\n * ImplementsInterfaces : implements NamedType+                                                                        // 654\n */                                                                                                                    // 655\nfunction parseImplementsInterfaces(parser) {                                                                           // 656\n  var types = [];                                                                                                      // 657\n  if (parser.token.value === 'implements') {                                                                           // 658\n    advance(parser);                                                                                                   // 659\n    do {                                                                                                               // 660\n      types.push(parseNamedType(parser));                                                                              // 661\n    } while (!peek(parser, _lexer.TokenKind.BRACE_L));                                                                 // 662\n  }                                                                                                                    // 663\n  return types;                                                                                                        // 664\n}                                                                                                                      // 665\n                                                                                                                       // 666\n/**                                                                                                                    // 667\n * FieldDefinition : Name ArgumentsDefinition? : Type                                                                  // 668\n */                                                                                                                    // 669\nfunction parseFieldDefinition(parser) {                                                                                // 670\n  var start = parser.token.start;                                                                                      // 671\n  var name = parseName(parser);                                                                                        // 672\n  var args = parseArgumentDefs(parser);                                                                                // 673\n  expect(parser, _lexer.TokenKind.COLON);                                                                              // 674\n  var type = parseType(parser);                                                                                        // 675\n  return {                                                                                                             // 676\n    kind: _kinds.FIELD_DEFINITION,                                                                                     // 677\n    name: name,                                                                                                        // 678\n    arguments: args,                                                                                                   // 679\n    type: type,                                                                                                        // 680\n    loc: loc(parser, start)                                                                                            // 681\n  };                                                                                                                   // 682\n}                                                                                                                      // 683\n                                                                                                                       // 684\n/**                                                                                                                    // 685\n * ArgumentsDefinition : ( InputValueDefinition+ )                                                                     // 686\n */                                                                                                                    // 687\nfunction parseArgumentDefs(parser) {                                                                                   // 688\n  if (!peek(parser, _lexer.TokenKind.PAREN_L)) {                                                                       // 689\n    return [];                                                                                                         // 690\n  }                                                                                                                    // 691\n  return many(parser, _lexer.TokenKind.PAREN_L, parseInputValueDef, _lexer.TokenKind.PAREN_R);                         // 692\n}                                                                                                                      // 693\n                                                                                                                       // 694\n/**                                                                                                                    // 695\n * InputValueDefinition : Name : Type DefaultValue?                                                                    // 696\n */                                                                                                                    // 697\nfunction parseInputValueDef(parser) {                                                                                  // 698\n  var start = parser.token.start;                                                                                      // 699\n  var name = parseName(parser);                                                                                        // 700\n  expect(parser, _lexer.TokenKind.COLON);                                                                              // 701\n  var type = parseType(parser);                                                                                        // 702\n  var defaultValue = null;                                                                                             // 703\n  if (skip(parser, _lexer.TokenKind.EQUALS)) {                                                                         // 704\n    defaultValue = parseConstValue(parser);                                                                            // 705\n  }                                                                                                                    // 706\n  return {                                                                                                             // 707\n    kind: _kinds.INPUT_VALUE_DEFINITION,                                                                               // 708\n    name: name,                                                                                                        // 709\n    type: type,                                                                                                        // 710\n    defaultValue: defaultValue,                                                                                        // 711\n    loc: loc(parser, start)                                                                                            // 712\n  };                                                                                                                   // 713\n}                                                                                                                      // 714\n                                                                                                                       // 715\n/**                                                                                                                    // 716\n * InterfaceTypeDefinition : interface Name { FieldDefinition+ }                                                       // 717\n */                                                                                                                    // 718\nfunction parseInterfaceTypeDefinition(parser) {                                                                        // 719\n  var start = parser.token.start;                                                                                      // 720\n  expectKeyword(parser, 'interface');                                                                                  // 721\n  var name = parseName(parser);                                                                                        // 722\n  var fields = any(parser, _lexer.TokenKind.BRACE_L, parseFieldDefinition, _lexer.TokenKind.BRACE_R);                  // 723\n  return {                                                                                                             // 724\n    kind: _kinds.INTERFACE_TYPE_DEFINITION,                                                                            // 725\n    name: name,                                                                                                        // 726\n    fields: fields,                                                                                                    // 727\n    loc: loc(parser, start)                                                                                            // 728\n  };                                                                                                                   // 729\n}                                                                                                                      // 730\n                                                                                                                       // 731\n/**                                                                                                                    // 732\n * UnionTypeDefinition : union Name = UnionMembers                                                                     // 733\n */                                                                                                                    // 734\nfunction parseUnionTypeDefinition(parser) {                                                                            // 735\n  var start = parser.token.start;                                                                                      // 736\n  expectKeyword(parser, 'union');                                                                                      // 737\n  var name = parseName(parser);                                                                                        // 738\n  expect(parser, _lexer.TokenKind.EQUALS);                                                                             // 739\n  var types = parseUnionMembers(parser);                                                                               // 740\n  return {                                                                                                             // 741\n    kind: _kinds.UNION_TYPE_DEFINITION,                                                                                // 742\n    name: name,                                                                                                        // 743\n    types: types,                                                                                                      // 744\n    loc: loc(parser, start)                                                                                            // 745\n  };                                                                                                                   // 746\n}                                                                                                                      // 747\n                                                                                                                       // 748\n/**                                                                                                                    // 749\n * UnionMembers :                                                                                                      // 750\n *   - NamedType                                                                                                       // 751\n *   - UnionMembers | NamedType                                                                                        // 752\n */                                                                                                                    // 753\nfunction parseUnionMembers(parser) {                                                                                   // 754\n  var members = [];                                                                                                    // 755\n  do {                                                                                                                 // 756\n    members.push(parseNamedType(parser));                                                                              // 757\n  } while (skip(parser, _lexer.TokenKind.PIPE));                                                                       // 758\n  return members;                                                                                                      // 759\n}                                                                                                                      // 760\n                                                                                                                       // 761\n/**                                                                                                                    // 762\n * EnumTypeDefinition : enum Name { EnumValueDefinition+ }                                                             // 763\n */                                                                                                                    // 764\nfunction parseEnumTypeDefinition(parser) {                                                                             // 765\n  var start = parser.token.start;                                                                                      // 766\n  expectKeyword(parser, 'enum');                                                                                       // 767\n  var name = parseName(parser);                                                                                        // 768\n  var values = many(parser, _lexer.TokenKind.BRACE_L, parseEnumValueDefinition, _lexer.TokenKind.BRACE_R);             // 769\n  return {                                                                                                             // 770\n    kind: _kinds.ENUM_TYPE_DEFINITION,                                                                                 // 771\n    name: name,                                                                                                        // 772\n    values: values,                                                                                                    // 773\n    loc: loc(parser, start)                                                                                            // 774\n  };                                                                                                                   // 775\n}                                                                                                                      // 776\n                                                                                                                       // 777\n/**                                                                                                                    // 778\n * EnumValueDefinition : EnumValue                                                                                     // 779\n *                                                                                                                     // 780\n * EnumValue : Name                                                                                                    // 781\n */                                                                                                                    // 782\nfunction parseEnumValueDefinition(parser) {                                                                            // 783\n  var start = parser.token.start;                                                                                      // 784\n  var name = parseName(parser);                                                                                        // 785\n  return {                                                                                                             // 786\n    kind: _kinds.ENUM_VALUE_DEFINITION,                                                                                // 787\n    name: name,                                                                                                        // 788\n    loc: loc(parser, start)                                                                                            // 789\n  };                                                                                                                   // 790\n}                                                                                                                      // 791\n                                                                                                                       // 792\n/**                                                                                                                    // 793\n * InputObjectTypeDefinition : input Name { InputValueDefinition+ }                                                    // 794\n */                                                                                                                    // 795\nfunction parseInputObjectTypeDefinition(parser) {                                                                      // 796\n  var start = parser.token.start;                                                                                      // 797\n  expectKeyword(parser, 'input');                                                                                      // 798\n  var name = parseName(parser);                                                                                        // 799\n  var fields = any(parser, _lexer.TokenKind.BRACE_L, parseInputValueDef, _lexer.TokenKind.BRACE_R);                    // 800\n  return {                                                                                                             // 801\n    kind: _kinds.INPUT_OBJECT_TYPE_DEFINITION,                                                                         // 802\n    name: name,                                                                                                        // 803\n    fields: fields,                                                                                                    // 804\n    loc: loc(parser, start)                                                                                            // 805\n  };                                                                                                                   // 806\n}                                                                                                                      // 807\n                                                                                                                       // 808\n/**                                                                                                                    // 809\n * TypeExtensionDefinition : extend ObjectTypeDefinition                                                               // 810\n */                                                                                                                    // 811\nfunction parseTypeExtensionDefinition(parser) {                                                                        // 812\n  var start = parser.token.start;                                                                                      // 813\n  expectKeyword(parser, 'extend');                                                                                     // 814\n  var definition = parseObjectTypeDefinition(parser);                                                                  // 815\n  return {                                                                                                             // 816\n    kind: _kinds.TYPE_EXTENSION_DEFINITION,                                                                            // 817\n    definition: definition,                                                                                            // 818\n    loc: loc(parser, start)                                                                                            // 819\n  };                                                                                                                   // 820\n}                                                                                                                      // 821\n                                                                                                                       // 822\n/**                                                                                                                    // 823\n * DirectiveDefinition :                                                                                               // 824\n *   - directive @ Name ArgumentsDefinition? on DirectiveLocations                                                     // 825\n */                                                                                                                    // 826\nfunction parseDirectiveDefinition(parser) {                                                                            // 827\n  var start = parser.token.start;                                                                                      // 828\n  expectKeyword(parser, 'directive');                                                                                  // 829\n  expect(parser, _lexer.TokenKind.AT);                                                                                 // 830\n  var name = parseName(parser);                                                                                        // 831\n  var args = parseArgumentDefs(parser);                                                                                // 832\n  expectKeyword(parser, 'on');                                                                                         // 833\n  var locations = parseDirectiveLocations(parser);                                                                     // 834\n  return {                                                                                                             // 835\n    kind: _kinds.DIRECTIVE_DEFINITION,                                                                                 // 836\n    name: name,                                                                                                        // 837\n    arguments: args,                                                                                                   // 838\n    locations: locations,                                                                                              // 839\n    loc: loc(parser, start)                                                                                            // 840\n  };                                                                                                                   // 841\n}                                                                                                                      // 842\n                                                                                                                       // 843\n/**                                                                                                                    // 844\n * DirectiveLocations :                                                                                                // 845\n *   - Name                                                                                                            // 846\n *   - DirectiveLocations | Name                                                                                       // 847\n */                                                                                                                    // 848\nfunction parseDirectiveLocations(parser) {                                                                             // 849\n  var locations = [];                                                                                                  // 850\n  do {                                                                                                                 // 851\n    locations.push(parseName(parser));                                                                                 // 852\n  } while (skip(parser, _lexer.TokenKind.PIPE));                                                                       // 853\n  return locations;                                                                                                    // 854\n}                                                                                                                      // 855\n                                                                                                                       // 856\n// Core parsing utility functions                                                                                      // 857\n                                                                                                                       // 858\n/**                                                                                                                    // 859\n * Returns the parser object that is used to store state throughout the                                                // 860\n * process of parsing.                                                                                                 // 861\n */                                                                                                                    // 862\nfunction makeParser(source, options) {                                                                                 // 863\n  var _lexToken = (0, _lexer.lex)(source);                                                                             // 864\n  return {                                                                                                             // 865\n    _lexToken: _lexToken,                                                                                              // 866\n    source: source,                                                                                                    // 867\n    options: options,                                                                                                  // 868\n    prevEnd: 0,                                                                                                        // 869\n    token: _lexToken()                                                                                                 // 870\n  };                                                                                                                   // 871\n}                                                                                                                      // 872\n                                                                                                                       // 873\n/**                                                                                                                    // 874\n * Returns a location object, used to identify the place in                                                            // 875\n * the source that created a given parsed object.                                                                      // 876\n */                                                                                                                    // 877\nfunction loc(parser, start) {                                                                                          // 878\n  if (parser.options.noLocation) {                                                                                     // 879\n    return null;                                                                                                       // 880\n  }                                                                                                                    // 881\n  if (parser.options.noSource) {                                                                                       // 882\n    return { start: start, end: parser.prevEnd };                                                                      // 883\n  }                                                                                                                    // 884\n  return { start: start, end: parser.prevEnd, source: parser.source };                                                 // 885\n}                                                                                                                      // 886\n                                                                                                                       // 887\n/**                                                                                                                    // 888\n * Moves the internal parser object to the next lexed token.                                                           // 889\n */                                                                                                                    // 890\nfunction advance(parser) {                                                                                             // 891\n  var prevEnd = parser.token.end;                                                                                      // 892\n  parser.prevEnd = prevEnd;                                                                                            // 893\n  parser.token = parser._lexToken(prevEnd);                                                                            // 894\n}                                                                                                                      // 895\n                                                                                                                       // 896\n/**                                                                                                                    // 897\n * Determines if the next token is of a given kind                                                                     // 898\n */                                                                                                                    // 899\nfunction peek(parser, kind) {                                                                                          // 900\n  return parser.token.kind === kind;                                                                                   // 901\n}                                                                                                                      // 902\n                                                                                                                       // 903\n/**                                                                                                                    // 904\n * If the next token is of the given kind, return true after advancing                                                 // 905\n * the parser. Otherwise, do not change the parser state and return false.                                             // 906\n */                                                                                                                    // 907\nfunction skip(parser, kind) {                                                                                          // 908\n  var match = parser.token.kind === kind;                                                                              // 909\n  if (match) {                                                                                                         // 910\n    advance(parser);                                                                                                   // 911\n  }                                                                                                                    // 912\n  return match;                                                                                                        // 913\n}                                                                                                                      // 914\n                                                                                                                       // 915\n/**                                                                                                                    // 916\n * If the next token is of the given kind, return that token after advancing                                           // 917\n * the parser. Otherwise, do not change the parser state and throw an error.                                           // 918\n */                                                                                                                    // 919\nfunction expect(parser, kind) {                                                                                        // 920\n  var token = parser.token;                                                                                            // 921\n  if (token.kind === kind) {                                                                                           // 922\n    advance(parser);                                                                                                   // 923\n    return token;                                                                                                      // 924\n  }                                                                                                                    // 925\n  throw (0, _error.syntaxError)(parser.source, token.start, 'Expected ' + (0, _lexer.getTokenKindDesc)(kind) + ', found ' + (0, _lexer.getTokenDesc)(token));\n}                                                                                                                      // 927\n                                                                                                                       // 928\n/**                                                                                                                    // 929\n * If the next token is a keyword with the given value, return that token after                                        // 930\n * advancing the parser. Otherwise, do not change the parser state and return                                          // 931\n * false.                                                                                                              // 932\n */                                                                                                                    // 933\nfunction expectKeyword(parser, value) {                                                                                // 934\n  var token = parser.token;                                                                                            // 935\n  if (token.kind === _lexer.TokenKind.NAME && token.value === value) {                                                 // 936\n    advance(parser);                                                                                                   // 937\n    return token;                                                                                                      // 938\n  }                                                                                                                    // 939\n  throw (0, _error.syntaxError)(parser.source, token.start, 'Expected \"' + value + '\", found ' + (0, _lexer.getTokenDesc)(token));\n}                                                                                                                      // 941\n                                                                                                                       // 942\n/**                                                                                                                    // 943\n * Helper function for creating an error when an unexpected lexed token                                                // 944\n * is encountered.                                                                                                     // 945\n */                                                                                                                    // 946\nfunction unexpected(parser, atToken) {                                                                                 // 947\n  var token = atToken || parser.token;                                                                                 // 948\n  return (0, _error.syntaxError)(parser.source, token.start, 'Unexpected ' + (0, _lexer.getTokenDesc)(token));         // 949\n}                                                                                                                      // 950\n                                                                                                                       // 951\n/**                                                                                                                    // 952\n * Returns a possibly empty list of parse nodes, determined by                                                         // 953\n * the parseFn. This list begins with a lex token of openKind                                                          // 954\n * and ends with a lex token of closeKind. Advances the parser                                                         // 955\n * to the next lex token after the closing token.                                                                      // 956\n */                                                                                                                    // 957\nfunction any(parser, openKind, parseFn, closeKind) {                                                                   // 958\n  expect(parser, openKind);                                                                                            // 959\n  var nodes = [];                                                                                                      // 960\n  while (!skip(parser, closeKind)) {                                                                                   // 961\n    nodes.push(parseFn(parser));                                                                                       // 962\n  }                                                                                                                    // 963\n  return nodes;                                                                                                        // 964\n}                                                                                                                      // 965\n                                                                                                                       // 966\n/**                                                                                                                    // 967\n * Returns a non-empty list of parse nodes, determined by                                                              // 968\n * the parseFn. This list begins with a lex token of openKind                                                          // 969\n * and ends with a lex token of closeKind. Advances the parser                                                         // 970\n * to the next lex token after the closing token.                                                                      // 971\n */                                                                                                                    // 972\nfunction many(parser, openKind, parseFn, closeKind) {                                                                  // 973\n  expect(parser, openKind);                                                                                            // 974\n  var nodes = [parseFn(parser)];                                                                                       // 975\n  while (!skip(parser, closeKind)) {                                                                                   // 976\n    nodes.push(parseFn(parser));                                                                                       // 977\n  }                                                                                                                    // 978\n  return nodes;                                                                                                        // 979\n}                                                                                                                      // 980\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"source.js\":[\"babel-runtime/helpers/classCallCheck\",function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/graphql/language/source.js                                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n'use strict';                                                                                                          // 1\n                                                                                                                       // 2\nObject.defineProperty(exports, \"__esModule\", {                                                                         // 3\n  value: true                                                                                                          // 4\n});                                                                                                                    // 5\nexports.Source = undefined;                                                                                            // 6\n                                                                                                                       // 7\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');                                                // 8\n                                                                                                                       // 9\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                       // 10\n                                                                                                                       // 11\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }                        // 12\n                                                                                                                       // 13\n/**                                                                                                                    // 14\n *  Copyright (c) 2015, Facebook, Inc.                                                                                 // 15\n *  All rights reserved.                                                                                               // 16\n *                                                                                                                     // 17\n *  This source code is licensed under the BSD-style license found in the                                              // 18\n *  LICENSE file in the root directory of this source tree. An additional grant                                        // 19\n *  of patent rights can be found in the PATENTS file in the same directory.                                           // 20\n */                                                                                                                    // 21\n                                                                                                                       // 22\n/**                                                                                                                    // 23\n * A representation of source input to GraphQL. The name is optional,                                                  // 24\n * but is mostly useful for clients who store GraphQL documents in                                                     // 25\n * source files; for example, if the GraphQL input is in a file Foo.graphql,                                           // 26\n * it might be useful for name to be \"Foo.graphql\".                                                                    // 27\n */                                                                                                                    // 28\n                                                                                                                       // 29\nvar Source = exports.Source = function Source(body, name) {                                                            // 30\n  (0, _classCallCheck3.default)(this, Source);                                                                         // 31\n                                                                                                                       // 32\n  this.body = body;                                                                                                    // 33\n  this.name = name || 'GraphQL';                                                                                       // 34\n};                                                                                                                     // 35\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"index.js\":[\"./location\",\"./lexer\",\"./parser\",\"./printer\",\"./source\",\"./visitor\",\"./kinds\",function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/graphql/language/index.js                                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n'use strict';                                                                                                          // 1\n                                                                                                                       // 2\nObject.defineProperty(exports, \"__esModule\", {                                                                         // 3\n  value: true                                                                                                          // 4\n});                                                                                                                    // 5\nexports.BREAK = exports.visitWithTypeInfo = exports.visitInParallel = exports.visit = exports.Source = exports.print = exports.parseValue = exports.parse = exports.lex = exports.Kind = exports.getLocation = undefined;\n                                                                                                                       // 7\nvar _location = require('./location');                                                                                 // 8\n                                                                                                                       // 9\nObject.defineProperty(exports, 'getLocation', {                                                                        // 10\n  enumerable: true,                                                                                                    // 11\n  get: function get() {                                                                                                // 12\n    return _location.getLocation;                                                                                      // 13\n  }                                                                                                                    // 14\n});                                                                                                                    // 15\n                                                                                                                       // 16\nvar _lexer = require('./lexer');                                                                                       // 17\n                                                                                                                       // 18\nObject.defineProperty(exports, 'lex', {                                                                                // 19\n  enumerable: true,                                                                                                    // 20\n  get: function get() {                                                                                                // 21\n    return _lexer.lex;                                                                                                 // 22\n  }                                                                                                                    // 23\n});                                                                                                                    // 24\n                                                                                                                       // 25\nvar _parser = require('./parser');                                                                                     // 26\n                                                                                                                       // 27\nObject.defineProperty(exports, 'parse', {                                                                              // 28\n  enumerable: true,                                                                                                    // 29\n  get: function get() {                                                                                                // 30\n    return _parser.parse;                                                                                              // 31\n  }                                                                                                                    // 32\n});                                                                                                                    // 33\nObject.defineProperty(exports, 'parseValue', {                                                                         // 34\n  enumerable: true,                                                                                                    // 35\n  get: function get() {                                                                                                // 36\n    return _parser.parseValue;                                                                                         // 37\n  }                                                                                                                    // 38\n});                                                                                                                    // 39\n                                                                                                                       // 40\nvar _printer = require('./printer');                                                                                   // 41\n                                                                                                                       // 42\nObject.defineProperty(exports, 'print', {                                                                              // 43\n  enumerable: true,                                                                                                    // 44\n  get: function get() {                                                                                                // 45\n    return _printer.print;                                                                                             // 46\n  }                                                                                                                    // 47\n});                                                                                                                    // 48\n                                                                                                                       // 49\nvar _source = require('./source');                                                                                     // 50\n                                                                                                                       // 51\nObject.defineProperty(exports, 'Source', {                                                                             // 52\n  enumerable: true,                                                                                                    // 53\n  get: function get() {                                                                                                // 54\n    return _source.Source;                                                                                             // 55\n  }                                                                                                                    // 56\n});                                                                                                                    // 57\n                                                                                                                       // 58\nvar _visitor = require('./visitor');                                                                                   // 59\n                                                                                                                       // 60\nObject.defineProperty(exports, 'visit', {                                                                              // 61\n  enumerable: true,                                                                                                    // 62\n  get: function get() {                                                                                                // 63\n    return _visitor.visit;                                                                                             // 64\n  }                                                                                                                    // 65\n});                                                                                                                    // 66\nObject.defineProperty(exports, 'visitInParallel', {                                                                    // 67\n  enumerable: true,                                                                                                    // 68\n  get: function get() {                                                                                                // 69\n    return _visitor.visitInParallel;                                                                                   // 70\n  }                                                                                                                    // 71\n});                                                                                                                    // 72\nObject.defineProperty(exports, 'visitWithTypeInfo', {                                                                  // 73\n  enumerable: true,                                                                                                    // 74\n  get: function get() {                                                                                                // 75\n    return _visitor.visitWithTypeInfo;                                                                                 // 76\n  }                                                                                                                    // 77\n});                                                                                                                    // 78\nObject.defineProperty(exports, 'BREAK', {                                                                              // 79\n  enumerable: true,                                                                                                    // 80\n  get: function get() {                                                                                                // 81\n    return _visitor.BREAK;                                                                                             // 82\n  }                                                                                                                    // 83\n});                                                                                                                    // 84\n                                                                                                                       // 85\nvar _kinds = require('./kinds');                                                                                       // 86\n                                                                                                                       // 87\nvar Kind = _interopRequireWildcard(_kinds);                                                                            // 88\n                                                                                                                       // 89\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n                                                                                                                       // 91\nexports.Kind = Kind;                                                                                                   // 92\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"location.js\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/graphql/language/location.js                                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n'use strict';                                                                                                          // 1\n                                                                                                                       // 2\nObject.defineProperty(exports, \"__esModule\", {                                                                         // 3\n  value: true                                                                                                          // 4\n});                                                                                                                    // 5\nexports.getLocation = getLocation;                                                                                     // 6\n                                                                                                                       // 7\n                                                                                                                       // 8\n/**                                                                                                                    // 9\n * Takes a Source and a UTF-8 character offset, and returns the corresponding                                          // 10\n * line and column as a SourceLocation.                                                                                // 11\n */                                                                                                                    // 12\n                                                                                                                       // 13\n/**                                                                                                                    // 14\n *  Copyright (c) 2015, Facebook, Inc.                                                                                 // 15\n *  All rights reserved.                                                                                               // 16\n *                                                                                                                     // 17\n *  This source code is licensed under the BSD-style license found in the                                              // 18\n *  LICENSE file in the root directory of this source tree. An additional grant                                        // 19\n *  of patent rights can be found in the PATENTS file in the same directory.                                           // 20\n */                                                                                                                    // 21\n                                                                                                                       // 22\nfunction getLocation(source, position) {                                                                               // 23\n  var lineRegexp = /\\r\\n|[\\n\\r]/g;                                                                                     // 24\n  var line = 1;                                                                                                        // 25\n  var column = position + 1;                                                                                           // 26\n  var match = void 0;                                                                                                  // 27\n  while ((match = lineRegexp.exec(source.body)) && match.index < position) {                                           // 28\n    line += 1;                                                                                                         // 29\n    column = position + 1 - (match.index + match[0].length);                                                           // 30\n  }                                                                                                                    // 31\n  return { line: line, column: column };                                                                               // 32\n}                                                                                                                      // 33\n                                                                                                                       // 34\n/**                                                                                                                    // 35\n * Represents a location in a Source.                                                                                  // 36\n */                                                                                                                    // 37\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"lexer.js\":[\"babel-runtime/core-js/json/stringify\",\"../error\",function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/graphql/language/lexer.js                                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n'use strict';                                                                                                          // 1\n                                                                                                                       // 2\nObject.defineProperty(exports, \"__esModule\", {                                                                         // 3\n  value: true                                                                                                          // 4\n});                                                                                                                    // 5\nexports.TokenKind = undefined;                                                                                         // 6\n                                                                                                                       // 7\nvar _stringify = require('babel-runtime/core-js/json/stringify');                                                      // 8\n                                                                                                                       // 9\nvar _stringify2 = _interopRequireDefault(_stringify);                                                                  // 10\n                                                                                                                       // 11\nexports.lex = lex;                                                                                                     // 12\nexports.getTokenDesc = getTokenDesc;                                                                                   // 13\nexports.getTokenKindDesc = getTokenKindDesc;                                                                           // 14\n                                                                                                                       // 15\nvar _error = require('../error');                                                                                      // 16\n                                                                                                                       // 17\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }                        // 18\n                                                                                                                       // 19\n/**                                                                                                                    // 20\n * Given a Source object, this returns a Lexer for that source.                                                        // 21\n * A Lexer is a function that acts like a generator in that every time                                                 // 22\n * it is called, it returns the next token in the Source. Assuming the                                                 // 23\n * source lexes, the final Token emitted by the lexer will be of kind                                                  // 24\n * EOF, after which the lexer will repeatedly return EOF tokens whenever                                               // 25\n * called.                                                                                                             // 26\n *                                                                                                                     // 27\n * The argument to the lexer function is optional, and can be used to                                                  // 28\n * rewind or fast forward the lexer to a new position in the source.                                                   // 29\n */                                                                                                                    // 30\n                                                                                                                       // 31\n                                                                                                                       // 32\n/**                                                                                                                    // 33\n * A representation of a lexed Token. Value only appears for non-punctuation                                           // 34\n * tokens: NAME, INT, FLOAT, and STRING.                                                                               // 35\n */                                                                                                                    // 36\n/*  /                                                                                                                  // 37\n/**                                                                                                                    // 38\n *  Copyright (c) 2015, Facebook, Inc.                                                                                 // 39\n *  All rights reserved.                                                                                               // 40\n *                                                                                                                     // 41\n *  This source code is licensed under the BSD-style license found in the                                              // 42\n *  LICENSE file in the root directory of this source tree. An additional grant                                        // 43\n *  of patent rights can be found in the PATENTS file in the same directory.                                           // 44\n */                                                                                                                    // 45\n                                                                                                                       // 46\nfunction lex(source) {                                                                                                 // 47\n  var prevPosition = 0;                                                                                                // 48\n  return function nextToken(resetPosition) {                                                                           // 49\n    var token = readToken(source, resetPosition === undefined ? prevPosition : resetPosition);                         // 50\n    prevPosition = token.end;                                                                                          // 51\n    return token;                                                                                                      // 52\n  };                                                                                                                   // 53\n}                                                                                                                      // 54\n                                                                                                                       // 55\n/**                                                                                                                    // 56\n * An enum describing the different kinds of tokens that the lexer emits.                                              // 57\n */                                                                                                                    // 58\nvar TokenKind = exports.TokenKind = {                                                                                  // 59\n  EOF: 1,                                                                                                              // 60\n  BANG: 2,                                                                                                             // 61\n  DOLLAR: 3,                                                                                                           // 62\n  PAREN_L: 4,                                                                                                          // 63\n  PAREN_R: 5,                                                                                                          // 64\n  SPREAD: 6,                                                                                                           // 65\n  COLON: 7,                                                                                                            // 66\n  EQUALS: 8,                                                                                                           // 67\n  AT: 9,                                                                                                               // 68\n  BRACKET_L: 10,                                                                                                       // 69\n  BRACKET_R: 11,                                                                                                       // 70\n  BRACE_L: 12,                                                                                                         // 71\n  PIPE: 13,                                                                                                            // 72\n  BRACE_R: 14,                                                                                                         // 73\n  NAME: 15,                                                                                                            // 74\n  INT: 16,                                                                                                             // 75\n  FLOAT: 17,                                                                                                           // 76\n  STRING: 18                                                                                                           // 77\n};                                                                                                                     // 78\n                                                                                                                       // 79\n/**                                                                                                                    // 80\n * A helper function to describe a token as a string for debugging                                                     // 81\n */                                                                                                                    // 82\nfunction getTokenDesc(token) {                                                                                         // 83\n  return token.value ? getTokenKindDesc(token.kind) + ' \"' + token.value + '\"' : getTokenKindDesc(token.kind);         // 84\n}                                                                                                                      // 85\n                                                                                                                       // 86\n/**                                                                                                                    // 87\n * A helper function to describe a token kind as a string for debugging                                                // 88\n */                                                                                                                    // 89\nfunction getTokenKindDesc(kind) {                                                                                      // 90\n  return tokenDescription[kind];                                                                                       // 91\n}                                                                                                                      // 92\n                                                                                                                       // 93\nvar tokenDescription = {};                                                                                             // 94\ntokenDescription[TokenKind.EOF] = 'EOF';                                                                               // 95\ntokenDescription[TokenKind.BANG] = '!';                                                                                // 96\ntokenDescription[TokenKind.DOLLAR] = '$';                                                                              // 97\ntokenDescription[TokenKind.PAREN_L] = '(';                                                                             // 98\ntokenDescription[TokenKind.PAREN_R] = ')';                                                                             // 99\ntokenDescription[TokenKind.SPREAD] = '...';                                                                            // 100\ntokenDescription[TokenKind.COLON] = ':';                                                                               // 101\ntokenDescription[TokenKind.EQUALS] = '=';                                                                              // 102\ntokenDescription[TokenKind.AT] = '@';                                                                                  // 103\ntokenDescription[TokenKind.BRACKET_L] = '[';                                                                           // 104\ntokenDescription[TokenKind.BRACKET_R] = ']';                                                                           // 105\ntokenDescription[TokenKind.BRACE_L] = '{';                                                                             // 106\ntokenDescription[TokenKind.PIPE] = '|';                                                                                // 107\ntokenDescription[TokenKind.BRACE_R] = '}';                                                                             // 108\ntokenDescription[TokenKind.NAME] = 'Name';                                                                             // 109\ntokenDescription[TokenKind.INT] = 'Int';                                                                               // 110\ntokenDescription[TokenKind.FLOAT] = 'Float';                                                                           // 111\ntokenDescription[TokenKind.STRING] = 'String';                                                                         // 112\n                                                                                                                       // 113\nvar charCodeAt = String.prototype.charCodeAt;                                                                          // 114\nvar slice = String.prototype.slice;                                                                                    // 115\n                                                                                                                       // 116\n/**                                                                                                                    // 117\n * Helper function for constructing the Token object.                                                                  // 118\n */                                                                                                                    // 119\nfunction makeToken(kind, start, end, value) {                                                                          // 120\n  return { kind: kind, start: start, end: end, value: value };                                                         // 121\n}                                                                                                                      // 122\n                                                                                                                       // 123\nfunction printCharCode(code) {                                                                                         // 124\n  return(                                                                                                              // 125\n    // NaN/undefined represents access beyond the end of the file.                                                     // 126\n    isNaN(code) ? '<EOF>' :                                                                                            // 127\n    // Trust JSON for ASCII.                                                                                           // 128\n    code < 0x007F ? (0, _stringify2.default)(String.fromCharCode(code)) :                                              // 129\n    // Otherwise print the escaped form.                                                                               // 130\n    '\"\\\\u' + ('00' + code.toString(16).toUpperCase()).slice(-4) + '\"'                                                  // 131\n  );                                                                                                                   // 132\n}                                                                                                                      // 133\n                                                                                                                       // 134\n/**                                                                                                                    // 135\n * Gets the next token from the source starting at the given position.                                                 // 136\n *                                                                                                                     // 137\n * This skips over whitespace and comments until it finds the next lexable                                             // 138\n * token, then lexes punctuators immediately or calls the appropriate helper                                           // 139\n * function for more complicated tokens.                                                                               // 140\n */                                                                                                                    // 141\nfunction readToken(source, fromPosition) {                                                                             // 142\n  var body = source.body;                                                                                              // 143\n  var bodyLength = body.length;                                                                                        // 144\n                                                                                                                       // 145\n  var position = positionAfterWhitespace(body, fromPosition);                                                          // 146\n                                                                                                                       // 147\n  if (position >= bodyLength) {                                                                                        // 148\n    return makeToken(TokenKind.EOF, position, position);                                                               // 149\n  }                                                                                                                    // 150\n                                                                                                                       // 151\n  var code = charCodeAt.call(body, position);                                                                          // 152\n                                                                                                                       // 153\n  // SourceCharacter                                                                                                   // 154\n  if (code < 0x0020 && code !== 0x0009 && code !== 0x000A && code !== 0x000D) {                                        // 155\n    throw (0, _error.syntaxError)(source, position, 'Invalid character ' + printCharCode(code) + '.');                 // 156\n  }                                                                                                                    // 157\n                                                                                                                       // 158\n  switch (code) {                                                                                                      // 159\n    // !                                                                                                               // 160\n    case 33:                                                                                                           // 161\n      return makeToken(TokenKind.BANG, position, position + 1);                                                        // 162\n    // $                                                                                                               // 163\n    case 36:                                                                                                           // 164\n      return makeToken(TokenKind.DOLLAR, position, position + 1);                                                      // 165\n    // (                                                                                                               // 166\n    case 40:                                                                                                           // 167\n      return makeToken(TokenKind.PAREN_L, position, position + 1);                                                     // 168\n    // )                                                                                                               // 169\n    case 41:                                                                                                           // 170\n      return makeToken(TokenKind.PAREN_R, position, position + 1);                                                     // 171\n    // .                                                                                                               // 172\n    case 46:                                                                                                           // 173\n      if (charCodeAt.call(body, position + 1) === 46 && charCodeAt.call(body, position + 2) === 46) {                  // 174\n        return makeToken(TokenKind.SPREAD, position, position + 3);                                                    // 175\n      }                                                                                                                // 176\n      break;                                                                                                           // 177\n    // :                                                                                                               // 178\n    case 58:                                                                                                           // 179\n      return makeToken(TokenKind.COLON, position, position + 1);                                                       // 180\n    // =                                                                                                               // 181\n    case 61:                                                                                                           // 182\n      return makeToken(TokenKind.EQUALS, position, position + 1);                                                      // 183\n    // @                                                                                                               // 184\n    case 64:                                                                                                           // 185\n      return makeToken(TokenKind.AT, position, position + 1);                                                          // 186\n    // [                                                                                                               // 187\n    case 91:                                                                                                           // 188\n      return makeToken(TokenKind.BRACKET_L, position, position + 1);                                                   // 189\n    // ]                                                                                                               // 190\n    case 93:                                                                                                           // 191\n      return makeToken(TokenKind.BRACKET_R, position, position + 1);                                                   // 192\n    // {                                                                                                               // 193\n    case 123:                                                                                                          // 194\n      return makeToken(TokenKind.BRACE_L, position, position + 1);                                                     // 195\n    // |                                                                                                               // 196\n    case 124:                                                                                                          // 197\n      return makeToken(TokenKind.PIPE, position, position + 1);                                                        // 198\n    // }                                                                                                               // 199\n    case 125:                                                                                                          // 200\n      return makeToken(TokenKind.BRACE_R, position, position + 1);                                                     // 201\n    // A-Z                                                                                                             // 202\n    case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:                                                   // 203\n    case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:                                                   // 204\n    case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:                                                   // 205\n    case 89:case 90:                                                                                                   // 206\n    // _                                                                                                               // 207\n    case 95:                                                                                                           // 208\n    // a-z                                                                                                             // 209\n    case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:                                              // 210\n    case 105:case 106:case 107:case 108:case 109:case 110:case 111:                                                    // 211\n    case 112:case 113:case 114:case 115:case 116:case 117:case 118:                                                    // 212\n    case 119:case 120:case 121:case 122:                                                                               // 213\n      return readName(source, position);                                                                               // 214\n    // -                                                                                                               // 215\n    case 45:                                                                                                           // 216\n    // 0-9                                                                                                             // 217\n    case 48:case 49:case 50:case 51:case 52:                                                                           // 218\n    case 53:case 54:case 55:case 56:case 57:                                                                           // 219\n      return readNumber(source, position, code);                                                                       // 220\n    // \"                                                                                                               // 221\n    case 34:                                                                                                           // 222\n      return readString(source, position);                                                                             // 223\n  }                                                                                                                    // 224\n                                                                                                                       // 225\n  throw (0, _error.syntaxError)(source, position, 'Unexpected character ' + printCharCode(code) + '.');                // 226\n}                                                                                                                      // 227\n                                                                                                                       // 228\n/**                                                                                                                    // 229\n * Reads from body starting at startPosition until it finds a non-whitespace                                           // 230\n * or commented character, then returns the position of that character for                                             // 231\n * lexing.                                                                                                             // 232\n */                                                                                                                    // 233\nfunction positionAfterWhitespace(body, startPosition) {                                                                // 234\n  var bodyLength = body.length;                                                                                        // 235\n  var position = startPosition;                                                                                        // 236\n  while (position < bodyLength) {                                                                                      // 237\n    var code = charCodeAt.call(body, position);                                                                        // 238\n    // Skip Ignored                                                                                                    // 239\n    if (                                                                                                               // 240\n    // BOM                                                                                                             // 241\n    code === 0xFEFF ||                                                                                                 // 242\n    // White Space                                                                                                     // 243\n    code === 0x0009 || // tab                                                                                          // 244\n    code === 0x0020 || // space                                                                                        // 245\n    // Line Terminator                                                                                                 // 246\n    code === 0x000A || // new line                                                                                     // 247\n    code === 0x000D || // carriage return                                                                              // 248\n    // Comma                                                                                                           // 249\n    code === 0x002C) {                                                                                                 // 250\n      ++position;                                                                                                      // 251\n      // Skip comments                                                                                                 // 252\n    } else if (code === 35) {                                                                                          // 253\n        // #                                                                                                           // 254\n        ++position;                                                                                                    // 255\n        while (position < bodyLength && (code = charCodeAt.call(body, position)) !== null && (                         // 256\n        // SourceCharacter but not LineTerminator                                                                      // 257\n        code > 0x001F || code === 0x0009) && code !== 0x000A && code !== 0x000D) {                                     // 258\n          ++position;                                                                                                  // 259\n        }                                                                                                              // 260\n      } else {                                                                                                         // 261\n        break;                                                                                                         // 262\n      }                                                                                                                // 263\n  }                                                                                                                    // 264\n  return position;                                                                                                     // 265\n}                                                                                                                      // 266\n                                                                                                                       // 267\n/**                                                                                                                    // 268\n * Reads a number token from the source file, either a float                                                           // 269\n * or an int depending on whether a decimal point appears.                                                             // 270\n *                                                                                                                     // 271\n * Int:   -?(0|[1-9][0-9]*)                                                                                            // 272\n * Float: -?(0|[1-9][0-9]*)(\\.[0-9]+)?((E|e)(+|-)?[0-9]+)?                                                             // 273\n */                                                                                                                    // 274\nfunction readNumber(source, start, firstCode) {                                                                        // 275\n  var body = source.body;                                                                                              // 276\n  var code = firstCode;                                                                                                // 277\n  var position = start;                                                                                                // 278\n  var isFloat = false;                                                                                                 // 279\n                                                                                                                       // 280\n  if (code === 45) {                                                                                                   // 281\n    // -                                                                                                               // 282\n    code = charCodeAt.call(body, ++position);                                                                          // 283\n  }                                                                                                                    // 284\n                                                                                                                       // 285\n  if (code === 48) {                                                                                                   // 286\n    // 0                                                                                                               // 287\n    code = charCodeAt.call(body, ++position);                                                                          // 288\n    if (code >= 48 && code <= 57) {                                                                                    // 289\n      throw (0, _error.syntaxError)(source, position, 'Invalid number, unexpected digit after 0: ' + printCharCode(code) + '.');\n    }                                                                                                                  // 291\n  } else {                                                                                                             // 292\n    position = readDigits(source, position, code);                                                                     // 293\n    code = charCodeAt.call(body, position);                                                                            // 294\n  }                                                                                                                    // 295\n                                                                                                                       // 296\n  if (code === 46) {                                                                                                   // 297\n    // .                                                                                                               // 298\n    isFloat = true;                                                                                                    // 299\n                                                                                                                       // 300\n    code = charCodeAt.call(body, ++position);                                                                          // 301\n    position = readDigits(source, position, code);                                                                     // 302\n    code = charCodeAt.call(body, position);                                                                            // 303\n  }                                                                                                                    // 304\n                                                                                                                       // 305\n  if (code === 69 || code === 101) {                                                                                   // 306\n    // E e                                                                                                             // 307\n    isFloat = true;                                                                                                    // 308\n                                                                                                                       // 309\n    code = charCodeAt.call(body, ++position);                                                                          // 310\n    if (code === 43 || code === 45) {                                                                                  // 311\n      // + -                                                                                                           // 312\n      code = charCodeAt.call(body, ++position);                                                                        // 313\n    }                                                                                                                  // 314\n    position = readDigits(source, position, code);                                                                     // 315\n  }                                                                                                                    // 316\n                                                                                                                       // 317\n  return makeToken(isFloat ? TokenKind.FLOAT : TokenKind.INT, start, position, slice.call(body, start, position));     // 318\n}                                                                                                                      // 319\n                                                                                                                       // 320\n/**                                                                                                                    // 321\n * Returns the new position in the source after reading digits.                                                        // 322\n */                                                                                                                    // 323\nfunction readDigits(source, start, firstCode) {                                                                        // 324\n  var body = source.body;                                                                                              // 325\n  var position = start;                                                                                                // 326\n  var code = firstCode;                                                                                                // 327\n  if (code >= 48 && code <= 57) {                                                                                      // 328\n    // 0 - 9                                                                                                           // 329\n    do {                                                                                                               // 330\n      code = charCodeAt.call(body, ++position);                                                                        // 331\n    } while (code >= 48 && code <= 57); // 0 - 9                                                                       // 332\n    return position;                                                                                                   // 333\n  }                                                                                                                    // 334\n  throw (0, _error.syntaxError)(source, position, 'Invalid number, expected digit but got: ' + printCharCode(code) + '.');\n}                                                                                                                      // 336\n                                                                                                                       // 337\n/**                                                                                                                    // 338\n * Reads a string token from the source file.                                                                          // 339\n *                                                                                                                     // 340\n * \"([^\"\\\\\\u000A\\u000D]|(\\\\(u[0-9a-fA-F]{4}|[\"\\\\/bfnrt])))*\"                                                           // 341\n */                                                                                                                    // 342\nfunction readString(source, start) {                                                                                   // 343\n  var body = source.body;                                                                                              // 344\n  var position = start + 1;                                                                                            // 345\n  var chunkStart = position;                                                                                           // 346\n  var code = 0;                                                                                                        // 347\n  var value = '';                                                                                                      // 348\n                                                                                                                       // 349\n  while (position < body.length && (code = charCodeAt.call(body, position)) !== null &&                                // 350\n  // not LineTerminator                                                                                                // 351\n  code !== 0x000A && code !== 0x000D &&                                                                                // 352\n  // not Quote (\")                                                                                                     // 353\n  code !== 34) {                                                                                                       // 354\n    // SourceCharacter                                                                                                 // 355\n    if (code < 0x0020 && code !== 0x0009) {                                                                            // 356\n      throw (0, _error.syntaxError)(source, position, 'Invalid character within String: ' + printCharCode(code) + '.');\n    }                                                                                                                  // 358\n                                                                                                                       // 359\n    ++position;                                                                                                        // 360\n    if (code === 92) {                                                                                                 // 361\n      // \\\n      value += slice.call(body, chunkStart, position - 1);                                                             // 363\n      code = charCodeAt.call(body, position);                                                                          // 364\n      switch (code) {                                                                                                  // 365\n        case 34:                                                                                                       // 366\n          value += '\"';break;                                                                                          // 367\n        case 47:                                                                                                       // 368\n          value += '\\/';break;                                                                                         // 369\n        case 92:                                                                                                       // 370\n          value += '\\\\';break;                                                                                         // 371\n        case 98:                                                                                                       // 372\n          value += '\\b';break;                                                                                         // 373\n        case 102:                                                                                                      // 374\n          value += '\\f';break;                                                                                         // 375\n        case 110:                                                                                                      // 376\n          value += '\\n';break;                                                                                         // 377\n        case 114:                                                                                                      // 378\n          value += '\\r';break;                                                                                         // 379\n        case 116:                                                                                                      // 380\n          value += '\\t';break;                                                                                         // 381\n        case 117:                                                                                                      // 382\n          // u                                                                                                         // 383\n          var charCode = uniCharCode(charCodeAt.call(body, position + 1), charCodeAt.call(body, position + 2), charCodeAt.call(body, position + 3), charCodeAt.call(body, position + 4));\n          if (charCode < 0) {                                                                                          // 385\n            throw (0, _error.syntaxError)(source, position, 'Invalid character escape sequence: ' + ('\\\\u' + body.slice(position + 1, position + 5) + '.'));\n          }                                                                                                            // 387\n          value += String.fromCharCode(charCode);                                                                      // 388\n          position += 4;                                                                                               // 389\n          break;                                                                                                       // 390\n        default:                                                                                                       // 391\n          throw (0, _error.syntaxError)(source, position, 'Invalid character escape sequence: \\\\' + String.fromCharCode(code) + '.');\n      }                                                                                                                // 393\n      ++position;                                                                                                      // 394\n      chunkStart = position;                                                                                           // 395\n    }                                                                                                                  // 396\n  }                                                                                                                    // 397\n                                                                                                                       // 398\n  if (code !== 34) {                                                                                                   // 399\n    // quote (\")                                                                                                       // 400\n    throw (0, _error.syntaxError)(source, position, 'Unterminated string.');                                           // 401\n  }                                                                                                                    // 402\n                                                                                                                       // 403\n  value += slice.call(body, chunkStart, position);                                                                     // 404\n  return makeToken(TokenKind.STRING, start, position + 1, value);                                                      // 405\n}                                                                                                                      // 406\n                                                                                                                       // 407\n/**                                                                                                                    // 408\n * Converts four hexidecimal chars to the integer that the                                                             // 409\n * string represents. For example, uniCharCode('0','0','0','f')                                                        // 410\n * will return 15, and uniCharCode('0','0','f','f') returns 255.                                                       // 411\n *                                                                                                                     // 412\n * Returns a negative number on error, if a char was invalid.                                                          // 413\n *                                                                                                                     // 414\n * This is implemented by noting that char2hex() returns -1 on error,                                                  // 415\n * which means the result of ORing the char2hex() will also be negative.                                               // 416\n */                                                                                                                    // 417\nfunction uniCharCode(a, b, c, d) {                                                                                     // 418\n  return char2hex(a) << 12 | char2hex(b) << 8 | char2hex(c) << 4 | char2hex(d);                                        // 419\n}                                                                                                                      // 420\n                                                                                                                       // 421\n/**                                                                                                                    // 422\n * Converts a hex character to its integer value.                                                                      // 423\n * '0' becomes 0, '9' becomes 9                                                                                        // 424\n * 'A' becomes 10, 'F' becomes 15                                                                                      // 425\n * 'a' becomes 10, 'f' becomes 15                                                                                      // 426\n *                                                                                                                     // 427\n * Returns -1 on error.                                                                                                // 428\n */                                                                                                                    // 429\nfunction char2hex(a) {                                                                                                 // 430\n  return a >= 48 && a <= 57 ? a - 48 : // 0-9                                                                          // 431\n  a >= 65 && a <= 70 ? a - 55 : // A-F                                                                                 // 432\n  a >= 97 && a <= 102 ? a - 87 : // a-f                                                                                // 433\n  -1;                                                                                                                  // 434\n}                                                                                                                      // 435\n                                                                                                                       // 436\n/**                                                                                                                    // 437\n * Reads an alphanumeric + underscore name from the source.                                                            // 438\n *                                                                                                                     // 439\n * [_A-Za-z][_0-9A-Za-z]*                                                                                              // 440\n */                                                                                                                    // 441\nfunction readName(source, position) {                                                                                  // 442\n  var body = source.body;                                                                                              // 443\n  var bodyLength = body.length;                                                                                        // 444\n  var end = position + 1;                                                                                              // 445\n  var code = 0;                                                                                                        // 446\n  while (end !== bodyLength && (code = charCodeAt.call(body, end)) !== null && (code === 95 || // _                    // 447\n  code >= 48 && code <= 57 || // 0-9                                                                                   // 448\n  code >= 65 && code <= 90 || // A-Z                                                                                   // 449\n  code >= 97 && code <= 122 // a-z                                                                                     // 450\n  )) {                                                                                                                 // 451\n    ++end;                                                                                                             // 452\n  }                                                                                                                    // 453\n  return makeToken(TokenKind.NAME, position, end, slice.call(body, position, end));                                    // 454\n}                                                                                                                      // 455\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"printer.js\":[\"babel-runtime/core-js/json/stringify\",\"./visitor\",function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/graphql/language/printer.js                                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n'use strict';                                                                                                          // 1\n                                                                                                                       // 2\nObject.defineProperty(exports, \"__esModule\", {                                                                         // 3\n  value: true                                                                                                          // 4\n});                                                                                                                    // 5\n                                                                                                                       // 6\nvar _stringify = require('babel-runtime/core-js/json/stringify');                                                      // 7\n                                                                                                                       // 8\nvar _stringify2 = _interopRequireDefault(_stringify);                                                                  // 9\n                                                                                                                       // 10\nexports.print = print;                                                                                                 // 11\n                                                                                                                       // 12\nvar _visitor = require('./visitor');                                                                                   // 13\n                                                                                                                       // 14\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }                        // 15\n                                                                                                                       // 16\n/**                                                                                                                    // 17\n * Converts an AST into a string, using one set of reasonable                                                          // 18\n * formatting rules.                                                                                                   // 19\n */                                                                                                                    // 20\nfunction print(ast) {                                                                                                  // 21\n  return (0, _visitor.visit)(ast, { leave: printDocASTReducer });                                                      // 22\n} /**                                                                                                                  // 23\n   *  Copyright (c) 2015, Facebook, Inc.                                                                               // 24\n   *  All rights reserved.                                                                                             // 25\n   *                                                                                                                   // 26\n   *  This source code is licensed under the BSD-style license found in the                                            // 27\n   *  LICENSE file in the root directory of this source tree. An additional grant                                      // 28\n   *  of patent rights can be found in the PATENTS file in the same directory.                                         // 29\n   */                                                                                                                  // 30\n                                                                                                                       // 31\nvar printDocASTReducer = {                                                                                             // 32\n  Name: function Name(node) {                                                                                          // 33\n    return node.value;                                                                                                 // 34\n  },                                                                                                                   // 35\n  Variable: function Variable(node) {                                                                                  // 36\n    return '$' + node.name;                                                                                            // 37\n  },                                                                                                                   // 38\n                                                                                                                       // 39\n  // Document                                                                                                          // 40\n                                                                                                                       // 41\n  Document: function Document(node) {                                                                                  // 42\n    return join(node.definitions, '\\n\\n') + '\\n';                                                                      // 43\n  },                                                                                                                   // 44\n                                                                                                                       // 45\n  OperationDefinition: function OperationDefinition(node) {                                                            // 46\n    var op = node.operation;                                                                                           // 47\n    var name = node.name;                                                                                              // 48\n    var varDefs = wrap('(', join(node.variableDefinitions, ', '), ')');                                                // 49\n    var directives = join(node.directives, ' ');                                                                       // 50\n    var selectionSet = node.selectionSet;                                                                              // 51\n    // Anonymous queries with no directives or variable definitions can use                                            // 52\n    // the query short form.                                                                                           // 53\n    return !name && !directives && !varDefs && op === 'query' ? selectionSet : join([op, join([name, varDefs]), directives, selectionSet], ' ');\n  },                                                                                                                   // 55\n                                                                                                                       // 56\n                                                                                                                       // 57\n  VariableDefinition: function VariableDefinition(_ref) {                                                              // 58\n    var variable = _ref.variable;                                                                                      // 59\n    var type = _ref.type;                                                                                              // 60\n    var defaultValue = _ref.defaultValue;                                                                              // 61\n    return variable + ': ' + type + wrap(' = ', defaultValue);                                                         // 62\n  },                                                                                                                   // 63\n                                                                                                                       // 64\n  SelectionSet: function SelectionSet(_ref2) {                                                                         // 65\n    var selections = _ref2.selections;                                                                                 // 66\n    return block(selections);                                                                                          // 67\n  },                                                                                                                   // 68\n                                                                                                                       // 69\n  Field: function Field(_ref3) {                                                                                       // 70\n    var alias = _ref3.alias;                                                                                           // 71\n    var name = _ref3.name;                                                                                             // 72\n    var args = _ref3.arguments;                                                                                        // 73\n    var directives = _ref3.directives;                                                                                 // 74\n    var selectionSet = _ref3.selectionSet;                                                                             // 75\n    return join([wrap('', alias, ': ') + name + wrap('(', join(args, ', '), ')'), join(directives, ' '), selectionSet], ' ');\n  },                                                                                                                   // 77\n                                                                                                                       // 78\n  Argument: function Argument(_ref4) {                                                                                 // 79\n    var name = _ref4.name;                                                                                             // 80\n    var value = _ref4.value;                                                                                           // 81\n    return name + ': ' + value;                                                                                        // 82\n  },                                                                                                                   // 83\n                                                                                                                       // 84\n  // Fragments                                                                                                         // 85\n                                                                                                                       // 86\n  FragmentSpread: function FragmentSpread(_ref5) {                                                                     // 87\n    var name = _ref5.name;                                                                                             // 88\n    var directives = _ref5.directives;                                                                                 // 89\n    return '...' + name + wrap(' ', join(directives, ' '));                                                            // 90\n  },                                                                                                                   // 91\n                                                                                                                       // 92\n  InlineFragment: function InlineFragment(_ref6) {                                                                     // 93\n    var typeCondition = _ref6.typeCondition;                                                                           // 94\n    var directives = _ref6.directives;                                                                                 // 95\n    var selectionSet = _ref6.selectionSet;                                                                             // 96\n    return join(['...', wrap('on ', typeCondition), join(directives, ' '), selectionSet], ' ');                        // 97\n  },                                                                                                                   // 98\n                                                                                                                       // 99\n  FragmentDefinition: function FragmentDefinition(_ref7) {                                                             // 100\n    var name = _ref7.name;                                                                                             // 101\n    var typeCondition = _ref7.typeCondition;                                                                           // 102\n    var directives = _ref7.directives;                                                                                 // 103\n    var selectionSet = _ref7.selectionSet;                                                                             // 104\n    return 'fragment ' + name + ' on ' + typeCondition + ' ' + wrap('', join(directives, ' '), ' ') + selectionSet;    // 105\n  },                                                                                                                   // 106\n                                                                                                                       // 107\n  // Value                                                                                                             // 108\n                                                                                                                       // 109\n  IntValue: function IntValue(_ref8) {                                                                                 // 110\n    var value = _ref8.value;                                                                                           // 111\n    return value;                                                                                                      // 112\n  },                                                                                                                   // 113\n  FloatValue: function FloatValue(_ref9) {                                                                             // 114\n    var value = _ref9.value;                                                                                           // 115\n    return value;                                                                                                      // 116\n  },                                                                                                                   // 117\n  StringValue: function StringValue(_ref10) {                                                                          // 118\n    var value = _ref10.value;                                                                                          // 119\n    return (0, _stringify2.default)(value);                                                                            // 120\n  },                                                                                                                   // 121\n  BooleanValue: function BooleanValue(_ref11) {                                                                        // 122\n    var value = _ref11.value;                                                                                          // 123\n    return (0, _stringify2.default)(value);                                                                            // 124\n  },                                                                                                                   // 125\n  EnumValue: function EnumValue(_ref12) {                                                                              // 126\n    var value = _ref12.value;                                                                                          // 127\n    return value;                                                                                                      // 128\n  },                                                                                                                   // 129\n  ListValue: function ListValue(_ref13) {                                                                              // 130\n    var values = _ref13.values;                                                                                        // 131\n    return '[' + join(values, ', ') + ']';                                                                             // 132\n  },                                                                                                                   // 133\n  ObjectValue: function ObjectValue(_ref14) {                                                                          // 134\n    var fields = _ref14.fields;                                                                                        // 135\n    return '{' + join(fields, ', ') + '}';                                                                             // 136\n  },                                                                                                                   // 137\n  ObjectField: function ObjectField(_ref15) {                                                                          // 138\n    var name = _ref15.name;                                                                                            // 139\n    var value = _ref15.value;                                                                                          // 140\n    return name + ': ' + value;                                                                                        // 141\n  },                                                                                                                   // 142\n                                                                                                                       // 143\n  // Directive                                                                                                         // 144\n                                                                                                                       // 145\n  Directive: function Directive(_ref16) {                                                                              // 146\n    var name = _ref16.name;                                                                                            // 147\n    var args = _ref16.arguments;                                                                                       // 148\n    return '@' + name + wrap('(', join(args, ', '), ')');                                                              // 149\n  },                                                                                                                   // 150\n                                                                                                                       // 151\n  // Type                                                                                                              // 152\n                                                                                                                       // 153\n  NamedType: function NamedType(_ref17) {                                                                              // 154\n    var name = _ref17.name;                                                                                            // 155\n    return name;                                                                                                       // 156\n  },                                                                                                                   // 157\n  ListType: function ListType(_ref18) {                                                                                // 158\n    var type = _ref18.type;                                                                                            // 159\n    return '[' + type + ']';                                                                                           // 160\n  },                                                                                                                   // 161\n  NonNullType: function NonNullType(_ref19) {                                                                          // 162\n    var type = _ref19.type;                                                                                            // 163\n    return type + '!';                                                                                                 // 164\n  },                                                                                                                   // 165\n                                                                                                                       // 166\n  // Type System Definitions                                                                                           // 167\n                                                                                                                       // 168\n  SchemaDefinition: function SchemaDefinition(_ref20) {                                                                // 169\n    var operationTypes = _ref20.operationTypes;                                                                        // 170\n    return 'schema ' + block(operationTypes);                                                                          // 171\n  },                                                                                                                   // 172\n                                                                                                                       // 173\n  OperationTypeDefinition: function OperationTypeDefinition(_ref21) {                                                  // 174\n    var operation = _ref21.operation;                                                                                  // 175\n    var type = _ref21.type;                                                                                            // 176\n    return operation + ': ' + type;                                                                                    // 177\n  },                                                                                                                   // 178\n                                                                                                                       // 179\n  ScalarTypeDefinition: function ScalarTypeDefinition(_ref22) {                                                        // 180\n    var name = _ref22.name;                                                                                            // 181\n    return 'scalar ' + name;                                                                                           // 182\n  },                                                                                                                   // 183\n                                                                                                                       // 184\n  ObjectTypeDefinition: function ObjectTypeDefinition(_ref23) {                                                        // 185\n    var name = _ref23.name;                                                                                            // 186\n    var interfaces = _ref23.interfaces;                                                                                // 187\n    var fields = _ref23.fields;                                                                                        // 188\n    return 'type ' + name + ' ' + wrap('implements ', join(interfaces, ', '), ' ') + block(fields);                    // 189\n  },                                                                                                                   // 190\n                                                                                                                       // 191\n  FieldDefinition: function FieldDefinition(_ref24) {                                                                  // 192\n    var name = _ref24.name;                                                                                            // 193\n    var args = _ref24.arguments;                                                                                       // 194\n    var type = _ref24.type;                                                                                            // 195\n    return name + wrap('(', join(args, ', '), ')') + ': ' + type;                                                      // 196\n  },                                                                                                                   // 197\n                                                                                                                       // 198\n  InputValueDefinition: function InputValueDefinition(_ref25) {                                                        // 199\n    var name = _ref25.name;                                                                                            // 200\n    var type = _ref25.type;                                                                                            // 201\n    var defaultValue = _ref25.defaultValue;                                                                            // 202\n    return name + ': ' + type + wrap(' = ', defaultValue);                                                             // 203\n  },                                                                                                                   // 204\n                                                                                                                       // 205\n  InterfaceTypeDefinition: function InterfaceTypeDefinition(_ref26) {                                                  // 206\n    var name = _ref26.name;                                                                                            // 207\n    var fields = _ref26.fields;                                                                                        // 208\n    return 'interface ' + name + ' ' + block(fields);                                                                  // 209\n  },                                                                                                                   // 210\n                                                                                                                       // 211\n  UnionTypeDefinition: function UnionTypeDefinition(_ref27) {                                                          // 212\n    var name = _ref27.name;                                                                                            // 213\n    var types = _ref27.types;                                                                                          // 214\n    return 'union ' + name + ' = ' + join(types, ' | ');                                                               // 215\n  },                                                                                                                   // 216\n                                                                                                                       // 217\n  EnumTypeDefinition: function EnumTypeDefinition(_ref28) {                                                            // 218\n    var name = _ref28.name;                                                                                            // 219\n    var values = _ref28.values;                                                                                        // 220\n    return 'enum ' + name + ' ' + block(values);                                                                       // 221\n  },                                                                                                                   // 222\n                                                                                                                       // 223\n  EnumValueDefinition: function EnumValueDefinition(_ref29) {                                                          // 224\n    var name = _ref29.name;                                                                                            // 225\n    return name;                                                                                                       // 226\n  },                                                                                                                   // 227\n                                                                                                                       // 228\n  InputObjectTypeDefinition: function InputObjectTypeDefinition(_ref30) {                                              // 229\n    var name = _ref30.name;                                                                                            // 230\n    var fields = _ref30.fields;                                                                                        // 231\n    return 'input ' + name + ' ' + block(fields);                                                                      // 232\n  },                                                                                                                   // 233\n                                                                                                                       // 234\n  TypeExtensionDefinition: function TypeExtensionDefinition(_ref31) {                                                  // 235\n    var definition = _ref31.definition;                                                                                // 236\n    return 'extend ' + definition;                                                                                     // 237\n  },                                                                                                                   // 238\n                                                                                                                       // 239\n  DirectiveDefinition: function DirectiveDefinition(_ref32) {                                                          // 240\n    var name = _ref32.name;                                                                                            // 241\n    var args = _ref32.arguments;                                                                                       // 242\n    var locations = _ref32.locations;                                                                                  // 243\n    return 'directive @' + name + wrap('(', join(args, ', '), ')') + ' on ' + join(locations, ' | ');                  // 244\n  }                                                                                                                    // 245\n};                                                                                                                     // 246\n                                                                                                                       // 247\n/**                                                                                                                    // 248\n * Given maybeArray, print an empty string if it is null or empty, otherwise                                           // 249\n * print all items together separated by separator if provided                                                         // 250\n */                                                                                                                    // 251\nfunction join(maybeArray, separator) {                                                                                 // 252\n  return maybeArray ? maybeArray.filter(function (x) {                                                                 // 253\n    return x;                                                                                                          // 254\n  }).join(separator || '') : '';                                                                                       // 255\n}                                                                                                                      // 256\n                                                                                                                       // 257\n/**                                                                                                                    // 258\n * Given maybeArray, print an empty string if it is null or empty, otherwise                                           // 259\n * print each item on its own line, wrapped in an indented \"{ }\" block.                                                // 260\n */                                                                                                                    // 261\nfunction block(maybeArray) {                                                                                           // 262\n  return length(maybeArray) ? indent('{\\n' + join(maybeArray, '\\n')) + '\\n}' : '';                                     // 263\n}                                                                                                                      // 264\n                                                                                                                       // 265\n/**                                                                                                                    // 266\n * If maybeString is not null or empty, then wrap with start and end, otherwise                                        // 267\n * print an empty string.                                                                                              // 268\n */                                                                                                                    // 269\nfunction wrap(start, maybeString, end) {                                                                               // 270\n  return maybeString ? start + maybeString + (end || '') : '';                                                         // 271\n}                                                                                                                      // 272\n                                                                                                                       // 273\nfunction indent(maybeString) {                                                                                         // 274\n  return maybeString && maybeString.replace(/\\n/g, '\\n  ');                                                            // 275\n}                                                                                                                      // 276\n                                                                                                                       // 277\nfunction length(maybeArray) {                                                                                          // 278\n  return maybeArray ? maybeArray.length : 0;                                                                           // 279\n}                                                                                                                      // 280\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"visitor.js\":[\"babel-runtime/core-js/json/stringify\",\"babel-runtime/helpers/slicedToArray\",function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/graphql/language/visitor.js                                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n'use strict';                                                                                                          // 1\n                                                                                                                       // 2\nObject.defineProperty(exports, \"__esModule\", {                                                                         // 3\n  value: true                                                                                                          // 4\n});                                                                                                                    // 5\nexports.BREAK = exports.QueryDocumentKeys = undefined;                                                                 // 6\n                                                                                                                       // 7\nvar _stringify = require('babel-runtime/core-js/json/stringify');                                                      // 8\n                                                                                                                       // 9\nvar _stringify2 = _interopRequireDefault(_stringify);                                                                  // 10\n                                                                                                                       // 11\nvar _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');                                                  // 12\n                                                                                                                       // 13\nvar _slicedToArray3 = _interopRequireDefault(_slicedToArray2);                                                         // 14\n                                                                                                                       // 15\nexports.visit = visit;                                                                                                 // 16\nexports.visitInParallel = visitInParallel;                                                                             // 17\nexports.visitWithTypeInfo = visitWithTypeInfo;                                                                         // 18\n                                                                                                                       // 19\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }                        // 20\n                                                                                                                       // 21\n/**                                                                                                                    // 22\n *  Copyright (c) 2015, Facebook, Inc.                                                                                 // 23\n *  All rights reserved.                                                                                               // 24\n *                                                                                                                     // 25\n *  This source code is licensed under the BSD-style license found in the                                              // 26\n *  LICENSE file in the root directory of this source tree. An additional grant                                        // 27\n *  of patent rights can be found in the PATENTS file in the same directory.                                           // 28\n */                                                                                                                    // 29\n                                                                                                                       // 30\nvar QueryDocumentKeys = exports.QueryDocumentKeys = {                                                                  // 31\n  Name: [],                                                                                                            // 32\n                                                                                                                       // 33\n  Document: ['definitions'],                                                                                           // 34\n  OperationDefinition: ['name', 'variableDefinitions', 'directives', 'selectionSet'],                                  // 35\n  VariableDefinition: ['variable', 'type', 'defaultValue'],                                                            // 36\n  Variable: ['name'],                                                                                                  // 37\n  SelectionSet: ['selections'],                                                                                        // 38\n  Field: ['alias', 'name', 'arguments', 'directives', 'selectionSet'],                                                 // 39\n  Argument: ['name', 'value'],                                                                                         // 40\n                                                                                                                       // 41\n  FragmentSpread: ['name', 'directives'],                                                                              // 42\n  InlineFragment: ['typeCondition', 'directives', 'selectionSet'],                                                     // 43\n  FragmentDefinition: ['name', 'typeCondition', 'directives', 'selectionSet'],                                         // 44\n                                                                                                                       // 45\n  IntValue: [],                                                                                                        // 46\n  FloatValue: [],                                                                                                      // 47\n  StringValue: [],                                                                                                     // 48\n  BooleanValue: [],                                                                                                    // 49\n  EnumValue: [],                                                                                                       // 50\n  ListValue: ['values'],                                                                                               // 51\n  ObjectValue: ['fields'],                                                                                             // 52\n  ObjectField: ['name', 'value'],                                                                                      // 53\n                                                                                                                       // 54\n  Directive: ['name', 'arguments'],                                                                                    // 55\n                                                                                                                       // 56\n  NamedType: ['name'],                                                                                                 // 57\n  ListType: ['type'],                                                                                                  // 58\n  NonNullType: ['type'],                                                                                               // 59\n                                                                                                                       // 60\n  SchemaDefinition: ['operationTypes'],                                                                                // 61\n  OperationTypeDefinition: ['type'],                                                                                   // 62\n                                                                                                                       // 63\n  ScalarTypeDefinition: ['name'],                                                                                      // 64\n  ObjectTypeDefinition: ['name', 'interfaces', 'fields'],                                                              // 65\n  FieldDefinition: ['name', 'arguments', 'type'],                                                                      // 66\n  InputValueDefinition: ['name', 'type', 'defaultValue'],                                                              // 67\n  InterfaceTypeDefinition: ['name', 'fields'],                                                                         // 68\n  UnionTypeDefinition: ['name', 'types'],                                                                              // 69\n  EnumTypeDefinition: ['name', 'values'],                                                                              // 70\n  EnumValueDefinition: ['name'],                                                                                       // 71\n  InputObjectTypeDefinition: ['name', 'fields'],                                                                       // 72\n                                                                                                                       // 73\n  TypeExtensionDefinition: ['definition'],                                                                             // 74\n                                                                                                                       // 75\n  DirectiveDefinition: ['name', 'arguments', 'locations']                                                              // 76\n};                                                                                                                     // 77\n                                                                                                                       // 78\nvar BREAK = exports.BREAK = {};                                                                                        // 79\n                                                                                                                       // 80\n/**                                                                                                                    // 81\n * visit() will walk through an AST using a depth first traversal, calling                                             // 82\n * the visitor's enter function at each node in the traversal, and calling the                                         // 83\n * leave function after visiting that node and all of its child nodes.                                                 // 84\n *                                                                                                                     // 85\n * By returning different values from the enter and leave functions, the                                               // 86\n * behavior of the visitor can be altered, including skipping over a sub-tree of                                       // 87\n * the AST (by returning false), editing the AST by returning a value or null                                          // 88\n * to remove the value, or to stop the whole traversal by returning BREAK.                                             // 89\n *                                                                                                                     // 90\n * When using visit() to edit an AST, the original AST will not be modified, and                                       // 91\n * a new version of the AST with the changes applied will be returned from the                                         // 92\n * visit function.                                                                                                     // 93\n *                                                                                                                     // 94\n *     const editedAST = visit(ast, {                                                                                  // 95\n *       enter(node, key, parent, path, ancestors) {                                                                   // 96\n *         // @return                                                                                                  // 97\n *         //   undefined: no action                                                                                   // 98\n *         //   false: skip visiting this node                                                                         // 99\n *         //   visitor.BREAK: stop visiting altogether                                                                // 100\n *         //   null: delete this node                                                                                 // 101\n *         //   any value: replace this node with the returned value                                                   // 102\n *       },                                                                                                            // 103\n *       leave(node, key, parent, path, ancestors) {                                                                   // 104\n *         // @return                                                                                                  // 105\n *         //   undefined: no action                                                                                   // 106\n *         //   false: no action                                                                                       // 107\n *         //   visitor.BREAK: stop visiting altogether                                                                // 108\n *         //   null: delete this node                                                                                 // 109\n *         //   any value: replace this node with the returned value                                                   // 110\n *       }                                                                                                             // 111\n *     });                                                                                                             // 112\n *                                                                                                                     // 113\n * Alternatively to providing enter() and leave() functions, a visitor can                                             // 114\n * instead provide functions named the same as the kinds of AST nodes, or                                              // 115\n * enter/leave visitors at a named key, leading to four permutations of                                                // 116\n * visitor API:                                                                                                        // 117\n *                                                                                                                     // 118\n * 1) Named visitors triggered when entering a node a specific kind.                                                   // 119\n *                                                                                                                     // 120\n *     visit(ast, {                                                                                                    // 121\n *       Kind(node) {                                                                                                  // 122\n *         // enter the \"Kind\" node                                                                                    // 123\n *       }                                                                                                             // 124\n *     })                                                                                                              // 125\n *                                                                                                                     // 126\n * 2) Named visitors that trigger upon entering and leaving a node of                                                  // 127\n *    a specific kind.                                                                                                 // 128\n *                                                                                                                     // 129\n *     visit(ast, {                                                                                                    // 130\n *       Kind: {                                                                                                       // 131\n *         enter(node) {                                                                                               // 132\n *           // enter the \"Kind\" node                                                                                  // 133\n *         }                                                                                                           // 134\n *         leave(node) {                                                                                               // 135\n *           // leave the \"Kind\" node                                                                                  // 136\n *         }                                                                                                           // 137\n *       }                                                                                                             // 138\n *     })                                                                                                              // 139\n *                                                                                                                     // 140\n * 3) Generic visitors that trigger upon entering and leaving any node.                                                // 141\n *                                                                                                                     // 142\n *     visit(ast, {                                                                                                    // 143\n *       enter(node) {                                                                                                 // 144\n *         // enter any node                                                                                           // 145\n *       },                                                                                                            // 146\n *       leave(node) {                                                                                                 // 147\n *         // leave any node                                                                                           // 148\n *       }                                                                                                             // 149\n *     })                                                                                                              // 150\n *                                                                                                                     // 151\n * 4) Parallel visitors for entering and leaving nodes of a specific kind.                                             // 152\n *                                                                                                                     // 153\n *     visit(ast, {                                                                                                    // 154\n *       enter: {                                                                                                      // 155\n *         Kind(node) {                                                                                                // 156\n *           // enter the \"Kind\" node                                                                                  // 157\n *         }                                                                                                           // 158\n *       },                                                                                                            // 159\n *       leave: {                                                                                                      // 160\n *         Kind(node) {                                                                                                // 161\n *           // leave the \"Kind\" node                                                                                  // 162\n *         }                                                                                                           // 163\n *       }                                                                                                             // 164\n *     })                                                                                                              // 165\n */                                                                                                                    // 166\nfunction visit(root, visitor, keyMap) {                                                                                // 167\n  var visitorKeys = keyMap || QueryDocumentKeys;                                                                       // 168\n                                                                                                                       // 169\n  var stack = void 0;                                                                                                  // 170\n  var inArray = Array.isArray(root);                                                                                   // 171\n  var keys = [root];                                                                                                   // 172\n  var index = -1;                                                                                                      // 173\n  var edits = [];                                                                                                      // 174\n  var parent = void 0;                                                                                                 // 175\n  var path = [];                                                                                                       // 176\n  var ancestors = [];                                                                                                  // 177\n  var newRoot = root;                                                                                                  // 178\n                                                                                                                       // 179\n  do {                                                                                                                 // 180\n    index++;                                                                                                           // 181\n    var isLeaving = index === keys.length;                                                                             // 182\n    var key = void 0;                                                                                                  // 183\n    var node = void 0;                                                                                                 // 184\n    var isEdited = isLeaving && edits.length !== 0;                                                                    // 185\n    if (isLeaving) {                                                                                                   // 186\n      key = ancestors.length === 0 ? undefined : path.pop();                                                           // 187\n      node = parent;                                                                                                   // 188\n      parent = ancestors.pop();                                                                                        // 189\n      if (isEdited) {                                                                                                  // 190\n        if (inArray) {                                                                                                 // 191\n          node = node.slice();                                                                                         // 192\n        } else {                                                                                                       // 193\n          var clone = {};                                                                                              // 194\n          for (var k in node) {                                                                                        // 195\n            if (node.hasOwnProperty(k)) {                                                                              // 196\n              clone[k] = node[k];                                                                                      // 197\n            }                                                                                                          // 198\n          }                                                                                                            // 199\n          node = clone;                                                                                                // 200\n        }                                                                                                              // 201\n        var editOffset = 0;                                                                                            // 202\n        for (var ii = 0; ii < edits.length; ii++) {                                                                    // 203\n          var _edits$ii = (0, _slicedToArray3.default)(edits[ii], 1);                                                  // 204\n                                                                                                                       // 205\n          var editKey = _edits$ii[0];                                                                                  // 206\n                                                                                                                       // 207\n          var _edits$ii2 = (0, _slicedToArray3.default)(edits[ii], 2);                                                 // 208\n                                                                                                                       // 209\n          var editValue = _edits$ii2[1];                                                                               // 210\n                                                                                                                       // 211\n          if (inArray) {                                                                                               // 212\n            editKey -= editOffset;                                                                                     // 213\n          }                                                                                                            // 214\n          if (inArray && editValue === null) {                                                                         // 215\n            node.splice(editKey, 1);                                                                                   // 216\n            editOffset++;                                                                                              // 217\n          } else {                                                                                                     // 218\n            node[editKey] = editValue;                                                                                 // 219\n          }                                                                                                            // 220\n        }                                                                                                              // 221\n      }                                                                                                                // 222\n      index = stack.index;                                                                                             // 223\n      keys = stack.keys;                                                                                               // 224\n      edits = stack.edits;                                                                                             // 225\n      inArray = stack.inArray;                                                                                         // 226\n      stack = stack.prev;                                                                                              // 227\n    } else {                                                                                                           // 228\n      key = parent ? inArray ? index : keys[index] : undefined;                                                        // 229\n      node = parent ? parent[key] : newRoot;                                                                           // 230\n      if (node === null || node === undefined) {                                                                       // 231\n        continue;                                                                                                      // 232\n      }                                                                                                                // 233\n      if (parent) {                                                                                                    // 234\n        path.push(key);                                                                                                // 235\n      }                                                                                                                // 236\n    }                                                                                                                  // 237\n                                                                                                                       // 238\n    var result = void 0;                                                                                               // 239\n    if (!Array.isArray(node)) {                                                                                        // 240\n      if (!isNode(node)) {                                                                                             // 241\n        throw new Error('Invalid AST Node: ' + (0, _stringify2.default)(node));                                        // 242\n      }                                                                                                                // 243\n      var visitFn = getVisitFn(visitor, node.kind, isLeaving);                                                         // 244\n      if (visitFn) {                                                                                                   // 245\n        result = visitFn.call(visitor, node, key, parent, path, ancestors);                                            // 246\n                                                                                                                       // 247\n        if (result === BREAK) {                                                                                        // 248\n          break;                                                                                                       // 249\n        }                                                                                                              // 250\n                                                                                                                       // 251\n        if (result === false) {                                                                                        // 252\n          if (!isLeaving) {                                                                                            // 253\n            path.pop();                                                                                                // 254\n            continue;                                                                                                  // 255\n          }                                                                                                            // 256\n        } else if (result !== undefined) {                                                                             // 257\n          edits.push([key, result]);                                                                                   // 258\n          if (!isLeaving) {                                                                                            // 259\n            if (isNode(result)) {                                                                                      // 260\n              node = result;                                                                                           // 261\n            } else {                                                                                                   // 262\n              path.pop();                                                                                              // 263\n              continue;                                                                                                // 264\n            }                                                                                                          // 265\n          }                                                                                                            // 266\n        }                                                                                                              // 267\n      }                                                                                                                // 268\n    }                                                                                                                  // 269\n                                                                                                                       // 270\n    if (result === undefined && isEdited) {                                                                            // 271\n      edits.push([key, node]);                                                                                         // 272\n    }                                                                                                                  // 273\n                                                                                                                       // 274\n    if (!isLeaving) {                                                                                                  // 275\n      stack = { inArray: inArray, index: index, keys: keys, edits: edits, prev: stack };                               // 276\n      inArray = Array.isArray(node);                                                                                   // 277\n      keys = inArray ? node : visitorKeys[node.kind] || [];                                                            // 278\n      index = -1;                                                                                                      // 279\n      edits = [];                                                                                                      // 280\n      if (parent) {                                                                                                    // 281\n        ancestors.push(parent);                                                                                        // 282\n      }                                                                                                                // 283\n      parent = node;                                                                                                   // 284\n    }                                                                                                                  // 285\n  } while (stack !== undefined);                                                                                       // 286\n                                                                                                                       // 287\n  if (edits.length !== 0) {                                                                                            // 288\n    newRoot = edits[edits.length - 1][1];                                                                              // 289\n  }                                                                                                                    // 290\n                                                                                                                       // 291\n  return newRoot;                                                                                                      // 292\n}                                                                                                                      // 293\n                                                                                                                       // 294\nfunction isNode(maybeNode) {                                                                                           // 295\n  return maybeNode && typeof maybeNode.kind === 'string';                                                              // 296\n}                                                                                                                      // 297\n                                                                                                                       // 298\n/**                                                                                                                    // 299\n * Creates a new visitor instance which delegates to many visitors to run in                                           // 300\n * parallel. Each visitor will be visited for each node before moving on.                                              // 301\n *                                                                                                                     // 302\n * If a prior visitor edits a node, no following visitors will see that node.                                          // 303\n */                                                                                                                    // 304\nfunction visitInParallel(visitors) {                                                                                   // 305\n  var skipping = new Array(visitors.length);                                                                           // 306\n                                                                                                                       // 307\n  return {                                                                                                             // 308\n    enter: function enter(node) {                                                                                      // 309\n      for (var i = 0; i < visitors.length; i++) {                                                                      // 310\n        if (!skipping[i]) {                                                                                            // 311\n          var fn = getVisitFn(visitors[i], node.kind, /* isLeaving */false);                                           // 312\n          if (fn) {                                                                                                    // 313\n            var result = fn.apply(visitors[i], arguments);                                                             // 314\n            if (result === false) {                                                                                    // 315\n              skipping[i] = node;                                                                                      // 316\n            } else if (result === BREAK) {                                                                             // 317\n              skipping[i] = BREAK;                                                                                     // 318\n            } else if (result !== undefined) {                                                                         // 319\n              return result;                                                                                           // 320\n            }                                                                                                          // 321\n          }                                                                                                            // 322\n        }                                                                                                              // 323\n      }                                                                                                                // 324\n    },                                                                                                                 // 325\n    leave: function leave(node) {                                                                                      // 326\n      for (var i = 0; i < visitors.length; i++) {                                                                      // 327\n        if (!skipping[i]) {                                                                                            // 328\n          var fn = getVisitFn(visitors[i], node.kind, /* isLeaving */true);                                            // 329\n          if (fn) {                                                                                                    // 330\n            var result = fn.apply(visitors[i], arguments);                                                             // 331\n            if (result === BREAK) {                                                                                    // 332\n              skipping[i] = BREAK;                                                                                     // 333\n            } else if (result !== undefined && result !== false) {                                                     // 334\n              return result;                                                                                           // 335\n            }                                                                                                          // 336\n          }                                                                                                            // 337\n        } else if (skipping[i] === node) {                                                                             // 338\n          skipping[i] = null;                                                                                          // 339\n        }                                                                                                              // 340\n      }                                                                                                                // 341\n    }                                                                                                                  // 342\n  };                                                                                                                   // 343\n}                                                                                                                      // 344\n                                                                                                                       // 345\n/**                                                                                                                    // 346\n * Creates a new visitor instance which maintains a provided TypeInfo instance                                         // 347\n * along with visiting visitor.                                                                                        // 348\n */                                                                                                                    // 349\nfunction visitWithTypeInfo(typeInfo, visitor) {                                                                        // 350\n  return {                                                                                                             // 351\n    enter: function enter(node) {                                                                                      // 352\n      typeInfo.enter(node);                                                                                            // 353\n      var fn = getVisitFn(visitor, node.kind, /* isLeaving */false);                                                   // 354\n      if (fn) {                                                                                                        // 355\n        var result = fn.apply(visitor, arguments);                                                                     // 356\n        if (result !== undefined) {                                                                                    // 357\n          typeInfo.leave(node);                                                                                        // 358\n          if (isNode(result)) {                                                                                        // 359\n            typeInfo.enter(result);                                                                                    // 360\n          }                                                                                                            // 361\n        }                                                                                                              // 362\n        return result;                                                                                                 // 363\n      }                                                                                                                // 364\n    },                                                                                                                 // 365\n    leave: function leave(node) {                                                                                      // 366\n      var fn = getVisitFn(visitor, node.kind, /* isLeaving */true);                                                    // 367\n      var result = void 0;                                                                                             // 368\n      if (fn) {                                                                                                        // 369\n        result = fn.apply(visitor, arguments);                                                                         // 370\n      }                                                                                                                // 371\n      typeInfo.leave(node);                                                                                            // 372\n      return result;                                                                                                   // 373\n    }                                                                                                                  // 374\n  };                                                                                                                   // 375\n}                                                                                                                      // 376\n                                                                                                                       // 377\n/**                                                                                                                    // 378\n * Given a visitor instance, if it is leaving or not, and a node kind, return                                          // 379\n * the function the visitor runtime should call.                                                                       // 380\n */                                                                                                                    // 381\nfunction getVisitFn(visitor, kind, isLeaving) {                                                                        // 382\n  var kindVisitor = visitor[kind];                                                                                     // 383\n  if (kindVisitor) {                                                                                                   // 384\n    if (!isLeaving && typeof kindVisitor === 'function') {                                                             // 385\n      // { Kind() {} }                                                                                                 // 386\n      return kindVisitor;                                                                                              // 387\n    }                                                                                                                  // 388\n    var kindSpecificVisitor = isLeaving ? kindVisitor.leave : kindVisitor.enter;                                       // 389\n    if (typeof kindSpecificVisitor === 'function') {                                                                   // 390\n      // { Kind: { enter() {}, leave() {} } }                                                                          // 391\n      return kindSpecificVisitor;                                                                                      // 392\n    }                                                                                                                  // 393\n  } else {                                                                                                             // 394\n    var specificVisitor = isLeaving ? visitor.leave : visitor.enter;                                                   // 395\n    if (specificVisitor) {                                                                                             // 396\n      if (typeof specificVisitor === 'function') {                                                                     // 397\n        // { enter() {}, leave() {} }                                                                                  // 398\n        return specificVisitor;                                                                                        // 399\n      }                                                                                                                // 400\n      var specificKindVisitor = specificVisitor[kind];                                                                 // 401\n      if (typeof specificKindVisitor === 'function') {                                                                 // 402\n        // { enter: { Kind() {} }, leave: { Kind() {} } }                                                              // 403\n        return specificKindVisitor;                                                                                    // 404\n      }                                                                                                                // 405\n    }                                                                                                                  // 406\n  }                                                                                                                    // 407\n}                                                                                                                      // 408\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"kinds.js\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/graphql/language/kinds.js                                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n'use strict';                                                                                                          // 1\n                                                                                                                       // 2\nObject.defineProperty(exports, \"__esModule\", {                                                                         // 3\n  value: true                                                                                                          // 4\n});                                                                                                                    // 5\n/**                                                                                                                    // 6\n *  Copyright (c) 2015, Facebook, Inc.                                                                                 // 7\n *  All rights reserved.                                                                                               // 8\n *                                                                                                                     // 9\n *  This source code is licensed under the BSD-style license found in the                                              // 10\n *  LICENSE file in the root directory of this source tree. An additional grant                                        // 11\n *  of patent rights can be found in the PATENTS file in the same directory.                                           // 12\n */                                                                                                                    // 13\n                                                                                                                       // 14\n// Name                                                                                                                // 15\n                                                                                                                       // 16\nvar NAME = exports.NAME = 'Name';                                                                                      // 17\n                                                                                                                       // 18\n// Document                                                                                                            // 19\n                                                                                                                       // 20\nvar DOCUMENT = exports.DOCUMENT = 'Document';                                                                          // 21\nvar OPERATION_DEFINITION = exports.OPERATION_DEFINITION = 'OperationDefinition';                                       // 22\nvar VARIABLE_DEFINITION = exports.VARIABLE_DEFINITION = 'VariableDefinition';                                          // 23\nvar VARIABLE = exports.VARIABLE = 'Variable';                                                                          // 24\nvar SELECTION_SET = exports.SELECTION_SET = 'SelectionSet';                                                            // 25\nvar FIELD = exports.FIELD = 'Field';                                                                                   // 26\nvar ARGUMENT = exports.ARGUMENT = 'Argument';                                                                          // 27\n                                                                                                                       // 28\n// Fragments                                                                                                           // 29\n                                                                                                                       // 30\nvar FRAGMENT_SPREAD = exports.FRAGMENT_SPREAD = 'FragmentSpread';                                                      // 31\nvar INLINE_FRAGMENT = exports.INLINE_FRAGMENT = 'InlineFragment';                                                      // 32\nvar FRAGMENT_DEFINITION = exports.FRAGMENT_DEFINITION = 'FragmentDefinition';                                          // 33\n                                                                                                                       // 34\n// Values                                                                                                              // 35\n                                                                                                                       // 36\nvar INT = exports.INT = 'IntValue';                                                                                    // 37\nvar FLOAT = exports.FLOAT = 'FloatValue';                                                                              // 38\nvar STRING = exports.STRING = 'StringValue';                                                                           // 39\nvar BOOLEAN = exports.BOOLEAN = 'BooleanValue';                                                                        // 40\nvar ENUM = exports.ENUM = 'EnumValue';                                                                                 // 41\nvar LIST = exports.LIST = 'ListValue';                                                                                 // 42\nvar OBJECT = exports.OBJECT = 'ObjectValue';                                                                           // 43\nvar OBJECT_FIELD = exports.OBJECT_FIELD = 'ObjectField';                                                               // 44\n                                                                                                                       // 45\n// Directives                                                                                                          // 46\n                                                                                                                       // 47\nvar DIRECTIVE = exports.DIRECTIVE = 'Directive';                                                                       // 48\n                                                                                                                       // 49\n// Types                                                                                                               // 50\n                                                                                                                       // 51\nvar NAMED_TYPE = exports.NAMED_TYPE = 'NamedType';                                                                     // 52\nvar LIST_TYPE = exports.LIST_TYPE = 'ListType';                                                                        // 53\nvar NON_NULL_TYPE = exports.NON_NULL_TYPE = 'NonNullType';                                                             // 54\n                                                                                                                       // 55\n// Type System Definitions                                                                                             // 56\n                                                                                                                       // 57\nvar SCHEMA_DEFINITION = exports.SCHEMA_DEFINITION = 'SchemaDefinition';                                                // 58\nvar OPERATION_TYPE_DEFINITION = exports.OPERATION_TYPE_DEFINITION = 'OperationTypeDefinition';                         // 59\n                                                                                                                       // 60\n// Type Definitions                                                                                                    // 61\n                                                                                                                       // 62\nvar SCALAR_TYPE_DEFINITION = exports.SCALAR_TYPE_DEFINITION = 'ScalarTypeDefinition';                                  // 63\nvar OBJECT_TYPE_DEFINITION = exports.OBJECT_TYPE_DEFINITION = 'ObjectTypeDefinition';                                  // 64\nvar FIELD_DEFINITION = exports.FIELD_DEFINITION = 'FieldDefinition';                                                   // 65\nvar INPUT_VALUE_DEFINITION = exports.INPUT_VALUE_DEFINITION = 'InputValueDefinition';                                  // 66\nvar INTERFACE_TYPE_DEFINITION = exports.INTERFACE_TYPE_DEFINITION = 'InterfaceTypeDefinition';                         // 67\nvar UNION_TYPE_DEFINITION = exports.UNION_TYPE_DEFINITION = 'UnionTypeDefinition';                                     // 68\nvar ENUM_TYPE_DEFINITION = exports.ENUM_TYPE_DEFINITION = 'EnumTypeDefinition';                                        // 69\nvar ENUM_VALUE_DEFINITION = exports.ENUM_VALUE_DEFINITION = 'EnumValueDefinition';                                     // 70\nvar INPUT_OBJECT_TYPE_DEFINITION = exports.INPUT_OBJECT_TYPE_DEFINITION = 'InputObjectTypeDefinition';                 // 71\n                                                                                                                       // 72\n// Type Extensions                                                                                                     // 73\n                                                                                                                       // 74\nvar TYPE_EXTENSION_DEFINITION = exports.TYPE_EXTENSION_DEFINITION = 'TypeExtensionDefinition';                         // 75\n                                                                                                                       // 76\n// Directive Definitions                                                                                               // 77\n                                                                                                                       // 78\nvar DIRECTIVE_DEFINITION = exports.DIRECTIVE_DEFINITION = 'DirectiveDefinition';                                       // 79\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"error\":{\"index.js\":[\"./GraphQLError\",\"./syntaxError\",\"./locatedError\",\"./formatError\",function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/graphql/error/index.js                                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n'use strict';                                                                                                          // 1\n                                                                                                                       // 2\nObject.defineProperty(exports, \"__esModule\", {                                                                         // 3\n  value: true                                                                                                          // 4\n});                                                                                                                    // 5\n                                                                                                                       // 6\nvar _GraphQLError = require('./GraphQLError');                                                                         // 7\n                                                                                                                       // 8\nObject.defineProperty(exports, 'GraphQLError', {                                                                       // 9\n  enumerable: true,                                                                                                    // 10\n  get: function get() {                                                                                                // 11\n    return _GraphQLError.GraphQLError;                                                                                 // 12\n  }                                                                                                                    // 13\n});                                                                                                                    // 14\n                                                                                                                       // 15\nvar _syntaxError = require('./syntaxError');                                                                           // 16\n                                                                                                                       // 17\nObject.defineProperty(exports, 'syntaxError', {                                                                        // 18\n  enumerable: true,                                                                                                    // 19\n  get: function get() {                                                                                                // 20\n    return _syntaxError.syntaxError;                                                                                   // 21\n  }                                                                                                                    // 22\n});                                                                                                                    // 23\n                                                                                                                       // 24\nvar _locatedError = require('./locatedError');                                                                         // 25\n                                                                                                                       // 26\nObject.defineProperty(exports, 'locatedError', {                                                                       // 27\n  enumerable: true,                                                                                                    // 28\n  get: function get() {                                                                                                // 29\n    return _locatedError.locatedError;                                                                                 // 30\n  }                                                                                                                    // 31\n});                                                                                                                    // 32\n                                                                                                                       // 33\nvar _formatError = require('./formatError');                                                                           // 34\n                                                                                                                       // 35\nObject.defineProperty(exports, 'formatError', {                                                                        // 36\n  enumerable: true,                                                                                                    // 37\n  get: function get() {                                                                                                // 38\n    return _formatError.formatError;                                                                                   // 39\n  }                                                                                                                    // 40\n});                                                                                                                    // 41\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"GraphQLError.js\":[\"babel-runtime/core-js/object/get-prototype-of\",\"babel-runtime/helpers/classCallCheck\",\"babel-runtime/helpers/possibleConstructorReturn\",\"babel-runtime/helpers/inherits\",\"../language\",function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/graphql/error/GraphQLError.js                                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n'use strict';                                                                                                          // 1\n                                                                                                                       // 2\nObject.defineProperty(exports, \"__esModule\", {                                                                         // 3\n  value: true                                                                                                          // 4\n});                                                                                                                    // 5\nexports.GraphQLError = undefined;                                                                                      // 6\n                                                                                                                       // 7\nvar _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');                                        // 8\n                                                                                                                       // 9\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);                                                        // 10\n                                                                                                                       // 11\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');                                                // 12\n                                                                                                                       // 13\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                       // 14\n                                                                                                                       // 15\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');                          // 16\n                                                                                                                       // 17\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);                                 // 18\n                                                                                                                       // 19\nvar _inherits2 = require('babel-runtime/helpers/inherits');                                                            // 20\n                                                                                                                       // 21\nvar _inherits3 = _interopRequireDefault(_inherits2);                                                                   // 22\n                                                                                                                       // 23\nvar _language = require('../language');                                                                                // 24\n                                                                                                                       // 25\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }                        // 26\n                                                                                                                       // 27\nvar GraphQLError = exports.GraphQLError = function (_Error) {                                                          // 28\n  (0, _inherits3.default)(GraphQLError, _Error);                                                                       // 29\n                                                                                                                       // 30\n  function GraphQLError(message,                                                                                       // 31\n  // A flow bug keeps us from declaring nodes as an array of Node                                                      // 32\n  nodes, /* Node */stack, source, positions) {                                                                         // 33\n    (0, _classCallCheck3.default)(this, GraphQLError);                                                                 // 34\n                                                                                                                       // 35\n    var _this = (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(GraphQLError).call(this, message));\n                                                                                                                       // 37\n    _this.message = message;                                                                                           // 38\n                                                                                                                       // 39\n    Object.defineProperty(_this, 'stack', { value: stack || message });                                                // 40\n    Object.defineProperty(_this, 'nodes', { value: nodes });                                                           // 41\n                                                                                                                       // 42\n    // Note: flow does not yet know about Object.defineProperty with `get`.                                            // 43\n    Object.defineProperty(_this, 'source', {                                                                           // 44\n      get: function get() {                                                                                            // 45\n        if (source) {                                                                                                  // 46\n          return source;                                                                                               // 47\n        }                                                                                                              // 48\n        if (nodes && nodes.length > 0) {                                                                               // 49\n          var node = nodes[0];                                                                                         // 50\n          return node && node.loc && node.loc.source;                                                                  // 51\n        }                                                                                                              // 52\n      }                                                                                                                // 53\n    });                                                                                                                // 54\n                                                                                                                       // 55\n    Object.defineProperty(_this, 'positions', {                                                                        // 56\n      get: function get() {                                                                                            // 57\n        if (positions) {                                                                                               // 58\n          return positions;                                                                                            // 59\n        }                                                                                                              // 60\n        if (nodes) {                                                                                                   // 61\n          var nodePositions = nodes.map(function (node) {                                                              // 62\n            return node.loc && node.loc.start;                                                                         // 63\n          });                                                                                                          // 64\n          if (nodePositions.some(function (p) {                                                                        // 65\n            return p;                                                                                                  // 66\n          })) {                                                                                                        // 67\n            return nodePositions;                                                                                      // 68\n          }                                                                                                            // 69\n        }                                                                                                              // 70\n      }                                                                                                                // 71\n    });                                                                                                                // 72\n                                                                                                                       // 73\n    Object.defineProperty(_this, 'locations', {                                                                        // 74\n      get: function get() {                                                                                            // 75\n        var _this2 = this;                                                                                             // 76\n                                                                                                                       // 77\n        if (this.positions && this.source) {                                                                           // 78\n          return this.positions.map(function (pos) {                                                                   // 79\n            return (0, _language.getLocation)(_this2.source, pos);                                                     // 80\n          });                                                                                                          // 81\n        }                                                                                                              // 82\n      }                                                                                                                // 83\n    });                                                                                                                // 84\n    return _this;                                                                                                      // 85\n  }                                                                                                                    // 86\n                                                                                                                       // 87\n  return GraphQLError;                                                                                                 // 88\n}(Error);                                                                                                              // 89\n/**                                                                                                                    // 90\n *  Copyright (c) 2015, Facebook, Inc.                                                                                 // 91\n *  All rights reserved.                                                                                               // 92\n *                                                                                                                     // 93\n *  This source code is licensed under the BSD-style license found in the                                              // 94\n *  LICENSE file in the root directory of this source tree. An additional grant                                        // 95\n *  of patent rights can be found in the PATENTS file in the same directory.                                           // 96\n */                                                                                                                    // 97\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"syntaxError.js\":[\"../language/location\",\"./GraphQLError\",function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/graphql/error/syntaxError.js                                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n'use strict';                                                                                                          // 1\n                                                                                                                       // 2\nObject.defineProperty(exports, \"__esModule\", {                                                                         // 3\n  value: true                                                                                                          // 4\n});                                                                                                                    // 5\nexports.syntaxError = syntaxError;                                                                                     // 6\n                                                                                                                       // 7\nvar _location = require('../language/location');                                                                       // 8\n                                                                                                                       // 9\nvar _GraphQLError = require('./GraphQLError');                                                                         // 10\n                                                                                                                       // 11\n/**                                                                                                                    // 12\n * Produces a GraphQLError representing a syntax error, containing useful                                              // 13\n * descriptive information about the syntax error's position in the source.                                            // 14\n */                                                                                                                    // 15\n                                                                                                                       // 16\n/**                                                                                                                    // 17\n *  Copyright (c) 2015, Facebook, Inc.                                                                                 // 18\n *  All rights reserved.                                                                                               // 19\n *                                                                                                                     // 20\n *  This source code is licensed under the BSD-style license found in the                                              // 21\n *  LICENSE file in the root directory of this source tree. An additional grant                                        // 22\n *  of patent rights can be found in the PATENTS file in the same directory.                                           // 23\n */                                                                                                                    // 24\n                                                                                                                       // 25\nfunction syntaxError(source, position, description) {                                                                  // 26\n  var location = (0, _location.getLocation)(source, position);                                                         // 27\n  var error = new _GraphQLError.GraphQLError('Syntax Error ' + source.name + ' (' + location.line + ':' + location.column + ') ' + description + '\\n\\n' + highlightSourceAtLocation(source, location), undefined, undefined, source, [position]);\n  return error;                                                                                                        // 29\n}                                                                                                                      // 30\n                                                                                                                       // 31\n/**                                                                                                                    // 32\n * Render a helpful description of the location of the error in the GraphQL                                            // 33\n * Source document.                                                                                                    // 34\n */                                                                                                                    // 35\nfunction highlightSourceAtLocation(source, location) {                                                                 // 36\n  var line = location.line;                                                                                            // 37\n  var prevLineNum = (line - 1).toString();                                                                             // 38\n  var lineNum = line.toString();                                                                                       // 39\n  var nextLineNum = (line + 1).toString();                                                                             // 40\n  var padLen = nextLineNum.length;                                                                                     // 41\n  var lines = source.body.split(/\\r\\n|[\\n\\r]/g);                                                                       // 42\n  return (line >= 2 ? lpad(padLen, prevLineNum) + ': ' + lines[line - 2] + '\\n' : '') + lpad(padLen, lineNum) + ': ' + lines[line - 1] + '\\n' + Array(2 + padLen + location.column).join(' ') + '^\\n' + (line < lines.length ? lpad(padLen, nextLineNum) + ': ' + lines[line] + '\\n' : '');\n}                                                                                                                      // 44\n                                                                                                                       // 45\nfunction lpad(len, str) {                                                                                              // 46\n  return Array(len - str.length + 1).join(' ') + str;                                                                  // 47\n}                                                                                                                      // 48\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"locatedError.js\":[\"./GraphQLError\",function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/graphql/error/locatedError.js                                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n'use strict';                                                                                                          // 1\n                                                                                                                       // 2\nObject.defineProperty(exports, \"__esModule\", {                                                                         // 3\n  value: true                                                                                                          // 4\n});                                                                                                                    // 5\nexports.locatedError = locatedError;                                                                                   // 6\n                                                                                                                       // 7\nvar _GraphQLError = require('./GraphQLError');                                                                         // 8\n                                                                                                                       // 9\n/**                                                                                                                    // 10\n * Given an arbitrary Error, presumably thrown while attempting to execute a                                           // 11\n * GraphQL operation, produce a new GraphQLError aware of the location in the                                          // 12\n * document responsible for the original Error.                                                                        // 13\n */                                                                                                                    // 14\nfunction locatedError(originalError, nodes) {                                                                          // 15\n  var message = originalError ? originalError.message || String(originalError) : 'An unknown error occurred.';         // 16\n  var stack = originalError ? originalError.stack : null;                                                              // 17\n  var error = new _GraphQLError.GraphQLError(message, nodes, stack);                                                   // 18\n  error.originalError = originalError;                                                                                 // 19\n  return error;                                                                                                        // 20\n}                                                                                                                      // 21\n/**                                                                                                                    // 22\n *  Copyright (c) 2015, Facebook, Inc.                                                                                 // 23\n *  All rights reserved.                                                                                               // 24\n *                                                                                                                     // 25\n *  This source code is licensed under the BSD-style license found in the                                              // 26\n *  LICENSE file in the root directory of this source tree. An additional grant                                        // 27\n *  of patent rights can be found in the PATENTS file in the same directory.                                           // 28\n */                                                                                                                    // 29\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"formatError.js\":[\"../jsutils/invariant\",function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/graphql/error/formatError.js                                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n'use strict';                                                                                                          // 1\n                                                                                                                       // 2\nObject.defineProperty(exports, \"__esModule\", {                                                                         // 3\n  value: true                                                                                                          // 4\n});                                                                                                                    // 5\nexports.formatError = formatError;                                                                                     // 6\n                                                                                                                       // 7\nvar _invariant = require('../jsutils/invariant');                                                                      // 8\n                                                                                                                       // 9\nvar _invariant2 = _interopRequireDefault(_invariant);                                                                  // 10\n                                                                                                                       // 11\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }                        // 12\n                                                                                                                       // 13\n/**                                                                                                                    // 14\n * Given a GraphQLError, format it according to the rules described by the                                             // 15\n * Response Format, Errors section of the GraphQL Specification.                                                       // 16\n */                                                                                                                    // 17\nfunction formatError(error) {                                                                                          // 18\n  (0, _invariant2.default)(error, 'Received null or undefined error.');                                                // 19\n  return {                                                                                                             // 20\n    message: error.message,                                                                                            // 21\n    locations: error.locations                                                                                         // 22\n  };                                                                                                                   // 23\n}                                                                                                                      // 24\n/**                                                                                                                    // 25\n *  Copyright (c) 2015, Facebook, Inc.                                                                                 // 26\n *  All rights reserved.                                                                                               // 27\n *                                                                                                                     // 28\n *  This source code is licensed under the BSD-style license found in the                                              // 29\n *  LICENSE file in the root directory of this source tree. An additional grant                                        // 30\n *  of patent rights can be found in the PATENTS file in the same directory.                                           // 31\n */                                                                                                                    // 32\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"jsutils\":{\"invariant.js\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/graphql/jsutils/invariant.js                                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n\"use strict\";                                                                                                          // 1\n                                                                                                                       // 2\nObject.defineProperty(exports, \"__esModule\", {                                                                         // 3\n  value: true                                                                                                          // 4\n});                                                                                                                    // 5\nexports.default = invariant;                                                                                           // 6\n                                                                                                                       // 7\n/**                                                                                                                    // 8\n *  Copyright (c) 2015, Facebook, Inc.                                                                                 // 9\n *  All rights reserved.                                                                                               // 10\n *                                                                                                                     // 11\n *  This source code is licensed under the BSD-style license found in the                                              // 12\n *  LICENSE file in the root directory of this source tree. An additional grant                                        // 13\n *  of patent rights can be found in the PATENTS file in the same directory.                                           // 14\n */                                                                                                                    // 15\n                                                                                                                       // 16\nfunction invariant(condition, message) {                                                                               // 17\n  if (!condition) {                                                                                                    // 18\n    throw new Error(message);                                                                                          // 19\n  }                                                                                                                    // 20\n}                                                                                                                      // 21\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},\"babel-runtime\":{\"helpers\":{\"classCallCheck.js\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/babel-runtime/helpers/classCallCheck.js                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n\"use strict\";                                                                                                          // 1\n                                                                                                                       // 2\nexports.__esModule = true;                                                                                             // 3\n                                                                                                                       // 4\nexports.default = function (instance, Constructor) {                                                                   // 5\n  if (!(instance instanceof Constructor)) {                                                                            // 6\n    throw new TypeError(\"Cannot call a class as a function\");                                                          // 7\n  }                                                                                                                    // 8\n};                                                                                                                     // 9\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"possibleConstructorReturn.js\":[\"babel-runtime/helpers/typeof\",function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/babel-runtime/helpers/possibleConstructorReturn.js                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n\"use strict\";                                                                                                          // 1\n                                                                                                                       // 2\nexports.__esModule = true;                                                                                             // 3\n                                                                                                                       // 4\nvar _typeof2 = require(\"babel-runtime/helpers/typeof\");                                                                // 5\n                                                                                                                       // 6\nvar _typeof3 = _interopRequireDefault(_typeof2);                                                                       // 7\n                                                                                                                       // 8\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }                        // 9\n                                                                                                                       // 10\nexports.default = function (self, call) {                                                                              // 11\n  if (!self) {                                                                                                         // 12\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");                             // 13\n  }                                                                                                                    // 14\n                                                                                                                       // 15\n  return call && ((typeof call === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(call)) === \"object\" || typeof call === \"function\") ? call : self;\n};                                                                                                                     // 17\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"typeof.js\":[\"babel-runtime/core-js/symbol/iterator\",\"babel-runtime/core-js/symbol\",function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/babel-runtime/helpers/typeof.js                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n\"use strict\";                                                                                                          // 1\n                                                                                                                       // 2\nexports.__esModule = true;                                                                                             // 3\n                                                                                                                       // 4\nvar _iterator = require(\"babel-runtime/core-js/symbol/iterator\");                                                      // 5\n                                                                                                                       // 6\nvar _iterator2 = _interopRequireDefault(_iterator);                                                                    // 7\n                                                                                                                       // 8\nvar _symbol = require(\"babel-runtime/core-js/symbol\");                                                                 // 9\n                                                                                                                       // 10\nvar _symbol2 = _interopRequireDefault(_symbol);                                                                        // 11\n                                                                                                                       // 12\nvar _typeof = typeof _symbol2.default === \"function\" && typeof _iterator2.default === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof _symbol2.default === \"function\" && obj.constructor === _symbol2.default ? \"symbol\" : typeof obj; };\n                                                                                                                       // 14\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }                        // 15\n                                                                                                                       // 16\nexports.default = typeof _symbol2.default === \"function\" && _typeof(_iterator2.default) === \"symbol\" ? function (obj) {\n  return typeof obj === \"undefined\" ? \"undefined\" : _typeof(obj);                                                      // 18\n} : function (obj) {                                                                                                   // 19\n  return obj && typeof _symbol2.default === \"function\" && obj.constructor === _symbol2.default ? \"symbol\" : typeof obj === \"undefined\" ? \"undefined\" : _typeof(obj);\n};                                                                                                                     // 21\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"inherits.js\":[\"babel-runtime/core-js/object/set-prototype-of\",\"babel-runtime/core-js/object/create\",\"babel-runtime/helpers/typeof\",function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/babel-runtime/helpers/inherits.js                                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n\"use strict\";                                                                                                          // 1\n                                                                                                                       // 2\nexports.__esModule = true;                                                                                             // 3\n                                                                                                                       // 4\nvar _setPrototypeOf = require(\"babel-runtime/core-js/object/set-prototype-of\");                                        // 5\n                                                                                                                       // 6\nvar _setPrototypeOf2 = _interopRequireDefault(_setPrototypeOf);                                                        // 7\n                                                                                                                       // 8\nvar _create = require(\"babel-runtime/core-js/object/create\");                                                          // 9\n                                                                                                                       // 10\nvar _create2 = _interopRequireDefault(_create);                                                                        // 11\n                                                                                                                       // 12\nvar _typeof2 = require(\"babel-runtime/helpers/typeof\");                                                                // 13\n                                                                                                                       // 14\nvar _typeof3 = _interopRequireDefault(_typeof2);                                                                       // 15\n                                                                                                                       // 16\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }                        // 17\n                                                                                                                       // 18\nexports.default = function (subClass, superClass) {                                                                    // 19\n  if (typeof superClass !== \"function\" && superClass !== null) {                                                       // 20\n    throw new TypeError(\"Super expression must either be null or a function, not \" + (typeof superClass === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(superClass)));\n  }                                                                                                                    // 22\n                                                                                                                       // 23\n  subClass.prototype = (0, _create2.default)(superClass && superClass.prototype, {                                     // 24\n    constructor: {                                                                                                     // 25\n      value: subClass,                                                                                                 // 26\n      enumerable: false,                                                                                               // 27\n      writable: true,                                                                                                  // 28\n      configurable: true                                                                                               // 29\n    }                                                                                                                  // 30\n  });                                                                                                                  // 31\n  if (superClass) _setPrototypeOf2.default ? (0, _setPrototypeOf2.default)(subClass, superClass) : subClass.__proto__ = superClass;\n};                                                                                                                     // 33\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"slicedToArray.js\":[\"babel-runtime/core-js/is-iterable\",\"babel-runtime/core-js/get-iterator\",function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/babel-runtime/helpers/slicedToArray.js                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n\"use strict\";                                                                                                          // 1\n                                                                                                                       // 2\nexports.__esModule = true;                                                                                             // 3\n                                                                                                                       // 4\nvar _isIterable2 = require(\"babel-runtime/core-js/is-iterable\");                                                       // 5\n                                                                                                                       // 6\nvar _isIterable3 = _interopRequireDefault(_isIterable2);                                                               // 7\n                                                                                                                       // 8\nvar _getIterator2 = require(\"babel-runtime/core-js/get-iterator\");                                                     // 9\n                                                                                                                       // 10\nvar _getIterator3 = _interopRequireDefault(_getIterator2);                                                             // 11\n                                                                                                                       // 12\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }                        // 13\n                                                                                                                       // 14\nexports.default = function () {                                                                                        // 15\n  function sliceIterator(arr, i) {                                                                                     // 16\n    var _arr = [];                                                                                                     // 17\n    var _n = true;                                                                                                     // 18\n    var _d = false;                                                                                                    // 19\n    var _e = undefined;                                                                                                // 20\n                                                                                                                       // 21\n    try {                                                                                                              // 22\n      for (var _i = (0, _getIterator3.default)(arr), _s; !(_n = (_s = _i.next()).done); _n = true) {                   // 23\n        _arr.push(_s.value);                                                                                           // 24\n                                                                                                                       // 25\n        if (i && _arr.length === i) break;                                                                             // 26\n      }                                                                                                                // 27\n    } catch (err) {                                                                                                    // 28\n      _d = true;                                                                                                       // 29\n      _e = err;                                                                                                        // 30\n    } finally {                                                                                                        // 31\n      try {                                                                                                            // 32\n        if (!_n && _i[\"return\"]) _i[\"return\"]();                                                                       // 33\n      } finally {                                                                                                      // 34\n        if (_d) throw _e;                                                                                              // 35\n      }                                                                                                                // 36\n    }                                                                                                                  // 37\n                                                                                                                       // 38\n    return _arr;                                                                                                       // 39\n  }                                                                                                                    // 40\n                                                                                                                       // 41\n  return function (arr, i) {                                                                                           // 42\n    if (Array.isArray(arr)) {                                                                                          // 43\n      return arr;                                                                                                      // 44\n    } else if ((0, _isIterable3.default)(Object(arr))) {                                                               // 45\n      return sliceIterator(arr, i);                                                                                    // 46\n    } else {                                                                                                           // 47\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");                                     // 48\n    }                                                                                                                  // 49\n  };                                                                                                                   // 50\n}();                                                                                                                   // 51\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"core-js\":{\"object\":{\"get-prototype-of.js\":[\"core-js/library/fn/object/get-prototype-of\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/babel-runtime/core-js/object/get-prototype-of.js                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exports = { \"default\": require(\"core-js/library/fn/object/get-prototype-of\"), __esModule: true };               // 1\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"set-prototype-of.js\":[\"core-js/library/fn/object/set-prototype-of\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/babel-runtime/core-js/object/set-prototype-of.js                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exports = { \"default\": require(\"core-js/library/fn/object/set-prototype-of\"), __esModule: true };               // 1\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"create.js\":[\"core-js/library/fn/object/create\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/babel-runtime/core-js/object/create.js                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exports = { \"default\": require(\"core-js/library/fn/object/create\"), __esModule: true };                         // 1\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"symbol\":{\"iterator.js\":[\"core-js/library/fn/symbol/iterator\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/babel-runtime/core-js/symbol/iterator.js                                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exports = { \"default\": require(\"core-js/library/fn/symbol/iterator\"), __esModule: true };                       // 1\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"symbol.js\":[\"core-js/library/fn/symbol\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/babel-runtime/core-js/symbol.js                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exports = { \"default\": require(\"core-js/library/fn/symbol\"), __esModule: true };                                // 1\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"json\":{\"stringify.js\":[\"core-js/library/fn/json/stringify\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/babel-runtime/core-js/json/stringify.js                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exports = { \"default\": require(\"core-js/library/fn/json/stringify\"), __esModule: true };                        // 1\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"is-iterable.js\":[\"core-js/library/fn/is-iterable\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/babel-runtime/core-js/is-iterable.js                                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exports = { \"default\": require(\"core-js/library/fn/is-iterable\"), __esModule: true };                           // 1\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"get-iterator.js\":[\"core-js/library/fn/get-iterator\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/babel-runtime/core-js/get-iterator.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exports = { \"default\": require(\"core-js/library/fn/get-iterator\"), __esModule: true };                          // 1\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]}},\"core-js\":{\"library\":{\"fn\":{\"object\":{\"get-prototype-of.js\":[\"../../modules/es6.object.get-prototype-of\",\"../../modules/_core\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/fn/object/get-prototype-of.js                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nrequire('../../modules/es6.object.get-prototype-of');                                                                  // 1\nmodule.exports = require('../../modules/_core').Object.getPrototypeOf;                                                 // 2\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"set-prototype-of.js\":[\"../../modules/es6.object.set-prototype-of\",\"../../modules/_core\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/fn/object/set-prototype-of.js                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nrequire('../../modules/es6.object.set-prototype-of');                                                                  // 1\nmodule.exports = require('../../modules/_core').Object.setPrototypeOf;                                                 // 2\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"create.js\":[\"../../modules/es6.object.create\",\"../../modules/_core\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/fn/object/create.js                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nrequire('../../modules/es6.object.create');                                                                            // 1\nvar $Object = require('../../modules/_core').Object;                                                                   // 2\nmodule.exports = function create(P, D){                                                                                // 3\n  return $Object.create(P, D);                                                                                         // 4\n};                                                                                                                     // 5\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"symbol\":{\"iterator.js\":[\"../../modules/es6.string.iterator\",\"../../modules/web.dom.iterable\",\"../../modules/_wks-ext\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/fn/symbol/iterator.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nrequire('../../modules/es6.string.iterator');                                                                          // 1\nrequire('../../modules/web.dom.iterable');                                                                             // 2\nmodule.exports = require('../../modules/_wks-ext').f('iterator');                                                      // 3\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"index.js\":[\"../../modules/es6.symbol\",\"../../modules/es6.object.to-string\",\"../../modules/es7.symbol.async-iterator\",\"../../modules/es7.symbol.observable\",\"../../modules/_core\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/fn/symbol/index.js                                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nrequire('../../modules/es6.symbol');                                                                                   // 1\nrequire('../../modules/es6.object.to-string');                                                                         // 2\nrequire('../../modules/es7.symbol.async-iterator');                                                                    // 3\nrequire('../../modules/es7.symbol.observable');                                                                        // 4\nmodule.exports = require('../../modules/_core').Symbol;                                                                // 5\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"json\":{\"stringify.js\":[\"../../modules/_core\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/fn/json/stringify.js                                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar core  = require('../../modules/_core')                                                                             // 1\n  , $JSON = core.JSON || (core.JSON = {stringify: JSON.stringify});                                                    // 2\nmodule.exports = function stringify(it){ // eslint-disable-line no-unused-vars                                         // 3\n  return $JSON.stringify.apply($JSON, arguments);                                                                      // 4\n};                                                                                                                     // 5\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"is-iterable.js\":[\"../modules/web.dom.iterable\",\"../modules/es6.string.iterator\",\"../modules/core.is-iterable\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/fn/is-iterable.js                                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nrequire('../modules/web.dom.iterable');                                                                                // 1\nrequire('../modules/es6.string.iterator');                                                                             // 2\nmodule.exports = require('../modules/core.is-iterable');                                                               // 3\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"get-iterator.js\":[\"../modules/web.dom.iterable\",\"../modules/es6.string.iterator\",\"../modules/core.get-iterator\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/fn/get-iterator.js                                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nrequire('../modules/web.dom.iterable');                                                                                // 1\nrequire('../modules/es6.string.iterator');                                                                             // 2\nmodule.exports = require('../modules/core.get-iterator');                                                              // 3\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"modules\":{\"es6.object.get-prototype-of.js\":[\"./_to-object\",\"./_object-gpo\",\"./_object-sap\",function(require){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/es6.object.get-prototype-of.js                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// 19.1.2.9 Object.getPrototypeOf(O)                                                                                   // 1\nvar toObject        = require('./_to-object')                                                                          // 2\n  , $getPrototypeOf = require('./_object-gpo');                                                                        // 3\n                                                                                                                       // 4\nrequire('./_object-sap')('getPrototypeOf', function(){                                                                 // 5\n  return function getPrototypeOf(it){                                                                                  // 6\n    return $getPrototypeOf(toObject(it));                                                                              // 7\n  };                                                                                                                   // 8\n});                                                                                                                    // 9\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_to-object.js\":[\"./_defined\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_to-object.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// 7.1.13 ToObject(argument)                                                                                           // 1\nvar defined = require('./_defined');                                                                                   // 2\nmodule.exports = function(it){                                                                                         // 3\n  return Object(defined(it));                                                                                          // 4\n};                                                                                                                     // 5\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_defined.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_defined.js                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// 7.2.1 RequireObjectCoercible(argument)                                                                              // 1\nmodule.exports = function(it){                                                                                         // 2\n  if(it == undefined)throw TypeError(\"Can't call method on  \" + it);                                                   // 3\n  return it;                                                                                                           // 4\n};                                                                                                                     // 5\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_object-gpo.js\":[\"./_has\",\"./_to-object\",\"./_shared-key\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_object-gpo.js                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)\r                                                                       // 1\nvar has         = require('./_has')\r                                                                                   // 2\n  , toObject    = require('./_to-object')\r                                                                             // 3\n  , IE_PROTO    = require('./_shared-key')('IE_PROTO')\r                                                                // 4\n  , ObjectProto = Object.prototype;\r                                                                                   // 5\n\r                                                                                                                      // 6\nmodule.exports = Object.getPrototypeOf || function(O){\r                                                                // 7\n  O = toObject(O);\r                                                                                                    // 8\n  if(has(O, IE_PROTO))return O[IE_PROTO];\r                                                                             // 9\n  if(typeof O.constructor == 'function' && O instanceof O.constructor){\r                                               // 10\n    return O.constructor.prototype;\r                                                                                   // 11\n  } return O instanceof Object ? ObjectProto : null;\r                                                                  // 12\n};                                                                                                                     // 13\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_has.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_has.js                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar hasOwnProperty = {}.hasOwnProperty;                                                                                // 1\nmodule.exports = function(it, key){                                                                                    // 2\n  return hasOwnProperty.call(it, key);                                                                                 // 3\n};                                                                                                                     // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_shared-key.js\":[\"./_shared\",\"./_uid\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_shared-key.js                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar shared = require('./_shared')('keys')\r                                                                             // 1\n  , uid    = require('./_uid');\r                                                                                       // 2\nmodule.exports = function(key){\r                                                                                       // 3\n  return shared[key] || (shared[key] = uid(key));\r                                                                     // 4\n};                                                                                                                     // 5\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_shared.js\":[\"./_global\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_shared.js                                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar global = require('./_global')                                                                                      // 1\n  , SHARED = '__core-js_shared__'                                                                                      // 2\n  , store  = global[SHARED] || (global[SHARED] = {});                                                                  // 3\nmodule.exports = function(key){                                                                                        // 4\n  return store[key] || (store[key] = {});                                                                              // 5\n};                                                                                                                     // 6\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_global.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_global.js                                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028                                                // 1\nvar global = module.exports = typeof window != 'undefined' && window.Math == Math                                      // 2\n  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();                       // 3\nif(typeof __g == 'number')__g = global; // eslint-disable-line no-undef                                                // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_uid.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_uid.js                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar id = 0                                                                                                             // 1\n  , px = Math.random();                                                                                                // 2\nmodule.exports = function(key){                                                                                        // 3\n  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));                               // 4\n};                                                                                                                     // 5\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_object-sap.js\":[\"./_export\",\"./_core\",\"./_fails\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_object-sap.js                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// most Object methods by ES6 should accept primitives                                                                 // 1\nvar $export = require('./_export')                                                                                     // 2\n  , core    = require('./_core')                                                                                       // 3\n  , fails   = require('./_fails');                                                                                     // 4\nmodule.exports = function(KEY, exec){                                                                                  // 5\n  var fn  = (core.Object || {})[KEY] || Object[KEY]                                                                    // 6\n    , exp = {};                                                                                                        // 7\n  exp[KEY] = exec(fn);                                                                                                 // 8\n  $export($export.S + $export.F * fails(function(){ fn(1); }), 'Object', exp);                                         // 9\n};                                                                                                                     // 10\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_export.js\":[\"./_global\",\"./_core\",\"./_ctx\",\"./_hide\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_export.js                                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar global    = require('./_global')                                                                                   // 1\n  , core      = require('./_core')                                                                                     // 2\n  , ctx       = require('./_ctx')                                                                                      // 3\n  , hide      = require('./_hide')                                                                                     // 4\n  , PROTOTYPE = 'prototype';                                                                                           // 5\n                                                                                                                       // 6\nvar $export = function(type, name, source){                                                                            // 7\n  var IS_FORCED = type & $export.F                                                                                     // 8\n    , IS_GLOBAL = type & $export.G                                                                                     // 9\n    , IS_STATIC = type & $export.S                                                                                     // 10\n    , IS_PROTO  = type & $export.P                                                                                     // 11\n    , IS_BIND   = type & $export.B                                                                                     // 12\n    , IS_WRAP   = type & $export.W                                                                                     // 13\n    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})                                                   // 14\n    , expProto  = exports[PROTOTYPE]                                                                                   // 15\n    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE]                      // 16\n    , key, own, out;                                                                                                   // 17\n  if(IS_GLOBAL)source = name;                                                                                          // 18\n  for(key in source){                                                                                                  // 19\n    // contains in native                                                                                              // 20\n    own = !IS_FORCED && target && target[key] !== undefined;                                                           // 21\n    if(own && key in exports)continue;                                                                                 // 22\n    // export native or passed                                                                                         // 23\n    out = own ? target[key] : source[key];                                                                             // 24\n    // prevent global pollution for namespaces                                                                         // 25\n    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]                                         // 26\n    // bind timers to global for call from export context                                                              // 27\n    : IS_BIND && own ? ctx(out, global)                                                                                // 28\n    // wrap global constructors for prevent change them in library                                                     // 29\n    : IS_WRAP && target[key] == out ? (function(C){                                                                    // 30\n      var F = function(a, b, c){                                                                                       // 31\n        if(this instanceof C){                                                                                         // 32\n          switch(arguments.length){                                                                                    // 33\n            case 0: return new C;                                                                                      // 34\n            case 1: return new C(a);                                                                                   // 35\n            case 2: return new C(a, b);                                                                                // 36\n          } return new C(a, b, c);                                                                                     // 37\n        } return C.apply(this, arguments);                                                                             // 38\n      };                                                                                                               // 39\n      F[PROTOTYPE] = C[PROTOTYPE];                                                                                     // 40\n      return F;                                                                                                        // 41\n    // make static versions for prototype methods                                                                      // 42\n    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;                                    // 43\n    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%                                                       // 44\n    if(IS_PROTO){                                                                                                      // 45\n      (exports.virtual || (exports.virtual = {}))[key] = out;                                                          // 46\n      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%                                                   // 47\n      if(type & $export.R && expProto && !expProto[key])hide(expProto, key, out);                                      // 48\n    }                                                                                                                  // 49\n  }                                                                                                                    // 50\n};                                                                                                                     // 51\n// type bitmap                                                                                                         // 52\n$export.F = 1;   // forced                                                                                             // 53\n$export.G = 2;   // global                                                                                             // 54\n$export.S = 4;   // static                                                                                             // 55\n$export.P = 8;   // proto                                                                                              // 56\n$export.B = 16;  // bind                                                                                               // 57\n$export.W = 32;  // wrap                                                                                               // 58\n$export.U = 64;  // safe                                                                                               // 59\n$export.R = 128; // real proto method for `library`                                                                    // 60\nmodule.exports = $export;                                                                                              // 61\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_core.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_core.js                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar core = module.exports = {version: '2.4.0'};                                                                        // 1\nif(typeof __e == 'number')__e = core; // eslint-disable-line no-undef                                                  // 2\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_ctx.js\":[\"./_a-function\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_ctx.js                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// optional / simple context binding                                                                                   // 1\nvar aFunction = require('./_a-function');                                                                              // 2\nmodule.exports = function(fn, that, length){                                                                           // 3\n  aFunction(fn);                                                                                                       // 4\n  if(that === undefined)return fn;                                                                                     // 5\n  switch(length){                                                                                                      // 6\n    case 1: return function(a){                                                                                        // 7\n      return fn.call(that, a);                                                                                         // 8\n    };                                                                                                                 // 9\n    case 2: return function(a, b){                                                                                     // 10\n      return fn.call(that, a, b);                                                                                      // 11\n    };                                                                                                                 // 12\n    case 3: return function(a, b, c){                                                                                  // 13\n      return fn.call(that, a, b, c);                                                                                   // 14\n    };                                                                                                                 // 15\n  }                                                                                                                    // 16\n  return function(/* ...args */){                                                                                      // 17\n    return fn.apply(that, arguments);                                                                                  // 18\n  };                                                                                                                   // 19\n};                                                                                                                     // 20\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_a-function.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_a-function.js                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exports = function(it){                                                                                         // 1\n  if(typeof it != 'function')throw TypeError(it + ' is not a function!');                                              // 2\n  return it;                                                                                                           // 3\n};                                                                                                                     // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_hide.js\":[\"./_object-dp\",\"./_property-desc\",\"./_descriptors\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_hide.js                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar dP         = require('./_object-dp')                                                                               // 1\n  , createDesc = require('./_property-desc');                                                                          // 2\nmodule.exports = require('./_descriptors') ? function(object, key, value){                                             // 3\n  return dP.f(object, key, createDesc(1, value));                                                                      // 4\n} : function(object, key, value){                                                                                      // 5\n  object[key] = value;                                                                                                 // 6\n  return object;                                                                                                       // 7\n};                                                                                                                     // 8\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_object-dp.js\":[\"./_an-object\",\"./_ie8-dom-define\",\"./_to-primitive\",\"./_descriptors\",function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_object-dp.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar anObject       = require('./_an-object')                                                                           // 1\n  , IE8_DOM_DEFINE = require('./_ie8-dom-define')                                                                      // 2\n  , toPrimitive    = require('./_to-primitive')                                                                        // 3\n  , dP             = Object.defineProperty;                                                                            // 4\n                                                                                                                       // 5\nexports.f = require('./_descriptors') ? Object.defineProperty : function defineProperty(O, P, Attributes){             // 6\n  anObject(O);                                                                                                         // 7\n  P = toPrimitive(P, true);                                                                                            // 8\n  anObject(Attributes);                                                                                                // 9\n  if(IE8_DOM_DEFINE)try {                                                                                              // 10\n    return dP(O, P, Attributes);                                                                                       // 11\n  } catch(e){ /* empty */ }                                                                                            // 12\n  if('get' in Attributes || 'set' in Attributes)throw TypeError('Accessors not supported!');                           // 13\n  if('value' in Attributes)O[P] = Attributes.value;                                                                    // 14\n  return O;                                                                                                            // 15\n};                                                                                                                     // 16\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_an-object.js\":[\"./_is-object\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_an-object.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar isObject = require('./_is-object');                                                                                // 1\nmodule.exports = function(it){                                                                                         // 2\n  if(!isObject(it))throw TypeError(it + ' is not an object!');                                                         // 3\n  return it;                                                                                                           // 4\n};                                                                                                                     // 5\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_is-object.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_is-object.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exports = function(it){                                                                                         // 1\n  return typeof it === 'object' ? it !== null : typeof it === 'function';                                              // 2\n};                                                                                                                     // 3\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_ie8-dom-define.js\":[\"./_descriptors\",\"./_fails\",\"./_dom-create\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_ie8-dom-define.js                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exports = !require('./_descriptors') && !require('./_fails')(function(){\r                                       // 1\n  return Object.defineProperty(require('./_dom-create')('div'), 'a', {get: function(){ return 7; }}).a != 7;\r          // 2\n});                                                                                                                    // 3\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_descriptors.js\":[\"./_fails\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_descriptors.js                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// Thank's IE8 for his funny defineProperty                                                                            // 1\nmodule.exports = !require('./_fails')(function(){                                                                      // 2\n  return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;                                        // 3\n});                                                                                                                    // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_fails.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_fails.js                                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exports = function(exec){                                                                                       // 1\n  try {                                                                                                                // 2\n    return !!exec();                                                                                                   // 3\n  } catch(e){                                                                                                          // 4\n    return true;                                                                                                       // 5\n  }                                                                                                                    // 6\n};                                                                                                                     // 7\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_dom-create.js\":[\"./_is-object\",\"./_global\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_dom-create.js                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar isObject = require('./_is-object')                                                                                 // 1\n  , document = require('./_global').document                                                                           // 2\n  // in old IE typeof document.createElement is 'object'                                                               // 3\n  , is = isObject(document) && isObject(document.createElement);                                                       // 4\nmodule.exports = function(it){                                                                                         // 5\n  return is ? document.createElement(it) : {};                                                                         // 6\n};                                                                                                                     // 7\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_to-primitive.js\":[\"./_is-object\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_to-primitive.js                                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// 7.1.1 ToPrimitive(input [, PreferredType])                                                                          // 1\nvar isObject = require('./_is-object');                                                                                // 2\n// instead of the ES6 spec version, we didn't implement @@toPrimitive case                                             // 3\n// and the second argument - flag - preferred type is a string                                                         // 4\nmodule.exports = function(it, S){                                                                                      // 5\n  if(!isObject(it))return it;                                                                                          // 6\n  var fn, val;                                                                                                         // 7\n  if(S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;                          // 8\n  if(typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it)))return val;                                // 9\n  if(!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;                         // 10\n  throw TypeError(\"Can't convert object to primitive value\");                                                          // 11\n};                                                                                                                     // 12\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_property-desc.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_property-desc.js                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exports = function(bitmap, value){                                                                              // 1\n  return {                                                                                                             // 2\n    enumerable  : !(bitmap & 1),                                                                                       // 3\n    configurable: !(bitmap & 2),                                                                                       // 4\n    writable    : !(bitmap & 4),                                                                                       // 5\n    value       : value                                                                                                // 6\n  };                                                                                                                   // 7\n};                                                                                                                     // 8\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"es6.string.iterator.js\":[\"./_string-at\",\"./_iter-define\",function(require){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/es6.string.iterator.js                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n'use strict';                                                                                                          // 1\nvar $at  = require('./_string-at')(true);                                                                              // 2\n                                                                                                                       // 3\n// 21.1.3.27 String.prototype[@@iterator]()                                                                            // 4\nrequire('./_iter-define')(String, 'String', function(iterated){                                                        // 5\n  this._t = String(iterated); // target                                                                                // 6\n  this._i = 0;                // next index                                                                            // 7\n// 21.1.5.2.1 %StringIteratorPrototype%.next()                                                                         // 8\n}, function(){                                                                                                         // 9\n  var O     = this._t                                                                                                  // 10\n    , index = this._i                                                                                                  // 11\n    , point;                                                                                                           // 12\n  if(index >= O.length)return {value: undefined, done: true};                                                          // 13\n  point = $at(O, index);                                                                                               // 14\n  this._i += point.length;                                                                                             // 15\n  return {value: point, done: false};                                                                                  // 16\n});                                                                                                                    // 17\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_string-at.js\":[\"./_to-integer\",\"./_defined\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_string-at.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar toInteger = require('./_to-integer')                                                                               // 1\n  , defined   = require('./_defined');                                                                                 // 2\n// true  -> String#at                                                                                                  // 3\n// false -> String#codePointAt                                                                                         // 4\nmodule.exports = function(TO_STRING){                                                                                  // 5\n  return function(that, pos){                                                                                          // 6\n    var s = String(defined(that))                                                                                      // 7\n      , i = toInteger(pos)                                                                                             // 8\n      , l = s.length                                                                                                   // 9\n      , a, b;                                                                                                          // 10\n    if(i < 0 || i >= l)return TO_STRING ? '' : undefined;                                                              // 11\n    a = s.charCodeAt(i);                                                                                               // 12\n    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff                 // 13\n      ? TO_STRING ? s.charAt(i) : a                                                                                    // 14\n      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;                                   // 15\n  };                                                                                                                   // 16\n};                                                                                                                     // 17\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_to-integer.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_to-integer.js                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// 7.1.4 ToInteger                                                                                                     // 1\nvar ceil  = Math.ceil                                                                                                  // 2\n  , floor = Math.floor;                                                                                                // 3\nmodule.exports = function(it){                                                                                         // 4\n  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);                                                            // 5\n};                                                                                                                     // 6\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_iter-define.js\":[\"./_library\",\"./_export\",\"./_redefine\",\"./_hide\",\"./_has\",\"./_iterators\",\"./_iter-create\",\"./_set-to-string-tag\",\"./_object-gpo\",\"./_wks\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_iter-define.js                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n'use strict';                                                                                                          // 1\nvar LIBRARY        = require('./_library')                                                                             // 2\n  , $export        = require('./_export')                                                                              // 3\n  , redefine       = require('./_redefine')                                                                            // 4\n  , hide           = require('./_hide')                                                                                // 5\n  , has            = require('./_has')                                                                                 // 6\n  , Iterators      = require('./_iterators')                                                                           // 7\n  , $iterCreate    = require('./_iter-create')                                                                         // 8\n  , setToStringTag = require('./_set-to-string-tag')                                                                   // 9\n  , getPrototypeOf = require('./_object-gpo')                                                                          // 10\n  , ITERATOR       = require('./_wks')('iterator')                                                                     // 11\n  , BUGGY          = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`                        // 12\n  , FF_ITERATOR    = '@@iterator'                                                                                      // 13\n  , KEYS           = 'keys'                                                                                            // 14\n  , VALUES         = 'values';                                                                                         // 15\n                                                                                                                       // 16\nvar returnThis = function(){ return this; };                                                                           // 17\n                                                                                                                       // 18\nmodule.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED){                                     // 19\n  $iterCreate(Constructor, NAME, next);                                                                                // 20\n  var getMethod = function(kind){                                                                                      // 21\n    if(!BUGGY && kind in proto)return proto[kind];                                                                     // 22\n    switch(kind){                                                                                                      // 23\n      case KEYS: return function keys(){ return new Constructor(this, kind); };                                        // 24\n      case VALUES: return function values(){ return new Constructor(this, kind); };                                    // 25\n    } return function entries(){ return new Constructor(this, kind); };                                                // 26\n  };                                                                                                                   // 27\n  var TAG        = NAME + ' Iterator'                                                                                  // 28\n    , DEF_VALUES = DEFAULT == VALUES                                                                                   // 29\n    , VALUES_BUG = false                                                                                               // 30\n    , proto      = Base.prototype                                                                                      // 31\n    , $native    = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT]                                  // 32\n    , $default   = $native || getMethod(DEFAULT)                                                                       // 33\n    , $entries   = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined                                 // 34\n    , $anyNative = NAME == 'Array' ? proto.entries || $native : $native                                                // 35\n    , methods, key, IteratorPrototype;                                                                                 // 36\n  // Fix native                                                                                                        // 37\n  if($anyNative){                                                                                                      // 38\n    IteratorPrototype = getPrototypeOf($anyNative.call(new Base));                                                     // 39\n    if(IteratorPrototype !== Object.prototype){                                                                        // 40\n      // Set @@toStringTag to native iterators                                                                         // 41\n      setToStringTag(IteratorPrototype, TAG, true);                                                                    // 42\n      // fix for some old engines                                                                                      // 43\n      if(!LIBRARY && !has(IteratorPrototype, ITERATOR))hide(IteratorPrototype, ITERATOR, returnThis);                  // 44\n    }                                                                                                                  // 45\n  }                                                                                                                    // 46\n  // fix Array#{values, @@iterator}.name in V8 / FF                                                                    // 47\n  if(DEF_VALUES && $native && $native.name !== VALUES){                                                                // 48\n    VALUES_BUG = true;                                                                                                 // 49\n    $default = function values(){ return $native.call(this); };                                                        // 50\n  }                                                                                                                    // 51\n  // Define iterator                                                                                                   // 52\n  if((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])){                                               // 53\n    hide(proto, ITERATOR, $default);                                                                                   // 54\n  }                                                                                                                    // 55\n  // Plug for library                                                                                                  // 56\n  Iterators[NAME] = $default;                                                                                          // 57\n  Iterators[TAG]  = returnThis;                                                                                        // 58\n  if(DEFAULT){                                                                                                         // 59\n    methods = {                                                                                                        // 60\n      values:  DEF_VALUES ? $default : getMethod(VALUES),                                                              // 61\n      keys:    IS_SET     ? $default : getMethod(KEYS),                                                                // 62\n      entries: $entries                                                                                                // 63\n    };                                                                                                                 // 64\n    if(FORCED)for(key in methods){                                                                                     // 65\n      if(!(key in proto))redefine(proto, key, methods[key]);                                                           // 66\n    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);                                      // 67\n  }                                                                                                                    // 68\n  return methods;                                                                                                      // 69\n};                                                                                                                     // 70\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_library.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_library.js                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exports = true;                                                                                                 // 1\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_redefine.js\":[\"./_hide\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_redefine.js                                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exports = require('./_hide');                                                                                   // 1\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_iterators.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_iterators.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exports = {};                                                                                                   // 1\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_iter-create.js\":[\"./_object-create\",\"./_property-desc\",\"./_set-to-string-tag\",\"./_hide\",\"./_wks\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_iter-create.js                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n'use strict';                                                                                                          // 1\nvar create         = require('./_object-create')                                                                       // 2\n  , descriptor     = require('./_property-desc')                                                                       // 3\n  , setToStringTag = require('./_set-to-string-tag')                                                                   // 4\n  , IteratorPrototype = {};                                                                                            // 5\n                                                                                                                       // 6\n// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()                                                                        // 7\nrequire('./_hide')(IteratorPrototype, require('./_wks')('iterator'), function(){ return this; });                      // 8\n                                                                                                                       // 9\nmodule.exports = function(Constructor, NAME, next){                                                                    // 10\n  Constructor.prototype = create(IteratorPrototype, {next: descriptor(1, next)});                                      // 11\n  setToStringTag(Constructor, NAME + ' Iterator');                                                                     // 12\n};                                                                                                                     // 13\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_object-create.js\":[\"./_an-object\",\"./_object-dps\",\"./_enum-bug-keys\",\"./_shared-key\",\"./_dom-create\",\"./_html\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_object-create.js                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])\r                                                                // 1\nvar anObject    = require('./_an-object')\r                                                                             // 2\n  , dPs         = require('./_object-dps')\r                                                                            // 3\n  , enumBugKeys = require('./_enum-bug-keys')\r                                                                         // 4\n  , IE_PROTO    = require('./_shared-key')('IE_PROTO')\r                                                                // 5\n  , Empty       = function(){ /* empty */ }\r                                                                           // 6\n  , PROTOTYPE   = 'prototype';\r                                                                                        // 7\n\r                                                                                                                      // 8\n// Create object with fake `null` prototype: use iframe Object with cleared prototype\r                                 // 9\nvar createDict = function(){\r                                                                                          // 10\n  // Thrash, waste and sodomy: IE GC bug\r                                                                              // 11\n  var iframe = require('./_dom-create')('iframe')\r                                                                     // 12\n    , i      = enumBugKeys.length\r                                                                                     // 13\n    , gt     = '>'\r                                                                                                    // 14\n    , iframeDocument;\r                                                                                                 // 15\n  iframe.style.display = 'none';\r                                                                                      // 16\n  require('./_html').appendChild(iframe);\r                                                                             // 17\n  iframe.src = 'javascript:'; // eslint-disable-line no-script-url\r                                                    // 18\n  // createDict = iframe.contentWindow.Object;\r                                                                        // 19\n  // html.removeChild(iframe);\r                                                                                        // 20\n  iframeDocument = iframe.contentWindow.document;\r                                                                     // 21\n  iframeDocument.open();\r                                                                                              // 22\n  iframeDocument.write('<script>document.F=Object</script' + gt);\r                                                     // 23\n  iframeDocument.close();\r                                                                                             // 24\n  createDict = iframeDocument.F;\r                                                                                      // 25\n  while(i--)delete createDict[PROTOTYPE][enumBugKeys[i]];\r                                                             // 26\n  return createDict();\r                                                                                                // 27\n};\r                                                                                                                    // 28\n\r                                                                                                                      // 29\nmodule.exports = Object.create || function create(O, Properties){\r                                                     // 30\n  var result;\r                                                                                                         // 31\n  if(O !== null){\r                                                                                                     // 32\n    Empty[PROTOTYPE] = anObject(O);\r                                                                                   // 33\n    result = new Empty;\r                                                                                               // 34\n    Empty[PROTOTYPE] = null;\r                                                                                          // 35\n    // add \"__proto__\" for Object.getPrototypeOf polyfill\r                                                             // 36\n    result[IE_PROTO] = O;\r                                                                                             // 37\n  } else result = createDict();\r                                                                                       // 38\n  return Properties === undefined ? result : dPs(result, Properties);\r                                                 // 39\n};                                                                                                                     // 40\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_object-dps.js\":[\"./_object-dp\",\"./_an-object\",\"./_object-keys\",\"./_descriptors\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_object-dps.js                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar dP       = require('./_object-dp')\r                                                                                // 1\n  , anObject = require('./_an-object')\r                                                                                // 2\n  , getKeys  = require('./_object-keys');\r                                                                             // 3\n\r                                                                                                                      // 4\nmodule.exports = require('./_descriptors') ? Object.defineProperties : function defineProperties(O, Properties){\r      // 5\n  anObject(O);\r                                                                                                        // 6\n  var keys   = getKeys(Properties)\r                                                                                    // 7\n    , length = keys.length\r                                                                                            // 8\n    , i = 0\r                                                                                                           // 9\n    , P;\r                                                                                                              // 10\n  while(length > i)dP.f(O, P = keys[i++], Properties[P]);\r                                                             // 11\n  return O;\r                                                                                                           // 12\n};                                                                                                                     // 13\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_object-keys.js\":[\"./_object-keys-internal\",\"./_enum-bug-keys\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_object-keys.js                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// 19.1.2.14 / 15.2.3.14 Object.keys(O)\r                                                                               // 1\nvar $keys       = require('./_object-keys-internal')\r                                                                  // 2\n  , enumBugKeys = require('./_enum-bug-keys');\r                                                                        // 3\n\r                                                                                                                      // 4\nmodule.exports = Object.keys || function keys(O){\r                                                                     // 5\n  return $keys(O, enumBugKeys);\r                                                                                       // 6\n};                                                                                                                     // 7\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_object-keys-internal.js\":[\"./_has\",\"./_to-iobject\",\"./_array-includes\",\"./_shared-key\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_object-keys-internal.js                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar has          = require('./_has')\r                                                                                  // 1\n  , toIObject    = require('./_to-iobject')\r                                                                           // 2\n  , arrayIndexOf = require('./_array-includes')(false)\r                                                                // 3\n  , IE_PROTO     = require('./_shared-key')('IE_PROTO');\r                                                              // 4\n\r                                                                                                                      // 5\nmodule.exports = function(object, names){\r                                                                             // 6\n  var O      = toIObject(object)\r                                                                                      // 7\n    , i      = 0\r                                                                                                      // 8\n    , result = []\r                                                                                                     // 9\n    , key;\r                                                                                                            // 10\n  for(key in O)if(key != IE_PROTO)has(O, key) && result.push(key);\r                                                    // 11\n  // Don't enum bug & hidden keys\r                                                                                     // 12\n  while(names.length > i)if(has(O, key = names[i++])){\r                                                                // 13\n    ~arrayIndexOf(result, key) || result.push(key);\r                                                                   // 14\n  }\r                                                                                                                   // 15\n  return result;\r                                                                                                      // 16\n};                                                                                                                     // 17\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_to-iobject.js\":[\"./_iobject\",\"./_defined\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_to-iobject.js                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// to indexed object, toObject with fallback for non-array-like ES3 strings                                            // 1\nvar IObject = require('./_iobject')                                                                                    // 2\n  , defined = require('./_defined');                                                                                   // 3\nmodule.exports = function(it){                                                                                         // 4\n  return IObject(defined(it));                                                                                         // 5\n};                                                                                                                     // 6\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_iobject.js\":[\"./_cof\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_iobject.js                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// fallback for non-array-like ES3 and non-enumerable old V8 strings                                                   // 1\nvar cof = require('./_cof');                                                                                           // 2\nmodule.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it){                                          // 3\n  return cof(it) == 'String' ? it.split('') : Object(it);                                                              // 4\n};                                                                                                                     // 5\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_cof.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_cof.js                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar toString = {}.toString;                                                                                            // 1\n                                                                                                                       // 2\nmodule.exports = function(it){                                                                                         // 3\n  return toString.call(it).slice(8, -1);                                                                               // 4\n};                                                                                                                     // 5\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_array-includes.js\":[\"./_to-iobject\",\"./_to-length\",\"./_to-index\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_array-includes.js                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// false -> Array#indexOf                                                                                              // 1\n// true  -> Array#includes                                                                                             // 2\nvar toIObject = require('./_to-iobject')                                                                               // 3\n  , toLength  = require('./_to-length')                                                                                // 4\n  , toIndex   = require('./_to-index');                                                                                // 5\nmodule.exports = function(IS_INCLUDES){                                                                                // 6\n  return function($this, el, fromIndex){                                                                               // 7\n    var O      = toIObject($this)                                                                                      // 8\n      , length = toLength(O.length)                                                                                    // 9\n      , index  = toIndex(fromIndex, length)                                                                            // 10\n      , value;                                                                                                         // 11\n    // Array#includes uses SameValueZero equality algorithm                                                            // 12\n    if(IS_INCLUDES && el != el)while(length > index){                                                                  // 13\n      value = O[index++];                                                                                              // 14\n      if(value != value)return true;                                                                                   // 15\n    // Array#toIndex ignores holes, Array#includes - not                                                               // 16\n    } else for(;length > index; index++)if(IS_INCLUDES || index in O){                                                 // 17\n      if(O[index] === el)return IS_INCLUDES || index || 0;                                                             // 18\n    } return !IS_INCLUDES && -1;                                                                                       // 19\n  };                                                                                                                   // 20\n};                                                                                                                     // 21\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_to-length.js\":[\"./_to-integer\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_to-length.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// 7.1.15 ToLength                                                                                                     // 1\nvar toInteger = require('./_to-integer')                                                                               // 2\n  , min       = Math.min;                                                                                              // 3\nmodule.exports = function(it){                                                                                         // 4\n  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991                      // 5\n};                                                                                                                     // 6\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_to-index.js\":[\"./_to-integer\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_to-index.js                                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar toInteger = require('./_to-integer')                                                                               // 1\n  , max       = Math.max                                                                                               // 2\n  , min       = Math.min;                                                                                              // 3\nmodule.exports = function(index, length){                                                                              // 4\n  index = toInteger(index);                                                                                            // 5\n  return index < 0 ? max(index + length, 0) : min(index, length);                                                      // 6\n};                                                                                                                     // 7\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_enum-bug-keys.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_enum-bug-keys.js                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// IE 8- don't enum bug keys\r                                                                                          // 1\nmodule.exports = (\r                                                                                                    // 2\n  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'\r                     // 3\n).split(',');                                                                                                          // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_html.js\":[\"./_global\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_html.js                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exports = require('./_global').document && document.documentElement;                                            // 1\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_set-to-string-tag.js\":[\"./_object-dp\",\"./_has\",\"./_wks\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_set-to-string-tag.js                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar def = require('./_object-dp').f                                                                                    // 1\n  , has = require('./_has')                                                                                            // 2\n  , TAG = require('./_wks')('toStringTag');                                                                            // 3\n                                                                                                                       // 4\nmodule.exports = function(it, tag, stat){                                                                              // 5\n  if(it && !has(it = stat ? it : it.prototype, TAG))def(it, TAG, {configurable: true, value: tag});                    // 6\n};                                                                                                                     // 7\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_wks.js\":[\"./_shared\",\"./_uid\",\"./_global\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_wks.js                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar store      = require('./_shared')('wks')                                                                           // 1\n  , uid        = require('./_uid')                                                                                     // 2\n  , Symbol     = require('./_global').Symbol                                                                           // 3\n  , USE_SYMBOL = typeof Symbol == 'function';                                                                          // 4\n                                                                                                                       // 5\nvar $exports = module.exports = function(name){                                                                        // 6\n  return store[name] || (store[name] =                                                                                 // 7\n    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));                                      // 8\n};                                                                                                                     // 9\n                                                                                                                       // 10\n$exports.store = store;                                                                                                // 11\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"web.dom.iterable.js\":[\"./es6.array.iterator\",\"./_global\",\"./_hide\",\"./_iterators\",\"./_wks\",function(require){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/web.dom.iterable.js                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nrequire('./es6.array.iterator');                                                                                       // 1\nvar global        = require('./_global')                                                                               // 2\n  , hide          = require('./_hide')                                                                                 // 3\n  , Iterators     = require('./_iterators')                                                                            // 4\n  , TO_STRING_TAG = require('./_wks')('toStringTag');                                                                  // 5\n                                                                                                                       // 6\nfor(var collections = ['NodeList', 'DOMTokenList', 'MediaList', 'StyleSheetList', 'CSSRuleList'], i = 0; i < 5; i++){  // 7\n  var NAME       = collections[i]                                                                                      // 8\n    , Collection = global[NAME]                                                                                        // 9\n    , proto      = Collection && Collection.prototype;                                                                 // 10\n  if(proto && !proto[TO_STRING_TAG])hide(proto, TO_STRING_TAG, NAME);                                                  // 11\n  Iterators[NAME] = Iterators.Array;                                                                                   // 12\n}                                                                                                                      // 13\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"es6.array.iterator.js\":[\"./_add-to-unscopables\",\"./_iter-step\",\"./_iterators\",\"./_to-iobject\",\"./_iter-define\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/es6.array.iterator.js                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n'use strict';                                                                                                          // 1\nvar addToUnscopables = require('./_add-to-unscopables')                                                                // 2\n  , step             = require('./_iter-step')                                                                         // 3\n  , Iterators        = require('./_iterators')                                                                         // 4\n  , toIObject        = require('./_to-iobject');                                                                       // 5\n                                                                                                                       // 6\n// 22.1.3.4 Array.prototype.entries()                                                                                  // 7\n// 22.1.3.13 Array.prototype.keys()                                                                                    // 8\n// 22.1.3.29 Array.prototype.values()                                                                                  // 9\n// 22.1.3.30 Array.prototype[@@iterator]()                                                                             // 10\nmodule.exports = require('./_iter-define')(Array, 'Array', function(iterated, kind){                                   // 11\n  this._t = toIObject(iterated); // target                                                                             // 12\n  this._i = 0;                   // next index                                                                         // 13\n  this._k = kind;                // kind                                                                               // 14\n// 22.1.5.2.1 %ArrayIteratorPrototype%.next()                                                                          // 15\n}, function(){                                                                                                         // 16\n  var O     = this._t                                                                                                  // 17\n    , kind  = this._k                                                                                                  // 18\n    , index = this._i++;                                                                                               // 19\n  if(!O || index >= O.length){                                                                                         // 20\n    this._t = undefined;                                                                                               // 21\n    return step(1);                                                                                                    // 22\n  }                                                                                                                    // 23\n  if(kind == 'keys'  )return step(0, index);                                                                           // 24\n  if(kind == 'values')return step(0, O[index]);                                                                        // 25\n  return step(0, [index, O[index]]);                                                                                   // 26\n}, 'values');                                                                                                          // 27\n                                                                                                                       // 28\n// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)                                                 // 29\nIterators.Arguments = Iterators.Array;                                                                                 // 30\n                                                                                                                       // 31\naddToUnscopables('keys');                                                                                              // 32\naddToUnscopables('values');                                                                                            // 33\naddToUnscopables('entries');                                                                                           // 34\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_add-to-unscopables.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_add-to-unscopables.js                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exports = function(){ /* empty */ };                                                                            // 1\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_iter-step.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_iter-step.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exports = function(done, value){                                                                                // 1\n  return {value: value, done: !!done};                                                                                 // 2\n};                                                                                                                     // 3\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_wks-ext.js\":[\"./_wks\",function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_wks-ext.js                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.f = require('./_wks');                                                                                         // 1\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"es6.symbol.js\":[\"./_global\",\"./_has\",\"./_descriptors\",\"./_export\",\"./_redefine\",\"./_meta\",\"./_fails\",\"./_shared\",\"./_set-to-string-tag\",\"./_uid\",\"./_wks\",\"./_wks-ext\",\"./_wks-define\",\"./_keyof\",\"./_enum-keys\",\"./_is-array\",\"./_an-object\",\"./_to-iobject\",\"./_to-primitive\",\"./_property-desc\",\"./_object-create\",\"./_object-gopn-ext\",\"./_object-gopd\",\"./_object-dp\",\"./_object-keys\",\"./_object-gopn\",\"./_object-pie\",\"./_object-gops\",\"./_library\",\"./_hide\",function(require){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/es6.symbol.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n'use strict';                                                                                                          // 1\n// ECMAScript 6 symbols shim                                                                                           // 2\nvar global         = require('./_global')                                                                              // 3\n  , has            = require('./_has')                                                                                 // 4\n  , DESCRIPTORS    = require('./_descriptors')                                                                         // 5\n  , $export        = require('./_export')                                                                              // 6\n  , redefine       = require('./_redefine')                                                                            // 7\n  , META           = require('./_meta').KEY                                                                            // 8\n  , $fails         = require('./_fails')                                                                               // 9\n  , shared         = require('./_shared')                                                                              // 10\n  , setToStringTag = require('./_set-to-string-tag')                                                                   // 11\n  , uid            = require('./_uid')                                                                                 // 12\n  , wks            = require('./_wks')                                                                                 // 13\n  , wksExt         = require('./_wks-ext')                                                                             // 14\n  , wksDefine      = require('./_wks-define')                                                                          // 15\n  , keyOf          = require('./_keyof')                                                                               // 16\n  , enumKeys       = require('./_enum-keys')                                                                           // 17\n  , isArray        = require('./_is-array')                                                                            // 18\n  , anObject       = require('./_an-object')                                                                           // 19\n  , toIObject      = require('./_to-iobject')                                                                          // 20\n  , toPrimitive    = require('./_to-primitive')                                                                        // 21\n  , createDesc     = require('./_property-desc')                                                                       // 22\n  , _create        = require('./_object-create')                                                                       // 23\n  , gOPNExt        = require('./_object-gopn-ext')                                                                     // 24\n  , $GOPD          = require('./_object-gopd')                                                                         // 25\n  , $DP            = require('./_object-dp')                                                                           // 26\n  , $keys          = require('./_object-keys')                                                                         // 27\n  , gOPD           = $GOPD.f                                                                                           // 28\n  , dP             = $DP.f                                                                                             // 29\n  , gOPN           = gOPNExt.f                                                                                         // 30\n  , $Symbol        = global.Symbol                                                                                     // 31\n  , $JSON          = global.JSON                                                                                       // 32\n  , _stringify     = $JSON && $JSON.stringify                                                                          // 33\n  , PROTOTYPE      = 'prototype'                                                                                       // 34\n  , HIDDEN         = wks('_hidden')                                                                                    // 35\n  , TO_PRIMITIVE   = wks('toPrimitive')                                                                                // 36\n  , isEnum         = {}.propertyIsEnumerable                                                                           // 37\n  , SymbolRegistry = shared('symbol-registry')                                                                         // 38\n  , AllSymbols     = shared('symbols')                                                                                 // 39\n  , OPSymbols      = shared('op-symbols')                                                                              // 40\n  , ObjectProto    = Object[PROTOTYPE]                                                                                 // 41\n  , USE_NATIVE     = typeof $Symbol == 'function'                                                                      // 42\n  , QObject        = global.QObject;                                                                                   // 43\n// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173                                      // 44\nvar setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;                                         // 45\n                                                                                                                       // 46\n// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687                                         // 47\nvar setSymbolDesc = DESCRIPTORS && $fails(function(){                                                                  // 48\n  return _create(dP({}, 'a', {                                                                                         // 49\n    get: function(){ return dP(this, 'a', {value: 7}).a; }                                                             // 50\n  })).a != 7;                                                                                                          // 51\n}) ? function(it, key, D){                                                                                             // 52\n  var protoDesc = gOPD(ObjectProto, key);                                                                              // 53\n  if(protoDesc)delete ObjectProto[key];                                                                                // 54\n  dP(it, key, D);                                                                                                      // 55\n  if(protoDesc && it !== ObjectProto)dP(ObjectProto, key, protoDesc);                                                  // 56\n} : dP;                                                                                                                // 57\n                                                                                                                       // 58\nvar wrap = function(tag){                                                                                              // 59\n  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);                                                             // 60\n  sym._k = tag;                                                                                                        // 61\n  return sym;                                                                                                          // 62\n};                                                                                                                     // 63\n                                                                                                                       // 64\nvar isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function(it){                                       // 65\n  return typeof it == 'symbol';                                                                                        // 66\n} : function(it){                                                                                                      // 67\n  return it instanceof $Symbol;                                                                                        // 68\n};                                                                                                                     // 69\n                                                                                                                       // 70\nvar $defineProperty = function defineProperty(it, key, D){                                                             // 71\n  if(it === ObjectProto)$defineProperty(OPSymbols, key, D);                                                            // 72\n  anObject(it);                                                                                                        // 73\n  key = toPrimitive(key, true);                                                                                        // 74\n  anObject(D);                                                                                                         // 75\n  if(has(AllSymbols, key)){                                                                                            // 76\n    if(!D.enumerable){                                                                                                 // 77\n      if(!has(it, HIDDEN))dP(it, HIDDEN, createDesc(1, {}));                                                           // 78\n      it[HIDDEN][key] = true;                                                                                          // 79\n    } else {                                                                                                           // 80\n      if(has(it, HIDDEN) && it[HIDDEN][key])it[HIDDEN][key] = false;                                                   // 81\n      D = _create(D, {enumerable: createDesc(0, false)});                                                              // 82\n    } return setSymbolDesc(it, key, D);                                                                                // 83\n  } return dP(it, key, D);                                                                                             // 84\n};                                                                                                                     // 85\nvar $defineProperties = function defineProperties(it, P){                                                              // 86\n  anObject(it);                                                                                                        // 87\n  var keys = enumKeys(P = toIObject(P))                                                                                // 88\n    , i    = 0                                                                                                         // 89\n    , l = keys.length                                                                                                  // 90\n    , key;                                                                                                             // 91\n  while(l > i)$defineProperty(it, key = keys[i++], P[key]);                                                            // 92\n  return it;                                                                                                           // 93\n};                                                                                                                     // 94\nvar $create = function create(it, P){                                                                                  // 95\n  return P === undefined ? _create(it) : $defineProperties(_create(it), P);                                            // 96\n};                                                                                                                     // 97\nvar $propertyIsEnumerable = function propertyIsEnumerable(key){                                                        // 98\n  var E = isEnum.call(this, key = toPrimitive(key, true));                                                             // 99\n  if(this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return false;                                // 100\n  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;           // 101\n};                                                                                                                     // 102\nvar $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key){                                            // 103\n  it  = toIObject(it);                                                                                                 // 104\n  key = toPrimitive(key, true);                                                                                        // 105\n  if(it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return;                                        // 106\n  var D = gOPD(it, key);                                                                                               // 107\n  if(D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key]))D.enumerable = true;                           // 108\n  return D;                                                                                                            // 109\n};                                                                                                                     // 110\nvar $getOwnPropertyNames = function getOwnPropertyNames(it){                                                           // 111\n  var names  = gOPN(toIObject(it))                                                                                     // 112\n    , result = []                                                                                                      // 113\n    , i      = 0                                                                                                       // 114\n    , key;                                                                                                             // 115\n  while(names.length > i){                                                                                             // 116\n    if(!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META)result.push(key);                            // 117\n  } return result;                                                                                                     // 118\n};                                                                                                                     // 119\nvar $getOwnPropertySymbols = function getOwnPropertySymbols(it){                                                       // 120\n  var IS_OP  = it === ObjectProto                                                                                      // 121\n    , names  = gOPN(IS_OP ? OPSymbols : toIObject(it))                                                                 // 122\n    , result = []                                                                                                      // 123\n    , i      = 0                                                                                                       // 124\n    , key;                                                                                                             // 125\n  while(names.length > i){                                                                                             // 126\n    if(has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true))result.push(AllSymbols[key]);       // 127\n  } return result;                                                                                                     // 128\n};                                                                                                                     // 129\n                                                                                                                       // 130\n// 19.4.1.1 Symbol([description])                                                                                      // 131\nif(!USE_NATIVE){                                                                                                       // 132\n  $Symbol = function Symbol(){                                                                                         // 133\n    if(this instanceof $Symbol)throw TypeError('Symbol is not a constructor!');                                        // 134\n    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);                                                    // 135\n    var $set = function(value){                                                                                        // 136\n      if(this === ObjectProto)$set.call(OPSymbols, value);                                                             // 137\n      if(has(this, HIDDEN) && has(this[HIDDEN], tag))this[HIDDEN][tag] = false;                                        // 138\n      setSymbolDesc(this, tag, createDesc(1, value));                                                                  // 139\n    };                                                                                                                 // 140\n    if(DESCRIPTORS && setter)setSymbolDesc(ObjectProto, tag, {configurable: true, set: $set});                         // 141\n    return wrap(tag);                                                                                                  // 142\n  };                                                                                                                   // 143\n  redefine($Symbol[PROTOTYPE], 'toString', function toString(){                                                        // 144\n    return this._k;                                                                                                    // 145\n  });                                                                                                                  // 146\n                                                                                                                       // 147\n  $GOPD.f = $getOwnPropertyDescriptor;                                                                                 // 148\n  $DP.f   = $defineProperty;                                                                                           // 149\n  require('./_object-gopn').f = gOPNExt.f = $getOwnPropertyNames;                                                      // 150\n  require('./_object-pie').f  = $propertyIsEnumerable;                                                                 // 151\n  require('./_object-gops').f = $getOwnPropertySymbols;                                                                // 152\n                                                                                                                       // 153\n  if(DESCRIPTORS && !require('./_library')){                                                                           // 154\n    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);                                        // 155\n  }                                                                                                                    // 156\n                                                                                                                       // 157\n  wksExt.f = function(name){                                                                                           // 158\n    return wrap(wks(name));                                                                                            // 159\n  }                                                                                                                    // 160\n}                                                                                                                      // 161\n                                                                                                                       // 162\n$export($export.G + $export.W + $export.F * !USE_NATIVE, {Symbol: $Symbol});                                           // 163\n                                                                                                                       // 164\nfor(var symbols = (                                                                                                    // 165\n  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14\n  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'     // 167\n).split(','), i = 0; symbols.length > i; )wks(symbols[i++]);                                                           // 168\n                                                                                                                       // 169\nfor(var symbols = $keys(wks.store), i = 0; symbols.length > i; )wksDefine(symbols[i++]);                               // 170\n                                                                                                                       // 171\n$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {                                                               // 172\n  // 19.4.2.1 Symbol.for(key)                                                                                          // 173\n  'for': function(key){                                                                                                // 174\n    return has(SymbolRegistry, key += '')                                                                              // 175\n      ? SymbolRegistry[key]                                                                                            // 176\n      : SymbolRegistry[key] = $Symbol(key);                                                                            // 177\n  },                                                                                                                   // 178\n  // 19.4.2.5 Symbol.keyFor(sym)                                                                                       // 179\n  keyFor: function keyFor(key){                                                                                        // 180\n    if(isSymbol(key))return keyOf(SymbolRegistry, key);                                                                // 181\n    throw TypeError(key + ' is not a symbol!');                                                                        // 182\n  },                                                                                                                   // 183\n  useSetter: function(){ setter = true; },                                                                             // 184\n  useSimple: function(){ setter = false; }                                                                             // 185\n});                                                                                                                    // 186\n                                                                                                                       // 187\n$export($export.S + $export.F * !USE_NATIVE, 'Object', {                                                               // 188\n  // 19.1.2.2 Object.create(O [, Properties])                                                                          // 189\n  create: $create,                                                                                                     // 190\n  // 19.1.2.4 Object.defineProperty(O, P, Attributes)                                                                  // 191\n  defineProperty: $defineProperty,                                                                                     // 192\n  // 19.1.2.3 Object.defineProperties(O, Properties)                                                                   // 193\n  defineProperties: $defineProperties,                                                                                 // 194\n  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)                                                                    // 195\n  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,                                                                 // 196\n  // 19.1.2.7 Object.getOwnPropertyNames(O)                                                                            // 197\n  getOwnPropertyNames: $getOwnPropertyNames,                                                                           // 198\n  // 19.1.2.8 Object.getOwnPropertySymbols(O)                                                                          // 199\n  getOwnPropertySymbols: $getOwnPropertySymbols                                                                        // 200\n});                                                                                                                    // 201\n                                                                                                                       // 202\n// 24.3.2 JSON.stringify(value [, replacer [, space]])                                                                 // 203\n$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function(){                                            // 204\n  var S = $Symbol();                                                                                                   // 205\n  // MS Edge converts symbol values to JSON as {}                                                                      // 206\n  // WebKit converts symbol values to JSON as null                                                                     // 207\n  // V8 throws on boxed symbols                                                                                        // 208\n  return _stringify([S]) != '[null]' || _stringify({a: S}) != '{}' || _stringify(Object(S)) != '{}';                   // 209\n})), 'JSON', {                                                                                                         // 210\n  stringify: function stringify(it){                                                                                   // 211\n    if(it === undefined || isSymbol(it))return; // IE8 returns string on undefined                                     // 212\n    var args = [it]                                                                                                    // 213\n      , i    = 1                                                                                                       // 214\n      , replacer, $replacer;                                                                                           // 215\n    while(arguments.length > i)args.push(arguments[i++]);                                                              // 216\n    replacer = args[1];                                                                                                // 217\n    if(typeof replacer == 'function')$replacer = replacer;                                                             // 218\n    if($replacer || !isArray(replacer))replacer = function(key, value){                                                // 219\n      if($replacer)value = $replacer.call(this, key, value);                                                           // 220\n      if(!isSymbol(value))return value;                                                                                // 221\n    };                                                                                                                 // 222\n    args[1] = replacer;                                                                                                // 223\n    return _stringify.apply($JSON, args);                                                                              // 224\n  }                                                                                                                    // 225\n});                                                                                                                    // 226\n                                                                                                                       // 227\n// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)                                                                      // 228\n$Symbol[PROTOTYPE][TO_PRIMITIVE] || require('./_hide')($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);  // 229\n// 19.4.3.5 Symbol.prototype[@@toStringTag]                                                                            // 230\nsetToStringTag($Symbol, 'Symbol');                                                                                     // 231\n// 20.2.1.9 Math[@@toStringTag]                                                                                        // 232\nsetToStringTag(Math, 'Math', true);                                                                                    // 233\n// 24.3.3 JSON[@@toStringTag]                                                                                          // 234\nsetToStringTag(global.JSON, 'JSON', true);                                                                             // 235\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_meta.js\":[\"./_uid\",\"./_is-object\",\"./_has\",\"./_object-dp\",\"./_fails\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_meta.js                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar META     = require('./_uid')('meta')                                                                               // 1\n  , isObject = require('./_is-object')                                                                                 // 2\n  , has      = require('./_has')                                                                                       // 3\n  , setDesc  = require('./_object-dp').f                                                                               // 4\n  , id       = 0;                                                                                                      // 5\nvar isExtensible = Object.isExtensible || function(){                                                                  // 6\n  return true;                                                                                                         // 7\n};                                                                                                                     // 8\nvar FREEZE = !require('./_fails')(function(){                                                                          // 9\n  return isExtensible(Object.preventExtensions({}));                                                                   // 10\n});                                                                                                                    // 11\nvar setMeta = function(it){                                                                                            // 12\n  setDesc(it, META, {value: {                                                                                          // 13\n    i: 'O' + ++id, // object ID                                                                                        // 14\n    w: {}          // weak collections IDs                                                                             // 15\n  }});                                                                                                                 // 16\n};                                                                                                                     // 17\nvar fastKey = function(it, create){                                                                                    // 18\n  // return primitive with prefix                                                                                      // 19\n  if(!isObject(it))return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;                       // 20\n  if(!has(it, META)){                                                                                                  // 21\n    // can't set metadata to uncaught frozen object                                                                    // 22\n    if(!isExtensible(it))return 'F';                                                                                   // 23\n    // not necessary to add metadata                                                                                   // 24\n    if(!create)return 'E';                                                                                             // 25\n    // add missing metadata                                                                                            // 26\n    setMeta(it);                                                                                                       // 27\n  // return object ID                                                                                                  // 28\n  } return it[META].i;                                                                                                 // 29\n};                                                                                                                     // 30\nvar getWeak = function(it, create){                                                                                    // 31\n  if(!has(it, META)){                                                                                                  // 32\n    // can't set metadata to uncaught frozen object                                                                    // 33\n    if(!isExtensible(it))return true;                                                                                  // 34\n    // not necessary to add metadata                                                                                   // 35\n    if(!create)return false;                                                                                           // 36\n    // add missing metadata                                                                                            // 37\n    setMeta(it);                                                                                                       // 38\n  // return hash weak collections IDs                                                                                  // 39\n  } return it[META].w;                                                                                                 // 40\n};                                                                                                                     // 41\n// add metadata on freeze-family methods calling                                                                       // 42\nvar onFreeze = function(it){                                                                                           // 43\n  if(FREEZE && meta.NEED && isExtensible(it) && !has(it, META))setMeta(it);                                            // 44\n  return it;                                                                                                           // 45\n};                                                                                                                     // 46\nvar meta = module.exports = {                                                                                          // 47\n  KEY:      META,                                                                                                      // 48\n  NEED:     false,                                                                                                     // 49\n  fastKey:  fastKey,                                                                                                   // 50\n  getWeak:  getWeak,                                                                                                   // 51\n  onFreeze: onFreeze                                                                                                   // 52\n};                                                                                                                     // 53\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_wks-define.js\":[\"./_global\",\"./_core\",\"./_library\",\"./_wks-ext\",\"./_object-dp\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_wks-define.js                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar global         = require('./_global')\r                                                                             // 1\n  , core           = require('./_core')\r                                                                               // 2\n  , LIBRARY        = require('./_library')\r                                                                            // 3\n  , wksExt         = require('./_wks-ext')\r                                                                            // 4\n  , defineProperty = require('./_object-dp').f;\r                                                                       // 5\nmodule.exports = function(name){\r                                                                                      // 6\n  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});\r                                    // 7\n  if(name.charAt(0) != '_' && !(name in $Symbol))defineProperty($Symbol, name, {value: wksExt.f(name)});\r              // 8\n};                                                                                                                     // 9\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_keyof.js\":[\"./_object-keys\",\"./_to-iobject\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_keyof.js                                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar getKeys   = require('./_object-keys')                                                                              // 1\n  , toIObject = require('./_to-iobject');                                                                              // 2\nmodule.exports = function(object, el){                                                                                 // 3\n  var O      = toIObject(object)                                                                                       // 4\n    , keys   = getKeys(O)                                                                                              // 5\n    , length = keys.length                                                                                             // 6\n    , index  = 0                                                                                                       // 7\n    , key;                                                                                                             // 8\n  while(length > index)if(O[key = keys[index++]] === el)return key;                                                    // 9\n};                                                                                                                     // 10\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_enum-keys.js\":[\"./_object-keys\",\"./_object-gops\",\"./_object-pie\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_enum-keys.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// all enumerable object keys, includes symbols                                                                        // 1\nvar getKeys = require('./_object-keys')                                                                                // 2\n  , gOPS    = require('./_object-gops')                                                                                // 3\n  , pIE     = require('./_object-pie');                                                                                // 4\nmodule.exports = function(it){                                                                                         // 5\n  var result     = getKeys(it)                                                                                         // 6\n    , getSymbols = gOPS.f;                                                                                             // 7\n  if(getSymbols){                                                                                                      // 8\n    var symbols = getSymbols(it)                                                                                       // 9\n      , isEnum  = pIE.f                                                                                                // 10\n      , i       = 0                                                                                                    // 11\n      , key;                                                                                                           // 12\n    while(symbols.length > i)if(isEnum.call(it, key = symbols[i++]))result.push(key);                                  // 13\n  } return result;                                                                                                     // 14\n};                                                                                                                     // 15\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_object-gops.js\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_object-gops.js                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.f = Object.getOwnPropertySymbols;                                                                              // 1\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_object-pie.js\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_object-pie.js                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.f = {}.propertyIsEnumerable;                                                                                   // 1\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_is-array.js\":[\"./_cof\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_is-array.js                                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// 7.2.2 IsArray(argument)                                                                                             // 1\nvar cof = require('./_cof');                                                                                           // 2\nmodule.exports = Array.isArray || function isArray(arg){                                                               // 3\n  return cof(arg) == 'Array';                                                                                          // 4\n};                                                                                                                     // 5\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_object-gopn-ext.js\":[\"./_to-iobject\",\"./_object-gopn\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_object-gopn-ext.js                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window                                           // 1\nvar toIObject = require('./_to-iobject')                                                                               // 2\n  , gOPN      = require('./_object-gopn').f                                                                            // 3\n  , toString  = {}.toString;                                                                                           // 4\n                                                                                                                       // 5\nvar windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames                                    // 6\n  ? Object.getOwnPropertyNames(window) : [];                                                                           // 7\n                                                                                                                       // 8\nvar getWindowNames = function(it){                                                                                     // 9\n  try {                                                                                                                // 10\n    return gOPN(it);                                                                                                   // 11\n  } catch(e){                                                                                                          // 12\n    return windowNames.slice();                                                                                        // 13\n  }                                                                                                                    // 14\n};                                                                                                                     // 15\n                                                                                                                       // 16\nmodule.exports.f = function getOwnPropertyNames(it){                                                                   // 17\n  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));             // 18\n};                                                                                                                     // 19\n                                                                                                                       // 20\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_object-gopn.js\":[\"./_object-keys-internal\",\"./_enum-bug-keys\",function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_object-gopn.js                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)\r                                                                  // 1\nvar $keys      = require('./_object-keys-internal')\r                                                                   // 2\n  , hiddenKeys = require('./_enum-bug-keys').concat('length', 'prototype');\r                                           // 3\n\r                                                                                                                      // 4\nexports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O){\r                                            // 5\n  return $keys(O, hiddenKeys);\r                                                                                        // 6\n};                                                                                                                     // 7\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_object-gopd.js\":[\"./_object-pie\",\"./_property-desc\",\"./_to-iobject\",\"./_to-primitive\",\"./_has\",\"./_ie8-dom-define\",\"./_descriptors\",function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_object-gopd.js                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar pIE            = require('./_object-pie')\r                                                                         // 1\n  , createDesc     = require('./_property-desc')\r                                                                      // 2\n  , toIObject      = require('./_to-iobject')\r                                                                         // 3\n  , toPrimitive    = require('./_to-primitive')\r                                                                       // 4\n  , has            = require('./_has')\r                                                                                // 5\n  , IE8_DOM_DEFINE = require('./_ie8-dom-define')\r                                                                     // 6\n  , gOPD           = Object.getOwnPropertyDescriptor;\r                                                                 // 7\n\r                                                                                                                      // 8\nexports.f = require('./_descriptors') ? gOPD : function getOwnPropertyDescriptor(O, P){\r                               // 9\n  O = toIObject(O);\r                                                                                                   // 10\n  P = toPrimitive(P, true);\r                                                                                           // 11\n  if(IE8_DOM_DEFINE)try {\r                                                                                             // 12\n    return gOPD(O, P);\r                                                                                                // 13\n  } catch(e){ /* empty */ }\r                                                                                           // 14\n  if(has(O, P))return createDesc(!pIE.f.call(O, P), O[P]);\r                                                            // 15\n};                                                                                                                     // 16\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"es6.object.to-string.js\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/es6.object.to-string.js                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"es7.symbol.async-iterator.js\":[\"./_wks-define\",function(require){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/es7.symbol.async-iterator.js                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nrequire('./_wks-define')('asyncIterator');                                                                             // 1\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"es7.symbol.observable.js\":[\"./_wks-define\",function(require){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/es7.symbol.observable.js                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nrequire('./_wks-define')('observable');                                                                                // 1\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"es6.object.set-prototype-of.js\":[\"./_export\",\"./_set-proto\",function(require){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/es6.object.set-prototype-of.js                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// 19.1.3.19 Object.setPrototypeOf(O, proto)                                                                           // 1\nvar $export = require('./_export');                                                                                    // 2\n$export($export.S, 'Object', {setPrototypeOf: require('./_set-proto').set});                                           // 3\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_set-proto.js\":[\"./_is-object\",\"./_an-object\",\"./_ctx\",\"./_object-gopd\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_set-proto.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// Works with __proto__ only. Old v8 can't work with null proto objects.                                               // 1\n/* eslint-disable no-proto */                                                                                          // 2\nvar isObject = require('./_is-object')                                                                                 // 3\n  , anObject = require('./_an-object');                                                                                // 4\nvar check = function(O, proto){                                                                                        // 5\n  anObject(O);                                                                                                         // 6\n  if(!isObject(proto) && proto !== null)throw TypeError(proto + \": can't set as prototype!\");                          // 7\n};                                                                                                                     // 8\nmodule.exports = {                                                                                                     // 9\n  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line                                            // 10\n    function(test, buggy, set){                                                                                        // 11\n      try {                                                                                                            // 12\n        set = require('./_ctx')(Function.call, require('./_object-gopd').f(Object.prototype, '__proto__').set, 2);     // 13\n        set(test, []);                                                                                                 // 14\n        buggy = !(test instanceof Array);                                                                              // 15\n      } catch(e){ buggy = true; }                                                                                      // 16\n      return function setPrototypeOf(O, proto){                                                                        // 17\n        check(O, proto);                                                                                               // 18\n        if(buggy)O.__proto__ = proto;                                                                                  // 19\n        else set(O, proto);                                                                                            // 20\n        return O;                                                                                                      // 21\n      };                                                                                                               // 22\n    }({}, false) : undefined),                                                                                         // 23\n  check: check                                                                                                         // 24\n};                                                                                                                     // 25\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"es6.object.create.js\":[\"./_export\",\"./_object-create\",function(require){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/es6.object.create.js                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar $export = require('./_export')\r                                                                                    // 1\n// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])\r                                                                // 2\n$export($export.S, 'Object', {create: require('./_object-create')});                                                   // 3\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"core.is-iterable.js\":[\"./_classof\",\"./_wks\",\"./_iterators\",\"./_core\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/core.is-iterable.js                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar classof   = require('./_classof')                                                                                  // 1\n  , ITERATOR  = require('./_wks')('iterator')                                                                          // 2\n  , Iterators = require('./_iterators');                                                                               // 3\nmodule.exports = require('./_core').isIterable = function(it){                                                         // 4\n  var O = Object(it);                                                                                                  // 5\n  return O[ITERATOR] !== undefined                                                                                     // 6\n    || '@@iterator' in O                                                                                               // 7\n    || Iterators.hasOwnProperty(classof(O));                                                                           // 8\n};                                                                                                                     // 9\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_classof.js\":[\"./_cof\",\"./_wks\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_classof.js                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// getting tag from 19.1.3.6 Object.prototype.toString()                                                               // 1\nvar cof = require('./_cof')                                                                                            // 2\n  , TAG = require('./_wks')('toStringTag')                                                                             // 3\n  // ES3 wrong here                                                                                                    // 4\n  , ARG = cof(function(){ return arguments; }()) == 'Arguments';                                                       // 5\n                                                                                                                       // 6\n// fallback for IE11 Script Access Denied error                                                                        // 7\nvar tryGet = function(it, key){                                                                                        // 8\n  try {                                                                                                                // 9\n    return it[key];                                                                                                    // 10\n  } catch(e){ /* empty */ }                                                                                            // 11\n};                                                                                                                     // 12\n                                                                                                                       // 13\nmodule.exports = function(it){                                                                                         // 14\n  var O, T, B;                                                                                                         // 15\n  return it === undefined ? 'Undefined' : it === null ? 'Null'                                                         // 16\n    // @@toStringTag case                                                                                              // 17\n    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T                                                         // 18\n    // builtinTag case                                                                                                 // 19\n    : ARG ? cof(O)                                                                                                     // 20\n    // ES3 arguments fallback                                                                                          // 21\n    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;                                     // 22\n};                                                                                                                     // 23\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"core.get-iterator.js\":[\"./_an-object\",\"./core.get-iterator-method\",\"./_core\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/core.get-iterator.js                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar anObject = require('./_an-object')                                                                                 // 1\n  , get      = require('./core.get-iterator-method');                                                                  // 2\nmodule.exports = require('./_core').getIterator = function(it){                                                        // 3\n  var iterFn = get(it);                                                                                                // 4\n  if(typeof iterFn != 'function')throw TypeError(it + ' is not iterable!');                                            // 5\n  return anObject(iterFn.call(it));                                                                                    // 6\n};                                                                                                                     // 7\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"core.get-iterator-method.js\":[\"./_classof\",\"./_wks\",\"./_iterators\",\"./_core\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/core.get-iterator-method.js                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar classof   = require('./_classof')                                                                                  // 1\n  , ITERATOR  = require('./_wks')('iterator')                                                                          // 2\n  , Iterators = require('./_iterators');                                                                               // 3\nmodule.exports = require('./_core').getIteratorMethod = function(it){                                                  // 4\n  if(it != undefined)return it[ITERATOR]                                                                               // 5\n    || it['@@iterator']                                                                                                // 6\n    || Iterators[classof(it)];                                                                                         // 7\n};                                                                                                                     // 8\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]}}},\"react-tap-event-plugin\":{\"package.json\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-tap-event-plugin/package.json                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"react-tap-event-plugin\";                                                                               // 1\nexports.version = \"1.0.0\";                                                                                             // 2\nexports.main = \"src/injectTapEventPlugin.js\";                                                                          // 3\n                                                                                                                       // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"src\":{\"injectTapEventPlugin.js\":[\"fbjs/lib/invariant\",\"./defaultClickRejectionStrategy\",\"react/lib/EventPluginHub\",\"./TapEventPlugin.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-tap-event-plugin/src/injectTapEventPlugin.js                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar invariant = require('fbjs/lib/invariant');                                                                         // 1\nvar defaultClickRejectionStrategy = require('./defaultClickRejectionStrategy');                                        // 2\n                                                                                                                       // 3\nvar alreadyInjected = false;                                                                                           // 4\n                                                                                                                       // 5\nmodule.exports = function injectTapEventPlugin (strategyOverrides) {                                                   // 6\n  strategyOverrides = strategyOverrides || {}                                                                          // 7\n  var shouldRejectClick = strategyOverrides.shouldRejectClick || defaultClickRejectionStrategy;                        // 8\n                                                                                                                       // 9\n  if (process.env.NODE_ENV !== 'production') {                                                                         // 10\n    invariant(                                                                                                         // 11\n      !alreadyInjected,                                                                                                // 12\n      'injectTapEventPlugin(): Can only be called once per application lifecycle.\\n\\n\\\nIt is recommended to call injectTapEventPlugin() just before you call \\\nReactDOM.render(). If you are using an external library which calls injectTapEventPlugin() \\\nitself, please contact the maintainer as it shouldn\\'t be called in library code and \\\nshould be injected by the application.'                                                                                // 17\n    )                                                                                                                  // 18\n  }                                                                                                                    // 19\n                                                                                                                       // 20\n  alreadyInjected = true;                                                                                              // 21\n                                                                                                                       // 22\n  require('react/lib/EventPluginHub').injection.injectEventPluginsByName({                                             // 23\n    'TapEventPlugin':       require('./TapEventPlugin.js')(shouldRejectClick)                                          // 24\n  });                                                                                                                  // 25\n};                                                                                                                     // 26\n                                                                                                                       // 27\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"defaultClickRejectionStrategy.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-tap-event-plugin/src/defaultClickRejectionStrategy.js                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exports = function(lastTouchEvent, clickTimestamp) {                                                            // 1\n  if (lastTouchEvent && (clickTimestamp - lastTouchEvent) < 750) {                                                     // 2\n    return true;                                                                                                       // 3\n  }                                                                                                                    // 4\n};                                                                                                                     // 5\n                                                                                                                       // 6\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"TapEventPlugin.js\":[\"react/lib/EventConstants\",\"react/lib/EventPluginUtils\",\"react/lib/EventPropagators\",\"react/lib/SyntheticUIEvent\",\"./TouchEventUtils\",\"react/lib/ViewportMetrics\",\"fbjs/lib/keyOf\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-tap-event-plugin/src/TapEventPlugin.js                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2014 Facebook, Inc.                                                                                  // 2\n *                                                                                                                     // 3\n * Licensed under the Apache License, Version 2.0 (the \"License\");                                                     // 4\n * you may not use this file except in compliance with the License.                                                    // 5\n * You may obtain a copy of the License at                                                                             // 6\n *                                                                                                                     // 7\n * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 8\n *                                                                                                                     // 9\n * Unless required by applicable law or agreed to in writing, software                                                 // 10\n * distributed under the License is distributed on an \"AS IS\" BASIS,                                                   // 11\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 12\n * See the License for the specific language governing permissions and                                                 // 13\n * limitations under the License.                                                                                      // 14\n *                                                                                                                     // 15\n * @providesModule TapEventPlugin                                                                                      // 16\n * @typechecks static-only                                                                                             // 17\n */                                                                                                                    // 18\n                                                                                                                       // 19\n\"use strict\";                                                                                                          // 20\n                                                                                                                       // 21\nvar EventConstants = require('react/lib/EventConstants');                                                              // 22\nvar EventPluginUtils = require('react/lib/EventPluginUtils');                                                          // 23\nvar EventPropagators = require('react/lib/EventPropagators');                                                          // 24\nvar SyntheticUIEvent = require('react/lib/SyntheticUIEvent');                                                          // 25\nvar TouchEventUtils = require('./TouchEventUtils');                                                                    // 26\nvar ViewportMetrics = require('react/lib/ViewportMetrics');                                                            // 27\n                                                                                                                       // 28\nvar keyOf = require('fbjs/lib/keyOf');                                                                                 // 29\nvar topLevelTypes = EventConstants.topLevelTypes;                                                                      // 30\n                                                                                                                       // 31\nvar isStartish = EventPluginUtils.isStartish;                                                                          // 32\nvar isEndish = EventPluginUtils.isEndish;                                                                              // 33\n                                                                                                                       // 34\nvar isTouch = function(topLevelType) {                                                                                 // 35\n  var touchTypes = [                                                                                                   // 36\n    topLevelTypes.topTouchCancel,                                                                                      // 37\n    topLevelTypes.topTouchEnd,                                                                                         // 38\n    topLevelTypes.topTouchStart,                                                                                       // 39\n    topLevelTypes.topTouchMove                                                                                         // 40\n  ];                                                                                                                   // 41\n  return touchTypes.indexOf(topLevelType) >= 0;                                                                        // 42\n}                                                                                                                      // 43\n                                                                                                                       // 44\n/**                                                                                                                    // 45\n * Number of pixels that are tolerated in between a `touchStart` and `touchEnd`                                        // 46\n * in order to still be considered a 'tap' event.                                                                      // 47\n */                                                                                                                    // 48\nvar tapMoveThreshold = 10;                                                                                             // 49\nvar ignoreMouseThreshold = 750;                                                                                        // 50\nvar startCoords = {x: null, y: null};                                                                                  // 51\nvar lastTouchEvent = null;                                                                                             // 52\n                                                                                                                       // 53\nvar Axis = {                                                                                                           // 54\n  x: {page: 'pageX', client: 'clientX', envScroll: 'currentPageScrollLeft'},                                           // 55\n  y: {page: 'pageY', client: 'clientY', envScroll: 'currentPageScrollTop'}                                             // 56\n};                                                                                                                     // 57\n                                                                                                                       // 58\nfunction getAxisCoordOfEvent(axis, nativeEvent) {                                                                      // 59\n  var singleTouch = TouchEventUtils.extractSingleTouch(nativeEvent);                                                   // 60\n  if (singleTouch) {                                                                                                   // 61\n    return singleTouch[axis.page];                                                                                     // 62\n  }                                                                                                                    // 63\n  return axis.page in nativeEvent ?                                                                                    // 64\n    nativeEvent[axis.page] :                                                                                           // 65\n    nativeEvent[axis.client] + ViewportMetrics[axis.envScroll];                                                        // 66\n}                                                                                                                      // 67\n                                                                                                                       // 68\nfunction getDistance(coords, nativeEvent) {                                                                            // 69\n  var pageX = getAxisCoordOfEvent(Axis.x, nativeEvent);                                                                // 70\n  var pageY = getAxisCoordOfEvent(Axis.y, nativeEvent);                                                                // 71\n  return Math.pow(                                                                                                     // 72\n    Math.pow(pageX - coords.x, 2) + Math.pow(pageY - coords.y, 2),                                                     // 73\n    0.5                                                                                                                // 74\n  );                                                                                                                   // 75\n}                                                                                                                      // 76\n                                                                                                                       // 77\nvar touchEvents = [                                                                                                    // 78\n  topLevelTypes.topTouchStart,                                                                                         // 79\n  topLevelTypes.topTouchCancel,                                                                                        // 80\n  topLevelTypes.topTouchEnd,                                                                                           // 81\n  topLevelTypes.topTouchMove,                                                                                          // 82\n];                                                                                                                     // 83\n                                                                                                                       // 84\nvar dependencies = [                                                                                                   // 85\n  topLevelTypes.topMouseDown,                                                                                          // 86\n  topLevelTypes.topMouseMove,                                                                                          // 87\n  topLevelTypes.topMouseUp,                                                                                            // 88\n].concat(touchEvents);                                                                                                 // 89\n                                                                                                                       // 90\nvar eventTypes = {                                                                                                     // 91\n  touchTap: {                                                                                                          // 92\n    phasedRegistrationNames: {                                                                                         // 93\n      bubbled: keyOf({onTouchTap: null}),                                                                              // 94\n      captured: keyOf({onTouchTapCapture: null})                                                                       // 95\n    },                                                                                                                 // 96\n    dependencies: dependencies                                                                                         // 97\n  }                                                                                                                    // 98\n};                                                                                                                     // 99\n                                                                                                                       // 100\nvar now = (function() {                                                                                                // 101\n  if (Date.now) {                                                                                                      // 102\n    return Date.now;                                                                                                   // 103\n  } else {                                                                                                             // 104\n    // IE8 support: http://stackoverflow.com/questions/9430357/please-explain-why-and-how-new-date-works-as-workaround-for-date-now-in\n    return function () {                                                                                               // 106\n      return +new Date;                                                                                                // 107\n    }                                                                                                                  // 108\n  }                                                                                                                    // 109\n})();                                                                                                                  // 110\n                                                                                                                       // 111\nfunction createTapEventPlugin(shouldRejectClick) {                                                                     // 112\n  return {                                                                                                             // 113\n                                                                                                                       // 114\n    tapMoveThreshold: tapMoveThreshold,                                                                                // 115\n                                                                                                                       // 116\n    ignoreMouseThreshold: ignoreMouseThreshold,                                                                        // 117\n                                                                                                                       // 118\n    eventTypes: eventTypes,                                                                                            // 119\n                                                                                                                       // 120\n    /**                                                                                                                // 121\n     * @param {string} topLevelType Record from `EventConstants`.                                                      // 122\n     * @param {DOMEventTarget} targetInst The listening component root node.                                           // 123\n     * @param {object} nativeEvent Native browser event.                                                               // 124\n     * @return {*} An accumulation of synthetic events.                                                                // 125\n     * @see {EventPluginHub.extractEvents}                                                                             // 126\n     */                                                                                                                // 127\n    extractEvents: function(                                                                                           // 128\n      topLevelType,                                                                                                    // 129\n      targetInst,                                                                                                      // 130\n      nativeEvent,                                                                                                     // 131\n      nativeEventTarget                                                                                                // 132\n    ) {                                                                                                                // 133\n                                                                                                                       // 134\n      if (isTouch(topLevelType)) {                                                                                     // 135\n        lastTouchEvent = now();                                                                                        // 136\n      } else {                                                                                                         // 137\n        if (shouldRejectClick(lastTouchEvent, now())) {                                                                // 138\n          return null;                                                                                                 // 139\n        }                                                                                                              // 140\n      }                                                                                                                // 141\n                                                                                                                       // 142\n      if (!isStartish(topLevelType) && !isEndish(topLevelType)) {                                                      // 143\n        return null;                                                                                                   // 144\n      }                                                                                                                // 145\n      var event = null;                                                                                                // 146\n      var distance = getDistance(startCoords, nativeEvent);                                                            // 147\n      if (isEndish(topLevelType) && distance < tapMoveThreshold) {                                                     // 148\n        event = SyntheticUIEvent.getPooled(                                                                            // 149\n          eventTypes.touchTap,                                                                                         // 150\n          targetInst,                                                                                                  // 151\n          nativeEvent,                                                                                                 // 152\n          nativeEventTarget                                                                                            // 153\n        );                                                                                                             // 154\n      }                                                                                                                // 155\n      if (isStartish(topLevelType)) {                                                                                  // 156\n        startCoords.x = getAxisCoordOfEvent(Axis.x, nativeEvent);                                                      // 157\n        startCoords.y = getAxisCoordOfEvent(Axis.y, nativeEvent);                                                      // 158\n      } else if (isEndish(topLevelType)) {                                                                             // 159\n        startCoords.x = 0;                                                                                             // 160\n        startCoords.y = 0;                                                                                             // 161\n      }                                                                                                                // 162\n      EventPropagators.accumulateTwoPhaseDispatches(event);                                                            // 163\n      return event;                                                                                                    // 164\n    }                                                                                                                  // 165\n                                                                                                                       // 166\n  };                                                                                                                   // 167\n}                                                                                                                      // 168\n                                                                                                                       // 169\nmodule.exports = createTapEventPlugin;                                                                                 // 170\n                                                                                                                       // 171\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"TouchEventUtils.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-tap-event-plugin/src/TouchEventUtils.js                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2014 Facebook, Inc.                                                                                  // 2\n *                                                                                                                     // 3\n * Licensed under the Apache License, Version 2.0 (the \"License\");                                                     // 4\n * you may not use this file except in compliance with the License.                                                    // 5\n * You may obtain a copy of the License at                                                                             // 6\n *                                                                                                                     // 7\n * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 8\n *                                                                                                                     // 9\n * Unless required by applicable law or agreed to in writing, software                                                 // 10\n * distributed under the License is distributed on an \"AS IS\" BASIS,                                                   // 11\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 12\n * See the License for the specific language governing permissions and                                                 // 13\n * limitations under the License.                                                                                      // 14\n *                                                                                                                     // 15\n * @providesModule TouchEventUtils                                                                                     // 16\n */                                                                                                                    // 17\n                                                                                                                       // 18\nvar TouchEventUtils = {                                                                                                // 19\n  /**                                                                                                                  // 20\n   * Utility function for common case of extracting out the primary touch from a                                       // 21\n   * touch event.                                                                                                      // 22\n   * - `touchEnd` events usually do not have the `touches` property.                                                   // 23\n   *   http://stackoverflow.com/questions/3666929/                                                                     // 24\n   *   mobile-sarai-touchend-event-not-firing-when-last-touch-is-removed                                               // 25\n   *                                                                                                                   // 26\n   * @param {Event} nativeEvent Native event that may or may not be a touch.                                           // 27\n   * @return {TouchesObject?} an object with pageX and pageY or null.                                                  // 28\n   */                                                                                                                  // 29\n  extractSingleTouch: function(nativeEvent) {                                                                          // 30\n    var touches = nativeEvent.touches;                                                                                 // 31\n    var changedTouches = nativeEvent.changedTouches;                                                                   // 32\n    var hasTouches = touches && touches.length > 0;                                                                    // 33\n    var hasChangedTouches = changedTouches && changedTouches.length > 0;                                               // 34\n                                                                                                                       // 35\n    return !hasTouches && hasChangedTouches ? changedTouches[0] :                                                      // 36\n           hasTouches ? touches[0] :                                                                                   // 37\n           nativeEvent;                                                                                                // 38\n  }                                                                                                                    // 39\n};                                                                                                                     // 40\n                                                                                                                       // 41\nmodule.exports = TouchEventUtils;                                                                                      // 42\n                                                                                                                       // 43\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"node_modules\":{\"fbjs\":{\"lib\":{\"invariant.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-tap-event-plugin/node_modules/fbjs/lib/invariant.js                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule invariant                                                                                           // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n\"use strict\";                                                                                                          // 12\n                                                                                                                       // 13\n/**                                                                                                                    // 14\n * Use invariant() to assert state which your program assumes to be true.                                              // 15\n *                                                                                                                     // 16\n * Provide sprintf-style format (only %s is supported) and arguments                                                   // 17\n * to provide information about what broke and what you were                                                           // 18\n * expecting.                                                                                                          // 19\n *                                                                                                                     // 20\n * The invariant message will be stripped in production, but the invariant                                             // 21\n * will remain to ensure logic does not differ in production.                                                          // 22\n */                                                                                                                    // 23\n                                                                                                                       // 24\nvar invariant = function (condition, format, a, b, c, d, e, f) {                                                       // 25\n  if (process.env.NODE_ENV !== 'production') {                                                                         // 26\n    if (format === undefined) {                                                                                        // 27\n      throw new Error('invariant requires an error message argument');                                                 // 28\n    }                                                                                                                  // 29\n  }                                                                                                                    // 30\n                                                                                                                       // 31\n  if (!condition) {                                                                                                    // 32\n    var error;                                                                                                         // 33\n    if (format === undefined) {                                                                                        // 34\n      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');\n    } else {                                                                                                           // 36\n      var args = [a, b, c, d, e, f];                                                                                   // 37\n      var argIndex = 0;                                                                                                // 38\n      error = new Error('Invariant Violation: ' + format.replace(/%s/g, function () {                                  // 39\n        return args[argIndex++];                                                                                       // 40\n      }));                                                                                                             // 41\n    }                                                                                                                  // 42\n                                                                                                                       // 43\n    error.framesToPop = 1; // we don't care about invariant's own frame                                                // 44\n    throw error;                                                                                                       // 45\n  }                                                                                                                    // 46\n};                                                                                                                     // 47\n                                                                                                                       // 48\nmodule.exports = invariant;                                                                                            // 49\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"keyOf.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-tap-event-plugin/node_modules/fbjs/lib/keyOf.js                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule keyOf                                                                                               // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n/**                                                                                                                    // 12\n * Allows extraction of a minified key. Let's the build system minify keys                                             // 13\n * without losing the ability to dynamically use key strings as values                                                 // 14\n * themselves. Pass in an object with a single key/val pair and it will return                                         // 15\n * you the string key of that single record. Suppose you want to grab the                                              // 16\n * value for a key 'className' inside of an object. Key/val minification may                                           // 17\n * have aliased that key to be 'xa12'. keyOf({className: null}) will return                                            // 18\n * 'xa12' in that case. Resolve keys you want to use once at startup time, then                                        // 19\n * reuse those resolutions.                                                                                            // 20\n */                                                                                                                    // 21\n\"use strict\";                                                                                                          // 22\n                                                                                                                       // 23\nvar keyOf = function (oneKeyObj) {                                                                                     // 24\n  var key;                                                                                                             // 25\n  for (key in oneKeyObj) {                                                                                             // 26\n    if (!oneKeyObj.hasOwnProperty(key)) {                                                                              // 27\n      continue;                                                                                                        // 28\n    }                                                                                                                  // 29\n    return key;                                                                                                        // 30\n  }                                                                                                                    // 31\n  return null;                                                                                                         // 32\n};                                                                                                                     // 33\n                                                                                                                       // 34\nmodule.exports = keyOf;                                                                                                // 35\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}},\"react\":{\"lib\":{\"EventPluginHub.js\":[\"./EventPluginRegistry\",\"./EventPluginUtils\",\"./ReactErrorUtils\",\"./accumulateInto\",\"./forEachAccumulated\",\"fbjs/lib/invariant\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/EventPluginHub.js                                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule EventPluginHub                                                                                      // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar EventPluginRegistry = require('./EventPluginRegistry');                                                            // 14\nvar EventPluginUtils = require('./EventPluginUtils');                                                                  // 15\nvar ReactErrorUtils = require('./ReactErrorUtils');                                                                    // 16\n                                                                                                                       // 17\nvar accumulateInto = require('./accumulateInto');                                                                      // 18\nvar forEachAccumulated = require('./forEachAccumulated');                                                              // 19\nvar invariant = require('fbjs/lib/invariant');                                                                         // 20\n                                                                                                                       // 21\n/**                                                                                                                    // 22\n * Internal store for event listeners                                                                                  // 23\n */                                                                                                                    // 24\nvar listenerBank = {};                                                                                                 // 25\n                                                                                                                       // 26\n/**                                                                                                                    // 27\n * Internal queue of events that have accumulated their dispatches and are                                             // 28\n * waiting to have their dispatches executed.                                                                          // 29\n */                                                                                                                    // 30\nvar eventQueue = null;                                                                                                 // 31\n                                                                                                                       // 32\n/**                                                                                                                    // 33\n * Dispatches an event and releases it back into the pool, unless persistent.                                          // 34\n *                                                                                                                     // 35\n * @param {?object} event Synthetic event to be dispatched.                                                            // 36\n * @param {boolean} simulated If the event is simulated (changes exn behavior)                                         // 37\n * @private                                                                                                            // 38\n */                                                                                                                    // 39\nvar executeDispatchesAndRelease = function (event, simulated) {                                                        // 40\n  if (event) {                                                                                                         // 41\n    EventPluginUtils.executeDispatchesInOrder(event, simulated);                                                       // 42\n                                                                                                                       // 43\n    if (!event.isPersistent()) {                                                                                       // 44\n      event.constructor.release(event);                                                                                // 45\n    }                                                                                                                  // 46\n  }                                                                                                                    // 47\n};                                                                                                                     // 48\nvar executeDispatchesAndReleaseSimulated = function (e) {                                                              // 49\n  return executeDispatchesAndRelease(e, true);                                                                         // 50\n};                                                                                                                     // 51\nvar executeDispatchesAndReleaseTopLevel = function (e) {                                                               // 52\n  return executeDispatchesAndRelease(e, false);                                                                        // 53\n};                                                                                                                     // 54\n                                                                                                                       // 55\n/**                                                                                                                    // 56\n * This is a unified interface for event plugins to be installed and configured.                                       // 57\n *                                                                                                                     // 58\n * Event plugins can implement the following properties:                                                               // 59\n *                                                                                                                     // 60\n *   `extractEvents` {function(string, DOMEventTarget, string, object): *}                                             // 61\n *     Required. When a top-level event is fired, this method is expected to                                           // 62\n *     extract synthetic events that will in turn be queued and dispatched.                                            // 63\n *                                                                                                                     // 64\n *   `eventTypes` {object}                                                                                             // 65\n *     Optional, plugins that fire events must publish a mapping of registration                                       // 66\n *     names that are used to register listeners. Values of this mapping must                                          // 67\n *     be objects that contain `registrationName` or `phasedRegistrationNames`.                                        // 68\n *                                                                                                                     // 69\n *   `executeDispatch` {function(object, function, string)}                                                            // 70\n *     Optional, allows plugins to override how an event gets dispatched. By                                           // 71\n *     default, the listener is simply invoked.                                                                        // 72\n *                                                                                                                     // 73\n * Each plugin that is injected into `EventsPluginHub` is immediately operable.                                        // 74\n *                                                                                                                     // 75\n * @public                                                                                                             // 76\n */                                                                                                                    // 77\nvar EventPluginHub = {                                                                                                 // 78\n                                                                                                                       // 79\n  /**                                                                                                                  // 80\n   * Methods for injecting dependencies.                                                                               // 81\n   */                                                                                                                  // 82\n  injection: {                                                                                                         // 83\n                                                                                                                       // 84\n    /**                                                                                                                // 85\n     * @param {array} InjectedEventPluginOrder                                                                         // 86\n     * @public                                                                                                         // 87\n     */                                                                                                                // 88\n    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,                                                // 89\n                                                                                                                       // 90\n    /**                                                                                                                // 91\n     * @param {object} injectedNamesToPlugins Map from names to plugin modules.                                        // 92\n     */                                                                                                                // 93\n    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName                                             // 94\n                                                                                                                       // 95\n  },                                                                                                                   // 96\n                                                                                                                       // 97\n  /**                                                                                                                  // 98\n   * Stores `listener` at `listenerBank[registrationName][id]`. Is idempotent.                                         // 99\n   *                                                                                                                   // 100\n   * @param {object} inst The instance, which is the source of events.                                                 // 101\n   * @param {string} registrationName Name of listener (e.g. `onClick`).                                               // 102\n   * @param {function} listener The callback to store.                                                                 // 103\n   */                                                                                                                  // 104\n  putListener: function (inst, registrationName, listener) {                                                           // 105\n    !(typeof listener === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected %s listener to be a function, instead got type %s', registrationName, typeof listener) : invariant(false) : void 0;\n                                                                                                                       // 107\n    var bankForRegistrationName = listenerBank[registrationName] || (listenerBank[registrationName] = {});             // 108\n    bankForRegistrationName[inst._rootNodeID] = listener;                                                              // 109\n                                                                                                                       // 110\n    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];                                  // 111\n    if (PluginModule && PluginModule.didPutListener) {                                                                 // 112\n      PluginModule.didPutListener(inst, registrationName, listener);                                                   // 113\n    }                                                                                                                  // 114\n  },                                                                                                                   // 115\n                                                                                                                       // 116\n  /**                                                                                                                  // 117\n   * @param {object} inst The instance, which is the source of events.                                                 // 118\n   * @param {string} registrationName Name of listener (e.g. `onClick`).                                               // 119\n   * @return {?function} The stored callback.                                                                          // 120\n   */                                                                                                                  // 121\n  getListener: function (inst, registrationName) {                                                                     // 122\n    var bankForRegistrationName = listenerBank[registrationName];                                                      // 123\n    return bankForRegistrationName && bankForRegistrationName[inst._rootNodeID];                                       // 124\n  },                                                                                                                   // 125\n                                                                                                                       // 126\n  /**                                                                                                                  // 127\n   * Deletes a listener from the registration bank.                                                                    // 128\n   *                                                                                                                   // 129\n   * @param {object} inst The instance, which is the source of events.                                                 // 130\n   * @param {string} registrationName Name of listener (e.g. `onClick`).                                               // 131\n   */                                                                                                                  // 132\n  deleteListener: function (inst, registrationName) {                                                                  // 133\n    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];                                  // 134\n    if (PluginModule && PluginModule.willDeleteListener) {                                                             // 135\n      PluginModule.willDeleteListener(inst, registrationName);                                                         // 136\n    }                                                                                                                  // 137\n                                                                                                                       // 138\n    var bankForRegistrationName = listenerBank[registrationName];                                                      // 139\n    // TODO: This should never be null -- when is it?                                                                  // 140\n    if (bankForRegistrationName) {                                                                                     // 141\n      delete bankForRegistrationName[inst._rootNodeID];                                                                // 142\n    }                                                                                                                  // 143\n  },                                                                                                                   // 144\n                                                                                                                       // 145\n  /**                                                                                                                  // 146\n   * Deletes all listeners for the DOM element with the supplied ID.                                                   // 147\n   *                                                                                                                   // 148\n   * @param {object} inst The instance, which is the source of events.                                                 // 149\n   */                                                                                                                  // 150\n  deleteAllListeners: function (inst) {                                                                                // 151\n    for (var registrationName in listenerBank) {                                                                       // 152\n      if (!listenerBank[registrationName][inst._rootNodeID]) {                                                         // 153\n        continue;                                                                                                      // 154\n      }                                                                                                                // 155\n                                                                                                                       // 156\n      var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];                                // 157\n      if (PluginModule && PluginModule.willDeleteListener) {                                                           // 158\n        PluginModule.willDeleteListener(inst, registrationName);                                                       // 159\n      }                                                                                                                // 160\n                                                                                                                       // 161\n      delete listenerBank[registrationName][inst._rootNodeID];                                                         // 162\n    }                                                                                                                  // 163\n  },                                                                                                                   // 164\n                                                                                                                       // 165\n  /**                                                                                                                  // 166\n   * Allows registered plugins an opportunity to extract events from top-level                                         // 167\n   * native browser events.                                                                                            // 168\n   *                                                                                                                   // 169\n   * @return {*} An accumulation of synthetic events.                                                                  // 170\n   * @internal                                                                                                         // 171\n   */                                                                                                                  // 172\n  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {                                 // 173\n    var events;                                                                                                        // 174\n    var plugins = EventPluginRegistry.plugins;                                                                         // 175\n    for (var i = 0; i < plugins.length; i++) {                                                                         // 176\n      // Not every plugin in the ordering may be loaded at runtime.                                                    // 177\n      var possiblePlugin = plugins[i];                                                                                 // 178\n      if (possiblePlugin) {                                                                                            // 179\n        var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);  // 180\n        if (extractedEvents) {                                                                                         // 181\n          events = accumulateInto(events, extractedEvents);                                                            // 182\n        }                                                                                                              // 183\n      }                                                                                                                // 184\n    }                                                                                                                  // 185\n    return events;                                                                                                     // 186\n  },                                                                                                                   // 187\n                                                                                                                       // 188\n  /**                                                                                                                  // 189\n   * Enqueues a synthetic event that should be dispatched when                                                         // 190\n   * `processEventQueue` is invoked.                                                                                   // 191\n   *                                                                                                                   // 192\n   * @param {*} events An accumulation of synthetic events.                                                            // 193\n   * @internal                                                                                                         // 194\n   */                                                                                                                  // 195\n  enqueueEvents: function (events) {                                                                                   // 196\n    if (events) {                                                                                                      // 197\n      eventQueue = accumulateInto(eventQueue, events);                                                                 // 198\n    }                                                                                                                  // 199\n  },                                                                                                                   // 200\n                                                                                                                       // 201\n  /**                                                                                                                  // 202\n   * Dispatches all synthetic events on the event queue.                                                               // 203\n   *                                                                                                                   // 204\n   * @internal                                                                                                         // 205\n   */                                                                                                                  // 206\n  processEventQueue: function (simulated) {                                                                            // 207\n    // Set `eventQueue` to null before processing it so that we can tell if more                                       // 208\n    // events get enqueued while processing.                                                                           // 209\n    var processingEventQueue = eventQueue;                                                                             // 210\n    eventQueue = null;                                                                                                 // 211\n    if (simulated) {                                                                                                   // 212\n      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseSimulated);                                  // 213\n    } else {                                                                                                           // 214\n      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);                                   // 215\n    }                                                                                                                  // 216\n    !!eventQueue ? process.env.NODE_ENV !== 'production' ? invariant(false, 'processEventQueue(): Additional events were enqueued while processing ' + 'an event queue. Support for this has not yet been implemented.') : invariant(false) : void 0;\n    // This would be a good time to rethrow if any of the event handlers threw.                                        // 218\n    ReactErrorUtils.rethrowCaughtError();                                                                              // 219\n  },                                                                                                                   // 220\n                                                                                                                       // 221\n  /**                                                                                                                  // 222\n   * These are needed for tests only. Do not use!                                                                      // 223\n   */                                                                                                                  // 224\n  __purge: function () {                                                                                               // 225\n    listenerBank = {};                                                                                                 // 226\n  },                                                                                                                   // 227\n                                                                                                                       // 228\n  __getListenerBank: function () {                                                                                     // 229\n    return listenerBank;                                                                                               // 230\n  }                                                                                                                    // 231\n                                                                                                                       // 232\n};                                                                                                                     // 233\n                                                                                                                       // 234\nmodule.exports = EventPluginHub;                                                                                       // 235\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"EventPluginRegistry.js\":[\"fbjs/lib/invariant\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/EventPluginRegistry.js                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule EventPluginRegistry                                                                                 // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar invariant = require('fbjs/lib/invariant');                                                                         // 14\n                                                                                                                       // 15\n/**                                                                                                                    // 16\n * Injectable ordering of event plugins.                                                                               // 17\n */                                                                                                                    // 18\nvar EventPluginOrder = null;                                                                                           // 19\n                                                                                                                       // 20\n/**                                                                                                                    // 21\n * Injectable mapping from names to event plugin modules.                                                              // 22\n */                                                                                                                    // 23\nvar namesToPlugins = {};                                                                                               // 24\n                                                                                                                       // 25\n/**                                                                                                                    // 26\n * Recomputes the plugin list using the injected plugins and plugin ordering.                                          // 27\n *                                                                                                                     // 28\n * @private                                                                                                            // 29\n */                                                                                                                    // 30\nfunction recomputePluginOrdering() {                                                                                   // 31\n  if (!EventPluginOrder) {                                                                                             // 32\n    // Wait until an `EventPluginOrder` is injected.                                                                   // 33\n    return;                                                                                                            // 34\n  }                                                                                                                    // 35\n  for (var pluginName in namesToPlugins) {                                                                             // 36\n    var PluginModule = namesToPlugins[pluginName];                                                                     // 37\n    var pluginIndex = EventPluginOrder.indexOf(pluginName);                                                            // 38\n    !(pluginIndex > -1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in ' + 'the plugin ordering, `%s`.', pluginName) : invariant(false) : void 0;\n    if (EventPluginRegistry.plugins[pluginIndex]) {                                                                    // 40\n      continue;                                                                                                        // 41\n    }                                                                                                                  // 42\n    !PluginModule.extractEvents ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` ' + 'method, but `%s` does not.', pluginName) : invariant(false) : void 0;\n    EventPluginRegistry.plugins[pluginIndex] = PluginModule;                                                           // 44\n    var publishedEvents = PluginModule.eventTypes;                                                                     // 45\n    for (var eventName in publishedEvents) {                                                                           // 46\n      !publishEventForPlugin(publishedEvents[eventName], PluginModule, eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : invariant(false) : void 0;\n    }                                                                                                                  // 48\n  }                                                                                                                    // 49\n}                                                                                                                      // 50\n                                                                                                                       // 51\n/**                                                                                                                    // 52\n * Publishes an event so that it can be dispatched by the supplied plugin.                                             // 53\n *                                                                                                                     // 54\n * @param {object} dispatchConfig Dispatch configuration for the event.                                                // 55\n * @param {object} PluginModule Plugin publishing the event.                                                           // 56\n * @return {boolean} True if the event was successfully published.                                                     // 57\n * @private                                                                                                            // 58\n */                                                                                                                    // 59\nfunction publishEventForPlugin(dispatchConfig, PluginModule, eventName) {                                              // 60\n  !!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same ' + 'event name, `%s`.', eventName) : invariant(false) : void 0;\n  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;                                            // 62\n                                                                                                                       // 63\n  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;                                                // 64\n  if (phasedRegistrationNames) {                                                                                       // 65\n    for (var phaseName in phasedRegistrationNames) {                                                                   // 66\n      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {                                                         // 67\n        var phasedRegistrationName = phasedRegistrationNames[phaseName];                                               // 68\n        publishRegistrationName(phasedRegistrationName, PluginModule, eventName);                                      // 69\n      }                                                                                                                // 70\n    }                                                                                                                  // 71\n    return true;                                                                                                       // 72\n  } else if (dispatchConfig.registrationName) {                                                                        // 73\n    publishRegistrationName(dispatchConfig.registrationName, PluginModule, eventName);                                 // 74\n    return true;                                                                                                       // 75\n  }                                                                                                                    // 76\n  return false;                                                                                                        // 77\n}                                                                                                                      // 78\n                                                                                                                       // 79\n/**                                                                                                                    // 80\n * Publishes a registration name that is used to identify dispatched events and                                        // 81\n * can be used with `EventPluginHub.putListener` to register listeners.                                                // 82\n *                                                                                                                     // 83\n * @param {string} registrationName Registration name to add.                                                          // 84\n * @param {object} PluginModule Plugin publishing the event.                                                           // 85\n * @private                                                                                                            // 86\n */                                                                                                                    // 87\nfunction publishRegistrationName(registrationName, PluginModule, eventName) {                                          // 88\n  !!EventPluginRegistry.registrationNameModules[registrationName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same ' + 'registration name, `%s`.', registrationName) : invariant(false) : void 0;\n  EventPluginRegistry.registrationNameModules[registrationName] = PluginModule;                                        // 90\n  EventPluginRegistry.registrationNameDependencies[registrationName] = PluginModule.eventTypes[eventName].dependencies;\n                                                                                                                       // 92\n  if (process.env.NODE_ENV !== 'production') {                                                                         // 93\n    var lowerCasedName = registrationName.toLowerCase();                                                               // 94\n    EventPluginRegistry.possibleRegistrationNames[lowerCasedName] = registrationName;                                  // 95\n  }                                                                                                                    // 96\n}                                                                                                                      // 97\n                                                                                                                       // 98\n/**                                                                                                                    // 99\n * Registers plugins so that they can extract and dispatch events.                                                     // 100\n *                                                                                                                     // 101\n * @see {EventPluginHub}                                                                                               // 102\n */                                                                                                                    // 103\nvar EventPluginRegistry = {                                                                                            // 104\n                                                                                                                       // 105\n  /**                                                                                                                  // 106\n   * Ordered list of injected plugins.                                                                                 // 107\n   */                                                                                                                  // 108\n  plugins: [],                                                                                                         // 109\n                                                                                                                       // 110\n  /**                                                                                                                  // 111\n   * Mapping from event name to dispatch config                                                                        // 112\n   */                                                                                                                  // 113\n  eventNameDispatchConfigs: {},                                                                                        // 114\n                                                                                                                       // 115\n  /**                                                                                                                  // 116\n   * Mapping from registration name to plugin module                                                                   // 117\n   */                                                                                                                  // 118\n  registrationNameModules: {},                                                                                         // 119\n                                                                                                                       // 120\n  /**                                                                                                                  // 121\n   * Mapping from registration name to event name                                                                      // 122\n   */                                                                                                                  // 123\n  registrationNameDependencies: {},                                                                                    // 124\n                                                                                                                       // 125\n  /**                                                                                                                  // 126\n   * Mapping from lowercase registration names to the properly cased version,                                          // 127\n   * used to warn in the case of missing event handlers. Available                                                     // 128\n   * only in __DEV__.                                                                                                  // 129\n   * @type {Object}                                                                                                    // 130\n   */                                                                                                                  // 131\n  possibleRegistrationNames: process.env.NODE_ENV !== 'production' ? {} : null,                                        // 132\n                                                                                                                       // 133\n  /**                                                                                                                  // 134\n   * Injects an ordering of plugins (by plugin name). This allows the ordering                                         // 135\n   * to be decoupled from injection of the actual plugins so that ordering is                                          // 136\n   * always deterministic regardless of packaging, on-the-fly injection, etc.                                          // 137\n   *                                                                                                                   // 138\n   * @param {array} InjectedEventPluginOrder                                                                           // 139\n   * @internal                                                                                                         // 140\n   * @see {EventPluginHub.injection.injectEventPluginOrder}                                                            // 141\n   */                                                                                                                  // 142\n  injectEventPluginOrder: function (InjectedEventPluginOrder) {                                                        // 143\n    !!EventPluginOrder ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than ' + 'once. You are likely trying to load more than one copy of React.') : invariant(false) : void 0;\n    // Clone the ordering so it cannot be dynamically mutated.                                                         // 145\n    EventPluginOrder = Array.prototype.slice.call(InjectedEventPluginOrder);                                           // 146\n    recomputePluginOrdering();                                                                                         // 147\n  },                                                                                                                   // 148\n                                                                                                                       // 149\n  /**                                                                                                                  // 150\n   * Injects plugins to be used by `EventPluginHub`. The plugin names must be                                          // 151\n   * in the ordering injected by `injectEventPluginOrder`.                                                             // 152\n   *                                                                                                                   // 153\n   * Plugins can be injected as part of page initialization or on-the-fly.                                             // 154\n   *                                                                                                                   // 155\n   * @param {object} injectedNamesToPlugins Map from names to plugin modules.                                          // 156\n   * @internal                                                                                                         // 157\n   * @see {EventPluginHub.injection.injectEventPluginsByName}                                                          // 158\n   */                                                                                                                  // 159\n  injectEventPluginsByName: function (injectedNamesToPlugins) {                                                        // 160\n    var isOrderingDirty = false;                                                                                       // 161\n    for (var pluginName in injectedNamesToPlugins) {                                                                   // 162\n      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {                                                        // 163\n        continue;                                                                                                      // 164\n      }                                                                                                                // 165\n      var PluginModule = injectedNamesToPlugins[pluginName];                                                           // 166\n      if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== PluginModule) {                 // 167\n        !!namesToPlugins[pluginName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject two different event plugins ' + 'using the same name, `%s`.', pluginName) : invariant(false) : void 0;\n        namesToPlugins[pluginName] = PluginModule;                                                                     // 169\n        isOrderingDirty = true;                                                                                        // 170\n      }                                                                                                                // 171\n    }                                                                                                                  // 172\n    if (isOrderingDirty) {                                                                                             // 173\n      recomputePluginOrdering();                                                                                       // 174\n    }                                                                                                                  // 175\n  },                                                                                                                   // 176\n                                                                                                                       // 177\n  /**                                                                                                                  // 178\n   * Looks up the plugin for the supplied event.                                                                       // 179\n   *                                                                                                                   // 180\n   * @param {object} event A synthetic event.                                                                          // 181\n   * @return {?object} The plugin that created the supplied event.                                                     // 182\n   * @internal                                                                                                         // 183\n   */                                                                                                                  // 184\n  getPluginModuleForEvent: function (event) {                                                                          // 185\n    var dispatchConfig = event.dispatchConfig;                                                                         // 186\n    if (dispatchConfig.registrationName) {                                                                             // 187\n      return EventPluginRegistry.registrationNameModules[dispatchConfig.registrationName] || null;                     // 188\n    }                                                                                                                  // 189\n    for (var phase in dispatchConfig.phasedRegistrationNames) {                                                        // 190\n      if (!dispatchConfig.phasedRegistrationNames.hasOwnProperty(phase)) {                                             // 191\n        continue;                                                                                                      // 192\n      }                                                                                                                // 193\n      var PluginModule = EventPluginRegistry.registrationNameModules[dispatchConfig.phasedRegistrationNames[phase]];   // 194\n      if (PluginModule) {                                                                                              // 195\n        return PluginModule;                                                                                           // 196\n      }                                                                                                                // 197\n    }                                                                                                                  // 198\n    return null;                                                                                                       // 199\n  },                                                                                                                   // 200\n                                                                                                                       // 201\n  /**                                                                                                                  // 202\n   * Exposed for unit testing.                                                                                         // 203\n   * @private                                                                                                          // 204\n   */                                                                                                                  // 205\n  _resetEventPlugins: function () {                                                                                    // 206\n    EventPluginOrder = null;                                                                                           // 207\n    for (var pluginName in namesToPlugins) {                                                                           // 208\n      if (namesToPlugins.hasOwnProperty(pluginName)) {                                                                 // 209\n        delete namesToPlugins[pluginName];                                                                             // 210\n      }                                                                                                                // 211\n    }                                                                                                                  // 212\n    EventPluginRegistry.plugins.length = 0;                                                                            // 213\n                                                                                                                       // 214\n    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;                                       // 215\n    for (var eventName in eventNameDispatchConfigs) {                                                                  // 216\n      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {                                                        // 217\n        delete eventNameDispatchConfigs[eventName];                                                                    // 218\n      }                                                                                                                // 219\n    }                                                                                                                  // 220\n                                                                                                                       // 221\n    var registrationNameModules = EventPluginRegistry.registrationNameModules;                                         // 222\n    for (var registrationName in registrationNameModules) {                                                            // 223\n      if (registrationNameModules.hasOwnProperty(registrationName)) {                                                  // 224\n        delete registrationNameModules[registrationName];                                                              // 225\n      }                                                                                                                // 226\n    }                                                                                                                  // 227\n                                                                                                                       // 228\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 229\n      var possibleRegistrationNames = EventPluginRegistry.possibleRegistrationNames;                                   // 230\n      for (var lowerCasedName in possibleRegistrationNames) {                                                          // 231\n        if (possibleRegistrationNames.hasOwnProperty(lowerCasedName)) {                                                // 232\n          delete possibleRegistrationNames[lowerCasedName];                                                            // 233\n        }                                                                                                              // 234\n      }                                                                                                                // 235\n    }                                                                                                                  // 236\n  }                                                                                                                    // 237\n                                                                                                                       // 238\n};                                                                                                                     // 239\n                                                                                                                       // 240\nmodule.exports = EventPluginRegistry;                                                                                  // 241\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"EventPluginUtils.js\":[\"./EventConstants\",\"./ReactErrorUtils\",\"fbjs/lib/invariant\",\"fbjs/lib/warning\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/EventPluginUtils.js                                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule EventPluginUtils                                                                                    // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar EventConstants = require('./EventConstants');                                                                      // 14\nvar ReactErrorUtils = require('./ReactErrorUtils');                                                                    // 15\n                                                                                                                       // 16\nvar invariant = require('fbjs/lib/invariant');                                                                         // 17\nvar warning = require('fbjs/lib/warning');                                                                             // 18\n                                                                                                                       // 19\n/**                                                                                                                    // 20\n * Injected dependencies:                                                                                              // 21\n */                                                                                                                    // 22\n                                                                                                                       // 23\n/**                                                                                                                    // 24\n * - `ComponentTree`: [required] Module that can convert between React instances                                       // 25\n *   and actual node references.                                                                                       // 26\n */                                                                                                                    // 27\nvar ComponentTree;                                                                                                     // 28\nvar TreeTraversal;                                                                                                     // 29\nvar injection = {                                                                                                      // 30\n  injectComponentTree: function (Injected) {                                                                           // 31\n    ComponentTree = Injected;                                                                                          // 32\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 33\n      process.env.NODE_ENV !== 'production' ? warning(Injected && Injected.getNodeFromInstance && Injected.getInstanceFromNode, 'EventPluginUtils.injection.injectComponentTree(...): Injected ' + 'module is missing getNodeFromInstance or getInstanceFromNode.') : void 0;\n    }                                                                                                                  // 35\n  },                                                                                                                   // 36\n  injectTreeTraversal: function (Injected) {                                                                           // 37\n    TreeTraversal = Injected;                                                                                          // 38\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 39\n      process.env.NODE_ENV !== 'production' ? warning(Injected && Injected.isAncestor && Injected.getLowestCommonAncestor, 'EventPluginUtils.injection.injectTreeTraversal(...): Injected ' + 'module is missing isAncestor or getLowestCommonAncestor.') : void 0;\n    }                                                                                                                  // 41\n  }                                                                                                                    // 42\n};                                                                                                                     // 43\n                                                                                                                       // 44\nvar topLevelTypes = EventConstants.topLevelTypes;                                                                      // 45\n                                                                                                                       // 46\nfunction isEndish(topLevelType) {                                                                                      // 47\n  return topLevelType === topLevelTypes.topMouseUp || topLevelType === topLevelTypes.topTouchEnd || topLevelType === topLevelTypes.topTouchCancel;\n}                                                                                                                      // 49\n                                                                                                                       // 50\nfunction isMoveish(topLevelType) {                                                                                     // 51\n  return topLevelType === topLevelTypes.topMouseMove || topLevelType === topLevelTypes.topTouchMove;                   // 52\n}                                                                                                                      // 53\nfunction isStartish(topLevelType) {                                                                                    // 54\n  return topLevelType === topLevelTypes.topMouseDown || topLevelType === topLevelTypes.topTouchStart;                  // 55\n}                                                                                                                      // 56\n                                                                                                                       // 57\nvar validateEventDispatches;                                                                                           // 58\nif (process.env.NODE_ENV !== 'production') {                                                                           // 59\n  validateEventDispatches = function (event) {                                                                         // 60\n    var dispatchListeners = event._dispatchListeners;                                                                  // 61\n    var dispatchInstances = event._dispatchInstances;                                                                  // 62\n                                                                                                                       // 63\n    var listenersIsArr = Array.isArray(dispatchListeners);                                                             // 64\n    var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;                          // 65\n                                                                                                                       // 66\n    var instancesIsArr = Array.isArray(dispatchInstances);                                                             // 67\n    var instancesLen = instancesIsArr ? dispatchInstances.length : dispatchInstances ? 1 : 0;                          // 68\n                                                                                                                       // 69\n    process.env.NODE_ENV !== 'production' ? warning(instancesIsArr === listenersIsArr && instancesLen === listenersLen, 'EventPluginUtils: Invalid `event`.') : void 0;\n  };                                                                                                                   // 71\n}                                                                                                                      // 72\n                                                                                                                       // 73\n/**                                                                                                                    // 74\n * Dispatch the event to the listener.                                                                                 // 75\n * @param {SyntheticEvent} event SyntheticEvent to handle                                                              // 76\n * @param {boolean} simulated If the event is simulated (changes exn behavior)                                         // 77\n * @param {function} listener Application-level callback                                                               // 78\n * @param {*} inst Internal component instance                                                                         // 79\n */                                                                                                                    // 80\nfunction executeDispatch(event, simulated, listener, inst) {                                                           // 81\n  var type = event.type || 'unknown-event';                                                                            // 82\n  event.currentTarget = EventPluginUtils.getNodeFromInstance(inst);                                                    // 83\n  if (simulated) {                                                                                                     // 84\n    ReactErrorUtils.invokeGuardedCallbackWithCatch(type, listener, event);                                             // 85\n  } else {                                                                                                             // 86\n    ReactErrorUtils.invokeGuardedCallback(type, listener, event);                                                      // 87\n  }                                                                                                                    // 88\n  event.currentTarget = null;                                                                                          // 89\n}                                                                                                                      // 90\n                                                                                                                       // 91\n/**                                                                                                                    // 92\n * Standard/simple iteration through an event's collected dispatches.                                                  // 93\n */                                                                                                                    // 94\nfunction executeDispatchesInOrder(event, simulated) {                                                                  // 95\n  var dispatchListeners = event._dispatchListeners;                                                                    // 96\n  var dispatchInstances = event._dispatchInstances;                                                                    // 97\n  if (process.env.NODE_ENV !== 'production') {                                                                         // 98\n    validateEventDispatches(event);                                                                                    // 99\n  }                                                                                                                    // 100\n  if (Array.isArray(dispatchListeners)) {                                                                              // 101\n    for (var i = 0; i < dispatchListeners.length; i++) {                                                               // 102\n      if (event.isPropagationStopped()) {                                                                              // 103\n        break;                                                                                                         // 104\n      }                                                                                                                // 105\n      // Listeners and Instances are two parallel arrays that are always in sync.                                      // 106\n      executeDispatch(event, simulated, dispatchListeners[i], dispatchInstances[i]);                                   // 107\n    }                                                                                                                  // 108\n  } else if (dispatchListeners) {                                                                                      // 109\n    executeDispatch(event, simulated, dispatchListeners, dispatchInstances);                                           // 110\n  }                                                                                                                    // 111\n  event._dispatchListeners = null;                                                                                     // 112\n  event._dispatchInstances = null;                                                                                     // 113\n}                                                                                                                      // 114\n                                                                                                                       // 115\n/**                                                                                                                    // 116\n * Standard/simple iteration through an event's collected dispatches, but stops                                        // 117\n * at the first dispatch execution returning true, and returns that id.                                                // 118\n *                                                                                                                     // 119\n * @return {?string} id of the first dispatch execution who's listener returns                                         // 120\n * true, or null if no listener returned true.                                                                         // 121\n */                                                                                                                    // 122\nfunction executeDispatchesInOrderStopAtTrueImpl(event) {                                                               // 123\n  var dispatchListeners = event._dispatchListeners;                                                                    // 124\n  var dispatchInstances = event._dispatchInstances;                                                                    // 125\n  if (process.env.NODE_ENV !== 'production') {                                                                         // 126\n    validateEventDispatches(event);                                                                                    // 127\n  }                                                                                                                    // 128\n  if (Array.isArray(dispatchListeners)) {                                                                              // 129\n    for (var i = 0; i < dispatchListeners.length; i++) {                                                               // 130\n      if (event.isPropagationStopped()) {                                                                              // 131\n        break;                                                                                                         // 132\n      }                                                                                                                // 133\n      // Listeners and Instances are two parallel arrays that are always in sync.                                      // 134\n      if (dispatchListeners[i](event, dispatchInstances[i])) {                                                         // 135\n        return dispatchInstances[i];                                                                                   // 136\n      }                                                                                                                // 137\n    }                                                                                                                  // 138\n  } else if (dispatchListeners) {                                                                                      // 139\n    if (dispatchListeners(event, dispatchInstances)) {                                                                 // 140\n      return dispatchInstances;                                                                                        // 141\n    }                                                                                                                  // 142\n  }                                                                                                                    // 143\n  return null;                                                                                                         // 144\n}                                                                                                                      // 145\n                                                                                                                       // 146\n/**                                                                                                                    // 147\n * @see executeDispatchesInOrderStopAtTrueImpl                                                                         // 148\n */                                                                                                                    // 149\nfunction executeDispatchesInOrderStopAtTrue(event) {                                                                   // 150\n  var ret = executeDispatchesInOrderStopAtTrueImpl(event);                                                             // 151\n  event._dispatchInstances = null;                                                                                     // 152\n  event._dispatchListeners = null;                                                                                     // 153\n  return ret;                                                                                                          // 154\n}                                                                                                                      // 155\n                                                                                                                       // 156\n/**                                                                                                                    // 157\n * Execution of a \"direct\" dispatch - there must be at most one dispatch                                               // 158\n * accumulated on the event or it is considered an error. It doesn't really make                                       // 159\n * sense for an event with multiple dispatches (bubbled) to keep track of the                                          // 160\n * return values at each dispatch execution, but it does tend to make sense when                                       // 161\n * dealing with \"direct\" dispatches.                                                                                   // 162\n *                                                                                                                     // 163\n * @return {*} The return value of executing the single dispatch.                                                      // 164\n */                                                                                                                    // 165\nfunction executeDirectDispatch(event) {                                                                                // 166\n  if (process.env.NODE_ENV !== 'production') {                                                                         // 167\n    validateEventDispatches(event);                                                                                    // 168\n  }                                                                                                                    // 169\n  var dispatchListener = event._dispatchListeners;                                                                     // 170\n  var dispatchInstance = event._dispatchInstances;                                                                     // 171\n  !!Array.isArray(dispatchListener) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'executeDirectDispatch(...): Invalid `event`.') : invariant(false) : void 0;\n  event.currentTarget = dispatchListener ? EventPluginUtils.getNodeFromInstance(dispatchInstance) : null;              // 173\n  var res = dispatchListener ? dispatchListener(event) : null;                                                         // 174\n  event.currentTarget = null;                                                                                          // 175\n  event._dispatchListeners = null;                                                                                     // 176\n  event._dispatchInstances = null;                                                                                     // 177\n  return res;                                                                                                          // 178\n}                                                                                                                      // 179\n                                                                                                                       // 180\n/**                                                                                                                    // 181\n * @param {SyntheticEvent} event                                                                                       // 182\n * @return {boolean} True iff number of dispatches accumulated is greater than 0.                                      // 183\n */                                                                                                                    // 184\nfunction hasDispatches(event) {                                                                                        // 185\n  return !!event._dispatchListeners;                                                                                   // 186\n}                                                                                                                      // 187\n                                                                                                                       // 188\n/**                                                                                                                    // 189\n * General utilities that are useful in creating custom Event Plugins.                                                 // 190\n */                                                                                                                    // 191\nvar EventPluginUtils = {                                                                                               // 192\n  isEndish: isEndish,                                                                                                  // 193\n  isMoveish: isMoveish,                                                                                                // 194\n  isStartish: isStartish,                                                                                              // 195\n                                                                                                                       // 196\n  executeDirectDispatch: executeDirectDispatch,                                                                        // 197\n  executeDispatchesInOrder: executeDispatchesInOrder,                                                                  // 198\n  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,                                              // 199\n  hasDispatches: hasDispatches,                                                                                        // 200\n                                                                                                                       // 201\n  getInstanceFromNode: function (node) {                                                                               // 202\n    return ComponentTree.getInstanceFromNode(node);                                                                    // 203\n  },                                                                                                                   // 204\n  getNodeFromInstance: function (node) {                                                                               // 205\n    return ComponentTree.getNodeFromInstance(node);                                                                    // 206\n  },                                                                                                                   // 207\n  isAncestor: function (a, b) {                                                                                        // 208\n    return TreeTraversal.isAncestor(a, b);                                                                             // 209\n  },                                                                                                                   // 210\n  getLowestCommonAncestor: function (a, b) {                                                                           // 211\n    return TreeTraversal.getLowestCommonAncestor(a, b);                                                                // 212\n  },                                                                                                                   // 213\n  getParentInstance: function (inst) {                                                                                 // 214\n    return TreeTraversal.getParentInstance(inst);                                                                      // 215\n  },                                                                                                                   // 216\n  traverseTwoPhase: function (target, fn, arg) {                                                                       // 217\n    return TreeTraversal.traverseTwoPhase(target, fn, arg);                                                            // 218\n  },                                                                                                                   // 219\n  traverseEnterLeave: function (from, to, fn, argFrom, argTo) {                                                        // 220\n    return TreeTraversal.traverseEnterLeave(from, to, fn, argFrom, argTo);                                             // 221\n  },                                                                                                                   // 222\n                                                                                                                       // 223\n  injection: injection                                                                                                 // 224\n};                                                                                                                     // 225\n                                                                                                                       // 226\nmodule.exports = EventPluginUtils;                                                                                     // 227\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"EventConstants.js\":[\"fbjs/lib/keyMirror\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/EventConstants.js                                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule EventConstants                                                                                      // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar keyMirror = require('fbjs/lib/keyMirror');                                                                         // 14\n                                                                                                                       // 15\nvar PropagationPhases = keyMirror({ bubbled: null, captured: null });                                                  // 16\n                                                                                                                       // 17\n/**                                                                                                                    // 18\n * Types of raw signals from the browser caught at the top level.                                                      // 19\n */                                                                                                                    // 20\nvar topLevelTypes = keyMirror({                                                                                        // 21\n  topAbort: null,                                                                                                      // 22\n  topAnimationEnd: null,                                                                                               // 23\n  topAnimationIteration: null,                                                                                         // 24\n  topAnimationStart: null,                                                                                             // 25\n  topBlur: null,                                                                                                       // 26\n  topCanPlay: null,                                                                                                    // 27\n  topCanPlayThrough: null,                                                                                             // 28\n  topChange: null,                                                                                                     // 29\n  topClick: null,                                                                                                      // 30\n  topCompositionEnd: null,                                                                                             // 31\n  topCompositionStart: null,                                                                                           // 32\n  topCompositionUpdate: null,                                                                                          // 33\n  topContextMenu: null,                                                                                                // 34\n  topCopy: null,                                                                                                       // 35\n  topCut: null,                                                                                                        // 36\n  topDoubleClick: null,                                                                                                // 37\n  topDrag: null,                                                                                                       // 38\n  topDragEnd: null,                                                                                                    // 39\n  topDragEnter: null,                                                                                                  // 40\n  topDragExit: null,                                                                                                   // 41\n  topDragLeave: null,                                                                                                  // 42\n  topDragOver: null,                                                                                                   // 43\n  topDragStart: null,                                                                                                  // 44\n  topDrop: null,                                                                                                       // 45\n  topDurationChange: null,                                                                                             // 46\n  topEmptied: null,                                                                                                    // 47\n  topEncrypted: null,                                                                                                  // 48\n  topEnded: null,                                                                                                      // 49\n  topError: null,                                                                                                      // 50\n  topFocus: null,                                                                                                      // 51\n  topInput: null,                                                                                                      // 52\n  topInvalid: null,                                                                                                    // 53\n  topKeyDown: null,                                                                                                    // 54\n  topKeyPress: null,                                                                                                   // 55\n  topKeyUp: null,                                                                                                      // 56\n  topLoad: null,                                                                                                       // 57\n  topLoadedData: null,                                                                                                 // 58\n  topLoadedMetadata: null,                                                                                             // 59\n  topLoadStart: null,                                                                                                  // 60\n  topMouseDown: null,                                                                                                  // 61\n  topMouseMove: null,                                                                                                  // 62\n  topMouseOut: null,                                                                                                   // 63\n  topMouseOver: null,                                                                                                  // 64\n  topMouseUp: null,                                                                                                    // 65\n  topPaste: null,                                                                                                      // 66\n  topPause: null,                                                                                                      // 67\n  topPlay: null,                                                                                                       // 68\n  topPlaying: null,                                                                                                    // 69\n  topProgress: null,                                                                                                   // 70\n  topRateChange: null,                                                                                                 // 71\n  topReset: null,                                                                                                      // 72\n  topScroll: null,                                                                                                     // 73\n  topSeeked: null,                                                                                                     // 74\n  topSeeking: null,                                                                                                    // 75\n  topSelectionChange: null,                                                                                            // 76\n  topStalled: null,                                                                                                    // 77\n  topSubmit: null,                                                                                                     // 78\n  topSuspend: null,                                                                                                    // 79\n  topTextInput: null,                                                                                                  // 80\n  topTimeUpdate: null,                                                                                                 // 81\n  topTouchCancel: null,                                                                                                // 82\n  topTouchEnd: null,                                                                                                   // 83\n  topTouchMove: null,                                                                                                  // 84\n  topTouchStart: null,                                                                                                 // 85\n  topTransitionEnd: null,                                                                                              // 86\n  topVolumeChange: null,                                                                                               // 87\n  topWaiting: null,                                                                                                    // 88\n  topWheel: null                                                                                                       // 89\n});                                                                                                                    // 90\n                                                                                                                       // 91\nvar EventConstants = {                                                                                                 // 92\n  topLevelTypes: topLevelTypes,                                                                                        // 93\n  PropagationPhases: PropagationPhases                                                                                 // 94\n};                                                                                                                     // 95\n                                                                                                                       // 96\nmodule.exports = EventConstants;                                                                                       // 97\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactErrorUtils.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactErrorUtils.js                                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactErrorUtils                                                                                     // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar caughtError = null;                                                                                                // 14\n                                                                                                                       // 15\n/**                                                                                                                    // 16\n * Call a function while guarding against errors that happens within it.                                               // 17\n *                                                                                                                     // 18\n * @param {?String} name of the guard to use for logging or debugging                                                  // 19\n * @param {Function} func The function to invoke                                                                       // 20\n * @param {*} a First argument                                                                                         // 21\n * @param {*} b Second argument                                                                                        // 22\n */                                                                                                                    // 23\nfunction invokeGuardedCallback(name, func, a, b) {                                                                     // 24\n  try {                                                                                                                // 25\n    return func(a, b);                                                                                                 // 26\n  } catch (x) {                                                                                                        // 27\n    if (caughtError === null) {                                                                                        // 28\n      caughtError = x;                                                                                                 // 29\n    }                                                                                                                  // 30\n    return undefined;                                                                                                  // 31\n  }                                                                                                                    // 32\n}                                                                                                                      // 33\n                                                                                                                       // 34\nvar ReactErrorUtils = {                                                                                                // 35\n  invokeGuardedCallback: invokeGuardedCallback,                                                                        // 36\n                                                                                                                       // 37\n  /**                                                                                                                  // 38\n   * Invoked by ReactTestUtils.Simulate so that any errors thrown by the event                                         // 39\n   * handler are sure to be rethrown by rethrowCaughtError.                                                            // 40\n   */                                                                                                                  // 41\n  invokeGuardedCallbackWithCatch: invokeGuardedCallback,                                                               // 42\n                                                                                                                       // 43\n  /**                                                                                                                  // 44\n   * During execution of guarded functions we will capture the first error which                                       // 45\n   * we will rethrow to be handled by the top level error handler.                                                     // 46\n   */                                                                                                                  // 47\n  rethrowCaughtError: function () {                                                                                    // 48\n    if (caughtError) {                                                                                                 // 49\n      var error = caughtError;                                                                                         // 50\n      caughtError = null;                                                                                              // 51\n      throw error;                                                                                                     // 52\n    }                                                                                                                  // 53\n  }                                                                                                                    // 54\n};                                                                                                                     // 55\n                                                                                                                       // 56\nif (process.env.NODE_ENV !== 'production') {                                                                           // 57\n  /**                                                                                                                  // 58\n   * To help development we can get better devtools integration by simulating a                                        // 59\n   * real browser event.                                                                                               // 60\n   */                                                                                                                  // 61\n  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {\n    var fakeNode = document.createElement('react');                                                                    // 63\n    ReactErrorUtils.invokeGuardedCallback = function (name, func, a, b) {                                              // 64\n      var boundFunc = func.bind(null, a, b);                                                                           // 65\n      var evtType = 'react-' + name;                                                                                   // 66\n      fakeNode.addEventListener(evtType, boundFunc, false);                                                            // 67\n      var evt = document.createEvent('Event');                                                                         // 68\n      evt.initEvent(evtType, false, false);                                                                            // 69\n      fakeNode.dispatchEvent(evt);                                                                                     // 70\n      fakeNode.removeEventListener(evtType, boundFunc, false);                                                         // 71\n    };                                                                                                                 // 72\n  }                                                                                                                    // 73\n}                                                                                                                      // 74\n                                                                                                                       // 75\nmodule.exports = ReactErrorUtils;                                                                                      // 76\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"accumulateInto.js\":[\"fbjs/lib/invariant\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/accumulateInto.js                                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2014-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule accumulateInto                                                                                      // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar invariant = require('fbjs/lib/invariant');                                                                         // 14\n                                                                                                                       // 15\n/**                                                                                                                    // 16\n *                                                                                                                     // 17\n * Accumulates items that must not be null or undefined into the first one. This                                       // 18\n * is used to conserve memory by avoiding array allocations, and thus sacrifices                                       // 19\n * API cleanness. Since `current` can be null before being passed in and not                                           // 20\n * null after this function, make sure to assign it back to `current`:                                                 // 21\n *                                                                                                                     // 22\n * `a = accumulateInto(a, b);`                                                                                         // 23\n *                                                                                                                     // 24\n * This API should be sparingly used. Try `accumulate` for something cleaner.                                          // 25\n *                                                                                                                     // 26\n * @return {*|array<*>} An accumulation of items.                                                                      // 27\n */                                                                                                                    // 28\n                                                                                                                       // 29\nfunction accumulateInto(current, next) {                                                                               // 30\n  !(next != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'accumulateInto(...): Accumulated items must not be null or undefined.') : invariant(false) : void 0;\n  if (current == null) {                                                                                               // 32\n    return next;                                                                                                       // 33\n  }                                                                                                                    // 34\n                                                                                                                       // 35\n  // Both are not empty. Warning: Never call x.concat(y) when you are not                                              // 36\n  // certain that x is an Array (x could be a string with concat method).                                              // 37\n  var currentIsArray = Array.isArray(current);                                                                         // 38\n  var nextIsArray = Array.isArray(next);                                                                               // 39\n                                                                                                                       // 40\n  if (currentIsArray && nextIsArray) {                                                                                 // 41\n    current.push.apply(current, next);                                                                                 // 42\n    return current;                                                                                                    // 43\n  }                                                                                                                    // 44\n                                                                                                                       // 45\n  if (currentIsArray) {                                                                                                // 46\n    current.push(next);                                                                                                // 47\n    return current;                                                                                                    // 48\n  }                                                                                                                    // 49\n                                                                                                                       // 50\n  if (nextIsArray) {                                                                                                   // 51\n    // A bit too dangerous to mutate `next`.                                                                           // 52\n    return [current].concat(next);                                                                                     // 53\n  }                                                                                                                    // 54\n                                                                                                                       // 55\n  return [current, next];                                                                                              // 56\n}                                                                                                                      // 57\n                                                                                                                       // 58\nmodule.exports = accumulateInto;                                                                                       // 59\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"forEachAccumulated.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/forEachAccumulated.js                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule forEachAccumulated                                                                                  // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\n/**                                                                                                                    // 14\n * @param {array} arr an \"accumulation\" of items which is either an Array or                                           // 15\n * a single item. Useful when paired with the `accumulate` module. This is a                                           // 16\n * simple utility that allows us to reason about a collection of items, but                                            // 17\n * handling the case when there is exactly one item (and we do not need to                                             // 18\n * allocate an array).                                                                                                 // 19\n */                                                                                                                    // 20\n                                                                                                                       // 21\nvar forEachAccumulated = function (arr, cb, scope) {                                                                   // 22\n  if (Array.isArray(arr)) {                                                                                            // 23\n    arr.forEach(cb, scope);                                                                                            // 24\n  } else if (arr) {                                                                                                    // 25\n    cb.call(scope, arr);                                                                                               // 26\n  }                                                                                                                    // 27\n};                                                                                                                     // 28\n                                                                                                                       // 29\nmodule.exports = forEachAccumulated;                                                                                   // 30\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"EventPropagators.js\":[\"./EventConstants\",\"./EventPluginHub\",\"./EventPluginUtils\",\"./accumulateInto\",\"./forEachAccumulated\",\"fbjs/lib/warning\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/EventPropagators.js                                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule EventPropagators                                                                                    // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar EventConstants = require('./EventConstants');                                                                      // 14\nvar EventPluginHub = require('./EventPluginHub');                                                                      // 15\nvar EventPluginUtils = require('./EventPluginUtils');                                                                  // 16\n                                                                                                                       // 17\nvar accumulateInto = require('./accumulateInto');                                                                      // 18\nvar forEachAccumulated = require('./forEachAccumulated');                                                              // 19\nvar warning = require('fbjs/lib/warning');                                                                             // 20\n                                                                                                                       // 21\nvar PropagationPhases = EventConstants.PropagationPhases;                                                              // 22\nvar getListener = EventPluginHub.getListener;                                                                          // 23\n                                                                                                                       // 24\n/**                                                                                                                    // 25\n * Some event types have a notion of different registration names for different                                        // 26\n * \"phases\" of propagation. This finds listeners by a given phase.                                                     // 27\n */                                                                                                                    // 28\nfunction listenerAtPhase(inst, event, propagationPhase) {                                                              // 29\n  var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];                               // 30\n  return getListener(inst, registrationName);                                                                          // 31\n}                                                                                                                      // 32\n                                                                                                                       // 33\n/**                                                                                                                    // 34\n * Tags a `SyntheticEvent` with dispatched listeners. Creating this function                                           // 35\n * here, allows us to not have to bind or create functions for each event.                                             // 36\n * Mutating the event's members allows us to not have to create a wrapping                                             // 37\n * \"dispatch\" object that pairs the event with the listener.                                                           // 38\n */                                                                                                                    // 39\nfunction accumulateDirectionalDispatches(inst, upwards, event) {                                                       // 40\n  if (process.env.NODE_ENV !== 'production') {                                                                         // 41\n    process.env.NODE_ENV !== 'production' ? warning(inst, 'Dispatching inst must not be null') : void 0;               // 42\n  }                                                                                                                    // 43\n  var phase = upwards ? PropagationPhases.bubbled : PropagationPhases.captured;                                        // 44\n  var listener = listenerAtPhase(inst, event, phase);                                                                  // 45\n  if (listener) {                                                                                                      // 46\n    event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);                                     // 47\n    event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);                                         // 48\n  }                                                                                                                    // 49\n}                                                                                                                      // 50\n                                                                                                                       // 51\n/**                                                                                                                    // 52\n * Collect dispatches (must be entirely collected before dispatching - see unit                                        // 53\n * tests). Lazily allocate the array to conserve memory.  We must loop through                                         // 54\n * each event and perform the traversal for each one. We cannot perform a                                              // 55\n * single traversal for the entire collection of events because each event may                                         // 56\n * have a different target.                                                                                            // 57\n */                                                                                                                    // 58\nfunction accumulateTwoPhaseDispatchesSingle(event) {                                                                   // 59\n  if (event && event.dispatchConfig.phasedRegistrationNames) {                                                         // 60\n    EventPluginUtils.traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);                      // 61\n  }                                                                                                                    // 62\n}                                                                                                                      // 63\n                                                                                                                       // 64\n/**                                                                                                                    // 65\n * Same as `accumulateTwoPhaseDispatchesSingle`, but skips over the targetID.                                          // 66\n */                                                                                                                    // 67\nfunction accumulateTwoPhaseDispatchesSingleSkipTarget(event) {                                                         // 68\n  if (event && event.dispatchConfig.phasedRegistrationNames) {                                                         // 69\n    var targetInst = event._targetInst;                                                                                // 70\n    var parentInst = targetInst ? EventPluginUtils.getParentInstance(targetInst) : null;                               // 71\n    EventPluginUtils.traverseTwoPhase(parentInst, accumulateDirectionalDispatches, event);                             // 72\n  }                                                                                                                    // 73\n}                                                                                                                      // 74\n                                                                                                                       // 75\n/**                                                                                                                    // 76\n * Accumulates without regard to direction, does not look for phased                                                   // 77\n * registration names. Same as `accumulateDirectDispatchesSingle` but without                                          // 78\n * requiring that the `dispatchMarker` be the same as the dispatched ID.                                               // 79\n */                                                                                                                    // 80\nfunction accumulateDispatches(inst, ignoredDirection, event) {                                                         // 81\n  if (event && event.dispatchConfig.registrationName) {                                                                // 82\n    var registrationName = event.dispatchConfig.registrationName;                                                      // 83\n    var listener = getListener(inst, registrationName);                                                                // 84\n    if (listener) {                                                                                                    // 85\n      event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);                                   // 86\n      event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);                                       // 87\n    }                                                                                                                  // 88\n  }                                                                                                                    // 89\n}                                                                                                                      // 90\n                                                                                                                       // 91\n/**                                                                                                                    // 92\n * Accumulates dispatches on an `SyntheticEvent`, but only for the                                                     // 93\n * `dispatchMarker`.                                                                                                   // 94\n * @param {SyntheticEvent} event                                                                                       // 95\n */                                                                                                                    // 96\nfunction accumulateDirectDispatchesSingle(event) {                                                                     // 97\n  if (event && event.dispatchConfig.registrationName) {                                                                // 98\n    accumulateDispatches(event._targetInst, null, event);                                                              // 99\n  }                                                                                                                    // 100\n}                                                                                                                      // 101\n                                                                                                                       // 102\nfunction accumulateTwoPhaseDispatches(events) {                                                                        // 103\n  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);                                                      // 104\n}                                                                                                                      // 105\n                                                                                                                       // 106\nfunction accumulateTwoPhaseDispatchesSkipTarget(events) {                                                              // 107\n  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingleSkipTarget);                                            // 108\n}                                                                                                                      // 109\n                                                                                                                       // 110\nfunction accumulateEnterLeaveDispatches(leave, enter, from, to) {                                                      // 111\n  EventPluginUtils.traverseEnterLeave(from, to, accumulateDispatches, leave, enter);                                   // 112\n}                                                                                                                      // 113\n                                                                                                                       // 114\nfunction accumulateDirectDispatches(events) {                                                                          // 115\n  forEachAccumulated(events, accumulateDirectDispatchesSingle);                                                        // 116\n}                                                                                                                      // 117\n                                                                                                                       // 118\n/**                                                                                                                    // 119\n * A small set of propagation patterns, each of which will accept a small amount                                       // 120\n * of information, and generate a set of \"dispatch ready event objects\" - which                                        // 121\n * are sets of events that have already been annotated with a set of dispatched                                        // 122\n * listener functions/ids. The API is designed this way to discourage these                                            // 123\n * propagation strategies from actually executing the dispatches, since we                                             // 124\n * always want to collect the entire set of dispatches before executing event a                                        // 125\n * single one.                                                                                                         // 126\n *                                                                                                                     // 127\n * @constructor EventPropagators                                                                                       // 128\n */                                                                                                                    // 129\nvar EventPropagators = {                                                                                               // 130\n  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,                                                          // 131\n  accumulateTwoPhaseDispatchesSkipTarget: accumulateTwoPhaseDispatchesSkipTarget,                                      // 132\n  accumulateDirectDispatches: accumulateDirectDispatches,                                                              // 133\n  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches                                                       // 134\n};                                                                                                                     // 135\n                                                                                                                       // 136\nmodule.exports = EventPropagators;                                                                                     // 137\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"SyntheticUIEvent.js\":[\"./SyntheticEvent\",\"./getEventTarget\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/SyntheticUIEvent.js                                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule SyntheticUIEvent                                                                                    // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar SyntheticEvent = require('./SyntheticEvent');                                                                      // 14\n                                                                                                                       // 15\nvar getEventTarget = require('./getEventTarget');                                                                      // 16\n                                                                                                                       // 17\n/**                                                                                                                    // 18\n * @interface UIEvent                                                                                                  // 19\n * @see http://www.w3.org/TR/DOM-Level-3-Events/                                                                       // 20\n */                                                                                                                    // 21\nvar UIEventInterface = {                                                                                               // 22\n  view: function (event) {                                                                                             // 23\n    if (event.view) {                                                                                                  // 24\n      return event.view;                                                                                               // 25\n    }                                                                                                                  // 26\n                                                                                                                       // 27\n    var target = getEventTarget(event);                                                                                // 28\n    if (target != null && target.window === target) {                                                                  // 29\n      // target is a window object                                                                                     // 30\n      return target;                                                                                                   // 31\n    }                                                                                                                  // 32\n                                                                                                                       // 33\n    var doc = target.ownerDocument;                                                                                    // 34\n    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.                                             // 35\n    if (doc) {                                                                                                         // 36\n      return doc.defaultView || doc.parentWindow;                                                                      // 37\n    } else {                                                                                                           // 38\n      return window;                                                                                                   // 39\n    }                                                                                                                  // 40\n  },                                                                                                                   // 41\n  detail: function (event) {                                                                                           // 42\n    return event.detail || 0;                                                                                          // 43\n  }                                                                                                                    // 44\n};                                                                                                                     // 45\n                                                                                                                       // 46\n/**                                                                                                                    // 47\n * @param {object} dispatchConfig Configuration used to dispatch this event.                                           // 48\n * @param {string} dispatchMarker Marker identifying the event target.                                                 // 49\n * @param {object} nativeEvent Native browser event.                                                                   // 50\n * @extends {SyntheticEvent}                                                                                           // 51\n */                                                                                                                    // 52\nfunction SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {                            // 53\n  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);                    // 54\n}                                                                                                                      // 55\n                                                                                                                       // 56\nSyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);                                                       // 57\n                                                                                                                       // 58\nmodule.exports = SyntheticUIEvent;                                                                                     // 59\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"SyntheticEvent.js\":[\"object-assign\",\"./PooledClass\",\"fbjs/lib/emptyFunction\",\"fbjs/lib/warning\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/SyntheticEvent.js                                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule SyntheticEvent                                                                                      // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar _assign = require('object-assign');                                                                                // 14\n                                                                                                                       // 15\nvar PooledClass = require('./PooledClass');                                                                            // 16\n                                                                                                                       // 17\nvar emptyFunction = require('fbjs/lib/emptyFunction');                                                                 // 18\nvar warning = require('fbjs/lib/warning');                                                                             // 19\n                                                                                                                       // 20\nvar didWarnForAddedNewProperty = false;                                                                                // 21\nvar isProxySupported = typeof Proxy === 'function';                                                                    // 22\n                                                                                                                       // 23\nvar shouldBeReleasedProperties = ['dispatchConfig', '_targetInst', 'nativeEvent', 'isDefaultPrevented', 'isPropagationStopped', '_dispatchListeners', '_dispatchInstances'];\n                                                                                                                       // 25\n/**                                                                                                                    // 26\n * @interface Event                                                                                                    // 27\n * @see http://www.w3.org/TR/DOM-Level-3-Events/                                                                       // 28\n */                                                                                                                    // 29\nvar EventInterface = {                                                                                                 // 30\n  type: null,                                                                                                          // 31\n  target: null,                                                                                                        // 32\n  // currentTarget is set when dispatching; no use in copying it here                                                  // 33\n  currentTarget: emptyFunction.thatReturnsNull,                                                                        // 34\n  eventPhase: null,                                                                                                    // 35\n  bubbles: null,                                                                                                       // 36\n  cancelable: null,                                                                                                    // 37\n  timeStamp: function (event) {                                                                                        // 38\n    return event.timeStamp || Date.now();                                                                              // 39\n  },                                                                                                                   // 40\n  defaultPrevented: null,                                                                                              // 41\n  isTrusted: null                                                                                                      // 42\n};                                                                                                                     // 43\n                                                                                                                       // 44\n/**                                                                                                                    // 45\n * Synthetic events are dispatched by event plugins, typically in response to a                                        // 46\n * top-level event delegation handler.                                                                                 // 47\n *                                                                                                                     // 48\n * These systems should generally use pooling to reduce the frequency of garbage                                       // 49\n * collection. The system should check `isPersistent` to determine whether the                                         // 50\n * event should be released into the pool after being dispatched. Users that                                           // 51\n * need a persisted event should invoke `persist`.                                                                     // 52\n *                                                                                                                     // 53\n * Synthetic events (and subclasses) implement the DOM Level 3 Events API by                                           // 54\n * normalizing browser quirks. Subclasses do not necessarily have to implement a                                       // 55\n * DOM interface; custom application-specific events can also subclass this.                                           // 56\n *                                                                                                                     // 57\n * @param {object} dispatchConfig Configuration used to dispatch this event.                                           // 58\n * @param {*} targetInst Marker identifying the event target.                                                          // 59\n * @param {object} nativeEvent Native browser event.                                                                   // 60\n * @param {DOMEventTarget} nativeEventTarget Target node.                                                              // 61\n */                                                                                                                    // 62\nfunction SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {                                  // 63\n  if (process.env.NODE_ENV !== 'production') {                                                                         // 64\n    // these have a getter/setter for warnings                                                                         // 65\n    delete this.nativeEvent;                                                                                           // 66\n    delete this.preventDefault;                                                                                        // 67\n    delete this.stopPropagation;                                                                                       // 68\n  }                                                                                                                    // 69\n                                                                                                                       // 70\n  this.dispatchConfig = dispatchConfig;                                                                                // 71\n  this._targetInst = targetInst;                                                                                       // 72\n  this.nativeEvent = nativeEvent;                                                                                      // 73\n                                                                                                                       // 74\n  var Interface = this.constructor.Interface;                                                                          // 75\n  for (var propName in Interface) {                                                                                    // 76\n    if (!Interface.hasOwnProperty(propName)) {                                                                         // 77\n      continue;                                                                                                        // 78\n    }                                                                                                                  // 79\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 80\n      delete this[propName]; // this has a getter/setter for warnings                                                  // 81\n    }                                                                                                                  // 82\n    var normalize = Interface[propName];                                                                               // 83\n    if (normalize) {                                                                                                   // 84\n      this[propName] = normalize(nativeEvent);                                                                         // 85\n    } else {                                                                                                           // 86\n      if (propName === 'target') {                                                                                     // 87\n        this.target = nativeEventTarget;                                                                               // 88\n      } else {                                                                                                         // 89\n        this[propName] = nativeEvent[propName];                                                                        // 90\n      }                                                                                                                // 91\n    }                                                                                                                  // 92\n  }                                                                                                                    // 93\n                                                                                                                       // 94\n  var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;\n  if (defaultPrevented) {                                                                                              // 96\n    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;                                                           // 97\n  } else {                                                                                                             // 98\n    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;                                                          // 99\n  }                                                                                                                    // 100\n  this.isPropagationStopped = emptyFunction.thatReturnsFalse;                                                          // 101\n  return this;                                                                                                         // 102\n}                                                                                                                      // 103\n                                                                                                                       // 104\n_assign(SyntheticEvent.prototype, {                                                                                    // 105\n                                                                                                                       // 106\n  preventDefault: function () {                                                                                        // 107\n    this.defaultPrevented = true;                                                                                      // 108\n    var event = this.nativeEvent;                                                                                      // 109\n    if (!event) {                                                                                                      // 110\n      return;                                                                                                          // 111\n    }                                                                                                                  // 112\n                                                                                                                       // 113\n    if (event.preventDefault) {                                                                                        // 114\n      event.preventDefault();                                                                                          // 115\n    } else {                                                                                                           // 116\n      event.returnValue = false;                                                                                       // 117\n    }                                                                                                                  // 118\n    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;                                                           // 119\n  },                                                                                                                   // 120\n                                                                                                                       // 121\n  stopPropagation: function () {                                                                                       // 122\n    var event = this.nativeEvent;                                                                                      // 123\n    if (!event) {                                                                                                      // 124\n      return;                                                                                                          // 125\n    }                                                                                                                  // 126\n                                                                                                                       // 127\n    if (event.stopPropagation) {                                                                                       // 128\n      event.stopPropagation();                                                                                         // 129\n    } else {                                                                                                           // 130\n      event.cancelBubble = true;                                                                                       // 131\n    }                                                                                                                  // 132\n    this.isPropagationStopped = emptyFunction.thatReturnsTrue;                                                         // 133\n  },                                                                                                                   // 134\n                                                                                                                       // 135\n  /**                                                                                                                  // 136\n   * We release all dispatched `SyntheticEvent`s after each event loop, adding                                         // 137\n   * them back into the pool. This allows a way to hold onto a reference that                                          // 138\n   * won't be added back into the pool.                                                                                // 139\n   */                                                                                                                  // 140\n  persist: function () {                                                                                               // 141\n    this.isPersistent = emptyFunction.thatReturnsTrue;                                                                 // 142\n  },                                                                                                                   // 143\n                                                                                                                       // 144\n  /**                                                                                                                  // 145\n   * Checks if this event should be released back into the pool.                                                       // 146\n   *                                                                                                                   // 147\n   * @return {boolean} True if this should not be released, false otherwise.                                           // 148\n   */                                                                                                                  // 149\n  isPersistent: emptyFunction.thatReturnsFalse,                                                                        // 150\n                                                                                                                       // 151\n  /**                                                                                                                  // 152\n   * `PooledClass` looks for `destructor` on each instance it releases.                                                // 153\n   */                                                                                                                  // 154\n  destructor: function () {                                                                                            // 155\n    var Interface = this.constructor.Interface;                                                                        // 156\n    for (var propName in Interface) {                                                                                  // 157\n      if (process.env.NODE_ENV !== 'production') {                                                                     // 158\n        Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));      // 159\n      } else {                                                                                                         // 160\n        this[propName] = null;                                                                                         // 161\n      }                                                                                                                // 162\n    }                                                                                                                  // 163\n    for (var i = 0; i < shouldBeReleasedProperties.length; i++) {                                                      // 164\n      this[shouldBeReleasedProperties[i]] = null;                                                                      // 165\n    }                                                                                                                  // 166\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 167\n      var noop = require('fbjs/lib/emptyFunction');                                                                    // 168\n      Object.defineProperty(this, 'nativeEvent', getPooledWarningPropertyDefinition('nativeEvent', null));             // 169\n      Object.defineProperty(this, 'preventDefault', getPooledWarningPropertyDefinition('preventDefault', noop));       // 170\n      Object.defineProperty(this, 'stopPropagation', getPooledWarningPropertyDefinition('stopPropagation', noop));     // 171\n    }                                                                                                                  // 172\n  }                                                                                                                    // 173\n                                                                                                                       // 174\n});                                                                                                                    // 175\n                                                                                                                       // 176\nSyntheticEvent.Interface = EventInterface;                                                                             // 177\n                                                                                                                       // 178\nif (process.env.NODE_ENV !== 'production') {                                                                           // 179\n  if (isProxySupported) {                                                                                              // 180\n    /*eslint-disable no-func-assign */                                                                                 // 181\n    SyntheticEvent = new Proxy(SyntheticEvent, {                                                                       // 182\n      construct: function (target, args) {                                                                             // 183\n        return this.apply(target, Object.create(target.prototype), args);                                              // 184\n      },                                                                                                               // 185\n      apply: function (constructor, that, args) {                                                                      // 186\n        return new Proxy(constructor.apply(that, args), {                                                              // 187\n          set: function (target, prop, value) {                                                                        // 188\n            if (prop !== 'isPersistent' && !target.constructor.Interface.hasOwnProperty(prop) && shouldBeReleasedProperties.indexOf(prop) === -1) {\n              process.env.NODE_ENV !== 'production' ? warning(didWarnForAddedNewProperty || target.isPersistent(), 'This synthetic event is reused for performance reasons. If you\\'re ' + 'seeing this, you\\'re adding a new property in the synthetic event object. ' + 'The property is never released. See ' + 'https://fb.me/react-event-pooling for more information.') : void 0;\n              didWarnForAddedNewProperty = true;                                                                       // 191\n            }                                                                                                          // 192\n            target[prop] = value;                                                                                      // 193\n            return true;                                                                                               // 194\n          }                                                                                                            // 195\n        });                                                                                                            // 196\n      }                                                                                                                // 197\n    });                                                                                                                // 198\n    /*eslint-enable no-func-assign */                                                                                  // 199\n  }                                                                                                                    // 200\n}                                                                                                                      // 201\n/**                                                                                                                    // 202\n * Helper to reduce boilerplate when creating subclasses.                                                              // 203\n *                                                                                                                     // 204\n * @param {function} Class                                                                                             // 205\n * @param {?object} Interface                                                                                          // 206\n */                                                                                                                    // 207\nSyntheticEvent.augmentClass = function (Class, Interface) {                                                            // 208\n  var Super = this;                                                                                                    // 209\n                                                                                                                       // 210\n  var E = function () {};                                                                                              // 211\n  E.prototype = Super.prototype;                                                                                       // 212\n  var prototype = new E();                                                                                             // 213\n                                                                                                                       // 214\n  _assign(prototype, Class.prototype);                                                                                 // 215\n  Class.prototype = prototype;                                                                                         // 216\n  Class.prototype.constructor = Class;                                                                                 // 217\n                                                                                                                       // 218\n  Class.Interface = _assign({}, Super.Interface, Interface);                                                           // 219\n  Class.augmentClass = Super.augmentClass;                                                                             // 220\n                                                                                                                       // 221\n  PooledClass.addPoolingTo(Class, PooledClass.fourArgumentPooler);                                                     // 222\n};                                                                                                                     // 223\n                                                                                                                       // 224\nPooledClass.addPoolingTo(SyntheticEvent, PooledClass.fourArgumentPooler);                                              // 225\n                                                                                                                       // 226\nmodule.exports = SyntheticEvent;                                                                                       // 227\n                                                                                                                       // 228\n/**                                                                                                                    // 229\n  * Helper to nullify syntheticEvent instance properties when destructing                                              // 230\n  *                                                                                                                    // 231\n  * @param {object} SyntheticEvent                                                                                     // 232\n  * @param {String} propName                                                                                           // 233\n  * @return {object} defineProperty object                                                                             // 234\n  */                                                                                                                   // 235\nfunction getPooledWarningPropertyDefinition(propName, getVal) {                                                        // 236\n  var isFunction = typeof getVal === 'function';                                                                       // 237\n  return {                                                                                                             // 238\n    configurable: true,                                                                                                // 239\n    set: set,                                                                                                          // 240\n    get: get                                                                                                           // 241\n  };                                                                                                                   // 242\n                                                                                                                       // 243\n  function set(val) {                                                                                                  // 244\n    var action = isFunction ? 'setting the method' : 'setting the property';                                           // 245\n    warn(action, 'This is effectively a no-op');                                                                       // 246\n    return val;                                                                                                        // 247\n  }                                                                                                                    // 248\n                                                                                                                       // 249\n  function get() {                                                                                                     // 250\n    var action = isFunction ? 'accessing the method' : 'accessing the property';                                       // 251\n    var result = isFunction ? 'This is a no-op function' : 'This is set to null';                                      // 252\n    warn(action, result);                                                                                              // 253\n    return getVal;                                                                                                     // 254\n  }                                                                                                                    // 255\n                                                                                                                       // 256\n  function warn(action, result) {                                                                                      // 257\n    var warningCondition = false;                                                                                      // 258\n    process.env.NODE_ENV !== 'production' ? warning(warningCondition, 'This synthetic event is reused for performance reasons. If you\\'re seeing this, ' + 'you\\'re %s `%s` on a released/nullified synthetic event. %s. ' + 'If you must keep the original synthetic event around, use event.persist(). ' + 'See https://fb.me/react-event-pooling for more information.', action, propName, result) : void 0;\n  }                                                                                                                    // 260\n}                                                                                                                      // 261\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"PooledClass.js\":[\"fbjs/lib/invariant\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/PooledClass.js                                                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule PooledClass                                                                                         // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar invariant = require('fbjs/lib/invariant');                                                                         // 14\n                                                                                                                       // 15\n/**                                                                                                                    // 16\n * Static poolers. Several custom versions for each potential number of                                                // 17\n * arguments. A completely generic pooler is easy to implement, but would                                              // 18\n * require accessing the `arguments` object. In each of these, `this` refers to                                        // 19\n * the Class itself, not an instance. If any others are needed, simply add them                                        // 20\n * here, or in their own files.                                                                                        // 21\n */                                                                                                                    // 22\nvar oneArgumentPooler = function (copyFieldsFrom) {                                                                    // 23\n  var Klass = this;                                                                                                    // 24\n  if (Klass.instancePool.length) {                                                                                     // 25\n    var instance = Klass.instancePool.pop();                                                                           // 26\n    Klass.call(instance, copyFieldsFrom);                                                                              // 27\n    return instance;                                                                                                   // 28\n  } else {                                                                                                             // 29\n    return new Klass(copyFieldsFrom);                                                                                  // 30\n  }                                                                                                                    // 31\n};                                                                                                                     // 32\n                                                                                                                       // 33\nvar twoArgumentPooler = function (a1, a2) {                                                                            // 34\n  var Klass = this;                                                                                                    // 35\n  if (Klass.instancePool.length) {                                                                                     // 36\n    var instance = Klass.instancePool.pop();                                                                           // 37\n    Klass.call(instance, a1, a2);                                                                                      // 38\n    return instance;                                                                                                   // 39\n  } else {                                                                                                             // 40\n    return new Klass(a1, a2);                                                                                          // 41\n  }                                                                                                                    // 42\n};                                                                                                                     // 43\n                                                                                                                       // 44\nvar threeArgumentPooler = function (a1, a2, a3) {                                                                      // 45\n  var Klass = this;                                                                                                    // 46\n  if (Klass.instancePool.length) {                                                                                     // 47\n    var instance = Klass.instancePool.pop();                                                                           // 48\n    Klass.call(instance, a1, a2, a3);                                                                                  // 49\n    return instance;                                                                                                   // 50\n  } else {                                                                                                             // 51\n    return new Klass(a1, a2, a3);                                                                                      // 52\n  }                                                                                                                    // 53\n};                                                                                                                     // 54\n                                                                                                                       // 55\nvar fourArgumentPooler = function (a1, a2, a3, a4) {                                                                   // 56\n  var Klass = this;                                                                                                    // 57\n  if (Klass.instancePool.length) {                                                                                     // 58\n    var instance = Klass.instancePool.pop();                                                                           // 59\n    Klass.call(instance, a1, a2, a3, a4);                                                                              // 60\n    return instance;                                                                                                   // 61\n  } else {                                                                                                             // 62\n    return new Klass(a1, a2, a3, a4);                                                                                  // 63\n  }                                                                                                                    // 64\n};                                                                                                                     // 65\n                                                                                                                       // 66\nvar fiveArgumentPooler = function (a1, a2, a3, a4, a5) {                                                               // 67\n  var Klass = this;                                                                                                    // 68\n  if (Klass.instancePool.length) {                                                                                     // 69\n    var instance = Klass.instancePool.pop();                                                                           // 70\n    Klass.call(instance, a1, a2, a3, a4, a5);                                                                          // 71\n    return instance;                                                                                                   // 72\n  } else {                                                                                                             // 73\n    return new Klass(a1, a2, a3, a4, a5);                                                                              // 74\n  }                                                                                                                    // 75\n};                                                                                                                     // 76\n                                                                                                                       // 77\nvar standardReleaser = function (instance) {                                                                           // 78\n  var Klass = this;                                                                                                    // 79\n  !(instance instanceof Klass) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Trying to release an instance into a pool of a different type.') : invariant(false) : void 0;\n  instance.destructor();                                                                                               // 81\n  if (Klass.instancePool.length < Klass.poolSize) {                                                                    // 82\n    Klass.instancePool.push(instance);                                                                                 // 83\n  }                                                                                                                    // 84\n};                                                                                                                     // 85\n                                                                                                                       // 86\nvar DEFAULT_POOL_SIZE = 10;                                                                                            // 87\nvar DEFAULT_POOLER = oneArgumentPooler;                                                                                // 88\n                                                                                                                       // 89\n/**                                                                                                                    // 90\n * Augments `CopyConstructor` to be a poolable class, augmenting only the class                                        // 91\n * itself (statically) not adding any prototypical fields. Any CopyConstructor                                         // 92\n * you give this may have a `poolSize` property, and will look for a                                                   // 93\n * prototypical `destructor` on instances (optional).                                                                  // 94\n *                                                                                                                     // 95\n * @param {Function} CopyConstructor Constructor that can be used to reset.                                            // 96\n * @param {Function} pooler Customizable pooler.                                                                       // 97\n */                                                                                                                    // 98\nvar addPoolingTo = function (CopyConstructor, pooler) {                                                                // 99\n  var NewKlass = CopyConstructor;                                                                                      // 100\n  NewKlass.instancePool = [];                                                                                          // 101\n  NewKlass.getPooled = pooler || DEFAULT_POOLER;                                                                       // 102\n  if (!NewKlass.poolSize) {                                                                                            // 103\n    NewKlass.poolSize = DEFAULT_POOL_SIZE;                                                                             // 104\n  }                                                                                                                    // 105\n  NewKlass.release = standardReleaser;                                                                                 // 106\n  return NewKlass;                                                                                                     // 107\n};                                                                                                                     // 108\n                                                                                                                       // 109\nvar PooledClass = {                                                                                                    // 110\n  addPoolingTo: addPoolingTo,                                                                                          // 111\n  oneArgumentPooler: oneArgumentPooler,                                                                                // 112\n  twoArgumentPooler: twoArgumentPooler,                                                                                // 113\n  threeArgumentPooler: threeArgumentPooler,                                                                            // 114\n  fourArgumentPooler: fourArgumentPooler,                                                                              // 115\n  fiveArgumentPooler: fiveArgumentPooler                                                                               // 116\n};                                                                                                                     // 117\n                                                                                                                       // 118\nmodule.exports = PooledClass;                                                                                          // 119\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"getEventTarget.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/getEventTarget.js                                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule getEventTarget                                                                                      // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\n/**                                                                                                                    // 14\n * Gets the target node from a native browser event by accounting for                                                  // 15\n * inconsistencies in browser DOM APIs.                                                                                // 16\n *                                                                                                                     // 17\n * @param {object} nativeEvent Native browser event.                                                                   // 18\n * @return {DOMEventTarget} Target node.                                                                               // 19\n */                                                                                                                    // 20\n                                                                                                                       // 21\nfunction getEventTarget(nativeEvent) {                                                                                 // 22\n  var target = nativeEvent.target || nativeEvent.srcElement || window;                                                 // 23\n                                                                                                                       // 24\n  // Normalize SVG <use> element events #4963                                                                          // 25\n  if (target.correspondingUseElement) {                                                                                // 26\n    target = target.correspondingUseElement;                                                                           // 27\n  }                                                                                                                    // 28\n                                                                                                                       // 29\n  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).                                                       // 30\n  // @see http://www.quirksmode.org/js/events_properties.html                                                          // 31\n  return target.nodeType === 3 ? target.parentNode : target;                                                           // 32\n}                                                                                                                      // 33\n                                                                                                                       // 34\nmodule.exports = getEventTarget;                                                                                       // 35\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ViewportMetrics.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ViewportMetrics.js                                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-present, Facebook, Inc.                                                                              // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ViewportMetrics                                                                                     // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar ViewportMetrics = {                                                                                                // 14\n                                                                                                                       // 15\n  currentScrollLeft: 0,                                                                                                // 16\n                                                                                                                       // 17\n  currentScrollTop: 0,                                                                                                 // 18\n                                                                                                                       // 19\n  refreshScrollValues: function (scrollPosition) {                                                                     // 20\n    ViewportMetrics.currentScrollLeft = scrollPosition.x;                                                              // 21\n    ViewportMetrics.currentScrollTop = scrollPosition.y;                                                               // 22\n  }                                                                                                                    // 23\n                                                                                                                       // 24\n};                                                                                                                     // 25\n                                                                                                                       // 26\nmodule.exports = ViewportMetrics;                                                                                      // 27\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},\"fbjs\":{\"lib\":{\"invariant.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/fbjs/lib/invariant.js                                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright (c) 2013-present, Facebook, Inc.                                                                          // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\n/**                                                                                                                    // 13\n * Use invariant() to assert state which your program assumes to be true.                                              // 14\n *                                                                                                                     // 15\n * Provide sprintf-style format (only %s is supported) and arguments                                                   // 16\n * to provide information about what broke and what you were                                                           // 17\n * expecting.                                                                                                          // 18\n *                                                                                                                     // 19\n * The invariant message will be stripped in production, but the invariant                                             // 20\n * will remain to ensure logic does not differ in production.                                                          // 21\n */                                                                                                                    // 22\n                                                                                                                       // 23\nfunction invariant(condition, format, a, b, c, d, e, f) {                                                              // 24\n  if (process.env.NODE_ENV !== 'production') {                                                                         // 25\n    if (format === undefined) {                                                                                        // 26\n      throw new Error('invariant requires an error message argument');                                                 // 27\n    }                                                                                                                  // 28\n  }                                                                                                                    // 29\n                                                                                                                       // 30\n  if (!condition) {                                                                                                    // 31\n    var error;                                                                                                         // 32\n    if (format === undefined) {                                                                                        // 33\n      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');\n    } else {                                                                                                           // 35\n      var args = [a, b, c, d, e, f];                                                                                   // 36\n      var argIndex = 0;                                                                                                // 37\n      error = new Error(format.replace(/%s/g, function () {                                                            // 38\n        return args[argIndex++];                                                                                       // 39\n      }));                                                                                                             // 40\n      error.name = 'Invariant Violation';                                                                              // 41\n    }                                                                                                                  // 42\n                                                                                                                       // 43\n    error.framesToPop = 1; // we don't care about invariant's own frame                                                // 44\n    throw error;                                                                                                       // 45\n  }                                                                                                                    // 46\n}                                                                                                                      // 47\n                                                                                                                       // 48\nmodule.exports = invariant;                                                                                            // 49\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"keyMirror.js\":[\"./invariant\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/fbjs/lib/keyMirror.js                                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright (c) 2013-present, Facebook, Inc.                                                                          // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @typechecks static-only                                                                                             // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar invariant = require('./invariant');                                                                                // 14\n                                                                                                                       // 15\n/**                                                                                                                    // 16\n * Constructs an enumeration with keys equal to their value.                                                           // 17\n *                                                                                                                     // 18\n * For example:                                                                                                        // 19\n *                                                                                                                     // 20\n *   var COLORS = keyMirror({blue: null, red: null});                                                                  // 21\n *   var myColor = COLORS.blue;                                                                                        // 22\n *   var isColorValid = !!COLORS[myColor];                                                                             // 23\n *                                                                                                                     // 24\n * The last line could not be performed if the values of the generated enum were                                       // 25\n * not equal to their keys.                                                                                            // 26\n *                                                                                                                     // 27\n *   Input:  {key1: val1, key2: val2}                                                                                  // 28\n *   Output: {key1: key1, key2: key2}                                                                                  // 29\n *                                                                                                                     // 30\n * @param {object} obj                                                                                                 // 31\n * @return {object}                                                                                                    // 32\n */                                                                                                                    // 33\nvar keyMirror = function (obj) {                                                                                       // 34\n  var ret = {};                                                                                                        // 35\n  var key;                                                                                                             // 36\n  !(obj instanceof Object && !Array.isArray(obj)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'keyMirror(...): Argument must be an object.') : invariant(false) : void 0;\n  for (key in obj) {                                                                                                   // 38\n    if (!obj.hasOwnProperty(key)) {                                                                                    // 39\n      continue;                                                                                                        // 40\n    }                                                                                                                  // 41\n    ret[key] = key;                                                                                                    // 42\n  }                                                                                                                    // 43\n  return ret;                                                                                                          // 44\n};                                                                                                                     // 45\n                                                                                                                       // 46\nmodule.exports = keyMirror;                                                                                            // 47\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"warning.js\":[\"./emptyFunction\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/fbjs/lib/warning.js                                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2014-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\nvar emptyFunction = require('./emptyFunction');                                                                        // 13\n                                                                                                                       // 14\n/**                                                                                                                    // 15\n * Similar to invariant but only logs a warning if the condition is not met.                                           // 16\n * This can be used to log issues in development environments in critical                                              // 17\n * paths. Removing the logging code for production environments will keep the                                          // 18\n * same logic and follow the same code paths.                                                                          // 19\n */                                                                                                                    // 20\n                                                                                                                       // 21\nvar warning = emptyFunction;                                                                                           // 22\n                                                                                                                       // 23\nif (process.env.NODE_ENV !== 'production') {                                                                           // 24\n  warning = function (condition, format) {                                                                             // 25\n    for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {          // 26\n      args[_key - 2] = arguments[_key];                                                                                // 27\n    }                                                                                                                  // 28\n                                                                                                                       // 29\n    if (format === undefined) {                                                                                        // 30\n      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');               // 31\n    }                                                                                                                  // 32\n                                                                                                                       // 33\n    if (format.indexOf('Failed Composite propType: ') === 0) {                                                         // 34\n      return; // Ignore CompositeComponent proptype check.                                                             // 35\n    }                                                                                                                  // 36\n                                                                                                                       // 37\n    if (!condition) {                                                                                                  // 38\n      var argIndex = 0;                                                                                                // 39\n      var message = 'Warning: ' + format.replace(/%s/g, function () {                                                  // 40\n        return args[argIndex++];                                                                                       // 41\n      });                                                                                                              // 42\n      if (typeof console !== 'undefined') {                                                                            // 43\n        console.error(message);                                                                                        // 44\n      }                                                                                                                // 45\n      try {                                                                                                            // 46\n        // --- Welcome to debugging React ---                                                                          // 47\n        // This error was thrown as a convenience so that you can use this stack                                       // 48\n        // to find the callsite that caused this warning to fire.                                                      // 49\n        throw new Error(message);                                                                                      // 50\n      } catch (x) {}                                                                                                   // 51\n    }                                                                                                                  // 52\n  };                                                                                                                   // 53\n}                                                                                                                      // 54\n                                                                                                                       // 55\nmodule.exports = warning;                                                                                              // 56\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"emptyFunction.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/fbjs/lib/emptyFunction.js                                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n\"use strict\";                                                                                                          // 1\n                                                                                                                       // 2\n/**                                                                                                                    // 3\n * Copyright (c) 2013-present, Facebook, Inc.                                                                          // 4\n * All rights reserved.                                                                                                // 5\n *                                                                                                                     // 6\n * This source code is licensed under the BSD-style license found in the                                               // 7\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 8\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 9\n *                                                                                                                     // 10\n */                                                                                                                    // 11\n                                                                                                                       // 12\nfunction makeEmptyFunction(arg) {                                                                                      // 13\n  return function () {                                                                                                 // 14\n    return arg;                                                                                                        // 15\n  };                                                                                                                   // 16\n}                                                                                                                      // 17\n                                                                                                                       // 18\n/**                                                                                                                    // 19\n * This function accepts and discards inputs; it has no side effects. This is                                          // 20\n * primarily useful idiomatically for overridable function endpoints which                                             // 21\n * always need to be callable, since JS lacks a null-call idiom ala Cocoa.                                             // 22\n */                                                                                                                    // 23\nfunction emptyFunction() {}                                                                                            // 24\n                                                                                                                       // 25\nemptyFunction.thatReturns = makeEmptyFunction;                                                                         // 26\nemptyFunction.thatReturnsFalse = makeEmptyFunction(false);                                                             // 27\nemptyFunction.thatReturnsTrue = makeEmptyFunction(true);                                                               // 28\nemptyFunction.thatReturnsNull = makeEmptyFunction(null);                                                               // 29\nemptyFunction.thatReturnsThis = function () {                                                                          // 30\n  return this;                                                                                                         // 31\n};                                                                                                                     // 32\nemptyFunction.thatReturnsArgument = function (arg) {                                                                   // 33\n  return arg;                                                                                                          // 34\n};                                                                                                                     // 35\n                                                                                                                       // 36\nmodule.exports = emptyFunction;                                                                                        // 37\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},\"object-assign\":{\"package.json\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/object-assign/package.json                                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"object-assign\";                                                                                        // 1\nexports.version = \"4.1.0\";                                                                                             // 2\n                                                                                                                       // 3\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/object-assign/index.js                                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n'use strict';                                                                                                          // 1\n/* eslint-disable no-unused-vars */                                                                                    // 2\nvar hasOwnProperty = Object.prototype.hasOwnProperty;                                                                  // 3\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;                                                          // 4\n                                                                                                                       // 5\nfunction toObject(val) {                                                                                               // 6\n\tif (val === null || val === undefined) {                                                                              // 7\n\t\tthrow new TypeError('Object.assign cannot be called with null or undefined');                                        // 8\n\t}                                                                                                                     // 9\n                                                                                                                       // 10\n\treturn Object(val);                                                                                                   // 11\n}                                                                                                                      // 12\n                                                                                                                       // 13\nfunction shouldUseNative() {                                                                                           // 14\n\ttry {                                                                                                                 // 15\n\t\tif (!Object.assign) {                                                                                                // 16\n\t\t\treturn false;                                                                                                       // 17\n\t\t}                                                                                                                    // 18\n                                                                                                                       // 19\n\t\t// Detect buggy property enumeration order in older V8 versions.                                                     // 20\n                                                                                                                       // 21\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=4118                                                              // 22\n\t\tvar test1 = new String('abc');  // eslint-disable-line                                                               // 23\n\t\ttest1[5] = 'de';                                                                                                     // 24\n\t\tif (Object.getOwnPropertyNames(test1)[0] === '5') {                                                                  // 25\n\t\t\treturn false;                                                                                                       // 26\n\t\t}                                                                                                                    // 27\n                                                                                                                       // 28\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056                                                              // 29\n\t\tvar test2 = {};                                                                                                      // 30\n\t\tfor (var i = 0; i < 10; i++) {                                                                                       // 31\n\t\t\ttest2['_' + String.fromCharCode(i)] = i;                                                                            // 32\n\t\t}                                                                                                                    // 33\n\t\tvar order2 = Object.getOwnPropertyNames(test2).map(function (n) {                                                    // 34\n\t\t\treturn test2[n];                                                                                                    // 35\n\t\t});                                                                                                                  // 36\n\t\tif (order2.join('') !== '0123456789') {                                                                              // 37\n\t\t\treturn false;                                                                                                       // 38\n\t\t}                                                                                                                    // 39\n                                                                                                                       // 40\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056                                                              // 41\n\t\tvar test3 = {};                                                                                                      // 42\n\t\t'abcdefghijklmnopqrst'.split('').forEach(function (letter) {                                                         // 43\n\t\t\ttest3[letter] = letter;                                                                                             // 44\n\t\t});                                                                                                                  // 45\n\t\tif (Object.keys(Object.assign({}, test3)).join('') !==                                                               // 46\n\t\t\t\t'abcdefghijklmnopqrst') {                                                                                          // 47\n\t\t\treturn false;                                                                                                       // 48\n\t\t}                                                                                                                    // 49\n                                                                                                                       // 50\n\t\treturn true;                                                                                                         // 51\n\t} catch (e) {                                                                                                         // 52\n\t\t// We don't expect any of the above to throw, but better to be safe.                                                 // 53\n\t\treturn false;                                                                                                        // 54\n\t}                                                                                                                     // 55\n}                                                                                                                      // 56\n                                                                                                                       // 57\nmodule.exports = shouldUseNative() ? Object.assign : function (target, source) {                                       // 58\n\tvar from;                                                                                                             // 59\n\tvar to = toObject(target);                                                                                            // 60\n\tvar symbols;                                                                                                          // 61\n                                                                                                                       // 62\n\tfor (var s = 1; s < arguments.length; s++) {                                                                          // 63\n\t\tfrom = Object(arguments[s]);                                                                                         // 64\n                                                                                                                       // 65\n\t\tfor (var key in from) {                                                                                              // 66\n\t\t\tif (hasOwnProperty.call(from, key)) {                                                                               // 67\n\t\t\t\tto[key] = from[key];                                                                                               // 68\n\t\t\t}                                                                                                                   // 69\n\t\t}                                                                                                                    // 70\n                                                                                                                       // 71\n\t\tif (Object.getOwnPropertySymbols) {                                                                                  // 72\n\t\t\tsymbols = Object.getOwnPropertySymbols(from);                                                                       // 73\n\t\t\tfor (var i = 0; i < symbols.length; i++) {                                                                          // 74\n\t\t\t\tif (propIsEnumerable.call(from, symbols[i])) {                                                                     // 75\n\t\t\t\t\tto[symbols[i]] = from[symbols[i]];                                                                                // 76\n\t\t\t\t}                                                                                                                  // 77\n\t\t\t}                                                                                                                   // 78\n\t\t}                                                                                                                    // 79\n\t}                                                                                                                     // 80\n                                                                                                                       // 81\n\treturn to;                                                                                                            // 82\n};                                                                                                                     // 83\n                                                                                                                       // 84\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"meteor-node-stubs\":{\"package.json\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor-node-stubs/package.json                                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"meteor-node-stubs\";                                                                                    // 1\nexports.version = \"0.2.3\";                                                                                             // 2\nexports.main = \"index.js\";                                                                                             // 3\n                                                                                                                       // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":[\"./map.json\",function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor-node-stubs/index.js                                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar map = require(\"./map.json\");                                                                                       // 1\nvar meteorAliases = {};                                                                                                // 2\n                                                                                                                       // 3\nObject.keys(map).forEach(function (id) {                                                                               // 4\n  if (typeof map[id] === \"string\") {                                                                                   // 5\n    try {                                                                                                              // 6\n      exports[id] = meteorAliases[id + \".js\"] =                                                                        // 7\n        require.resolve(map[id]);                                                                                      // 8\n    } catch (e) {                                                                                                      // 9\n      // Resolution can fail at runtime if the stub was not included in the                                            // 10\n      // bundle because nothing depended on it.                                                                        // 11\n    }                                                                                                                  // 12\n  } else {                                                                                                             // 13\n    exports[id] = map[id];                                                                                             // 14\n    meteorAliases[id + \".js\"] = function(){};                                                                          // 15\n  }                                                                                                                    // 16\n});                                                                                                                    // 17\n                                                                                                                       // 18\nif (typeof meteorInstall === \"function\") {                                                                             // 19\n  meteorInstall({                                                                                                      // 20\n    // Install the aliases into a node_modules directory one level up from                                             // 21\n    // the root directory, so that they do not clutter the namespace                                                   // 22\n    // available to apps and packages.                                                                                 // 23\n    \"..\": {                                                                                                            // 24\n      node_modules: meteorAliases                                                                                      // 25\n    }                                                                                                                  // 26\n  });                                                                                                                  // 27\n}                                                                                                                      // 28\n                                                                                                                       // 29\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"map.json\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor-node-stubs/map.json                                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exports = {                                                                                                     // 1\n  \"assert\": \"assert/\",                                                                                                 // 2\n  \"buffer\": \"buffer/\",                                                                                                 // 3\n  \"child_process\": null,                                                                                               // 4\n  \"cluster\": null,                                                                                                     // 5\n  \"console\": \"console-browserify\",                                                                                     // 6\n  \"constants\": \"constants-browserify\",                                                                                 // 7\n  \"crypto\": \"crypto-browserify\",                                                                                       // 8\n  \"dgram\": null,                                                                                                       // 9\n  \"dns\": null,                                                                                                         // 10\n  \"domain\": \"domain-browser\",                                                                                          // 11\n  \"events\": \"events/\",                                                                                                 // 12\n  \"fs\": null,                                                                                                          // 13\n  \"http\": \"http-browserify\",                                                                                           // 14\n  \"https\": \"https-browserify\",                                                                                         // 15\n  \"module\": null,                                                                                                      // 16\n  \"net\": null,                                                                                                         // 17\n  \"os\": \"os-browserify/browser.js\",                                                                                    // 18\n  \"path\": \"path-browserify\",                                                                                           // 19\n  \"process\": \"process/browser.js\",                                                                                     // 20\n  \"punycode\": \"punycode/\",                                                                                             // 21\n  \"querystring\": \"querystring-es3/\",                                                                                   // 22\n  \"readline\": null,                                                                                                    // 23\n  \"repl\": null,                                                                                                        // 24\n  \"stream\": \"stream-browserify\",                                                                                       // 25\n  \"_stream_duplex\": \"readable-stream/duplex.js\",                                                                       // 26\n  \"_stream_passthrough\": \"readable-stream/passthrough.js\",                                                             // 27\n  \"_stream_readable\": \"readable-stream/readable.js\",                                                                   // 28\n  \"_stream_transform\": \"readable-stream/transform.js\",                                                                 // 29\n  \"_stream_writable\": \"readable-stream/writable.js\",                                                                   // 30\n  \"string_decoder\": \"string_decoder/\",                                                                                 // 31\n  \"sys\": \"util/util.js\",                                                                                               // 32\n  \"timers\": \"timers-browserify\",                                                                                       // 33\n  \"tls\": null,                                                                                                         // 34\n  \"tty\": \"tty-browserify\",                                                                                             // 35\n  \"url\": \"url/\",                                                                                                       // 36\n  \"util\": \"util/util.js\",                                                                                              // 37\n  \"vm\": \"vm-browserify\",                                                                                               // 38\n  \"zlib\": \"browserify-zlib\"                                                                                            // 39\n};                                                                                                                     // 40\n                                                                                                                       // 41\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"deps\":{\"buffer.js\":[\"buffer/\",function(require){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor-node-stubs/deps/buffer.js                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nrequire(\"buffer/\");                                                                                                    // 1\n                                                                                                                       // 2\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"process.js\":[\"process/browser.js\",function(require){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor-node-stubs/deps/process.js                                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nrequire(\"process/browser.js\");                                                                                         // 1\n                                                                                                                       // 2\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"domain.js\":[\"domain-browser\",function(require){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor-node-stubs/deps/domain.js                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nrequire(\"domain-browser\");                                                                                             // 1\n                                                                                                                       // 2\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"node_modules\":{\"buffer\":{\"package.json\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor-node-stubs/node_modules/buffer/package.json                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"buffer\";                                                                                               // 1\nexports.version = \"4.5.1\";                                                                                             // 2\nexports.main = \"index.js\";                                                                                             // 3\n                                                                                                                       // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":[\"base64-js\",\"ieee754\",\"isarray\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor-node-stubs/node_modules/buffer/index.js                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/*!                                                                                                                    // 1\n * The buffer module from node.js, for the browser.                                                                    // 2\n *                                                                                                                     // 3\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>                                               // 4\n * @license  MIT                                                                                                       // 5\n */                                                                                                                    // 6\n/* eslint-disable no-proto */                                                                                          // 7\n                                                                                                                       // 8\n'use strict'                                                                                                           // 9\n                                                                                                                       // 10\nvar base64 = require('base64-js')                                                                                      // 11\nvar ieee754 = require('ieee754')                                                                                       // 12\nvar isArray = require('isarray')                                                                                       // 13\n                                                                                                                       // 14\nexports.Buffer = Buffer                                                                                                // 15\nexports.SlowBuffer = SlowBuffer                                                                                        // 16\nexports.INSPECT_MAX_BYTES = 50                                                                                         // 17\nBuffer.poolSize = 8192 // not used by this implementation                                                              // 18\n                                                                                                                       // 19\nvar rootParent = {}                                                                                                    // 20\n                                                                                                                       // 21\n/**                                                                                                                    // 22\n * If `Buffer.TYPED_ARRAY_SUPPORT`:                                                                                    // 23\n *   === true    Use Uint8Array implementation (fastest)                                                               // 24\n *   === false   Use Object implementation (most compatible, even IE6)                                                 // 25\n *                                                                                                                     // 26\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,                                  // 27\n * Opera 11.6+, iOS 4.2+.                                                                                              // 28\n *                                                                                                                     // 29\n * Due to various browser bugs, sometimes the Object implementation will be used even                                  // 30\n * when the browser supports typed arrays.                                                                             // 31\n *                                                                                                                     // 32\n * Note:                                                                                                               // 33\n *                                                                                                                     // 34\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,                                 // 35\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.                                                       // 36\n *                                                                                                                     // 37\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.                                            // 38\n *                                                                                                                     // 39\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of                              // 40\n *     incorrect length in some situations.                                                                            // 41\n                                                                                                                       // 42\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they                              // 43\n * get the Object implementation, which is slower but behaves correctly.                                               // 44\n */                                                                                                                    // 45\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined                                                  // 46\n  ? global.TYPED_ARRAY_SUPPORT                                                                                         // 47\n  : typedArraySupport()                                                                                                // 48\n                                                                                                                       // 49\nfunction typedArraySupport () {                                                                                        // 50\n  try {                                                                                                                // 51\n    var arr = new Uint8Array(1)                                                                                        // 52\n    arr.foo = function () { return 42 }                                                                                // 53\n    return arr.foo() === 42 && // typed array instances can be augmented                                               // 54\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`                                           // 55\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`                                              // 56\n  } catch (e) {                                                                                                        // 57\n    return false                                                                                                       // 58\n  }                                                                                                                    // 59\n}                                                                                                                      // 60\n                                                                                                                       // 61\nfunction kMaxLength () {                                                                                               // 62\n  return Buffer.TYPED_ARRAY_SUPPORT                                                                                    // 63\n    ? 0x7fffffff                                                                                                       // 64\n    : 0x3fffffff                                                                                                       // 65\n}                                                                                                                      // 66\n                                                                                                                       // 67\n/**                                                                                                                    // 68\n * The Buffer constructor returns instances of `Uint8Array` that have their                                            // 69\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of                                     // 70\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods                                     // 71\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it                                       // 72\n * returns a single octet.                                                                                             // 73\n *                                                                                                                     // 74\n * The `Uint8Array` prototype remains unmodified.                                                                      // 75\n */                                                                                                                    // 76\nfunction Buffer (arg) {                                                                                                // 77\n  if (!(this instanceof Buffer)) {                                                                                     // 78\n    // Avoid going through an ArgumentsAdaptorTrampoline in the common case.                                           // 79\n    if (arguments.length > 1) return new Buffer(arg, arguments[1])                                                     // 80\n    return new Buffer(arg)                                                                                             // 81\n  }                                                                                                                    // 82\n                                                                                                                       // 83\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {                                                                                   // 84\n    this.length = 0                                                                                                    // 85\n    this.parent = undefined                                                                                            // 86\n  }                                                                                                                    // 87\n                                                                                                                       // 88\n  // Common case.                                                                                                      // 89\n  if (typeof arg === 'number') {                                                                                       // 90\n    return fromNumber(this, arg)                                                                                       // 91\n  }                                                                                                                    // 92\n                                                                                                                       // 93\n  // Slightly less common case.                                                                                        // 94\n  if (typeof arg === 'string') {                                                                                       // 95\n    return fromString(this, arg, arguments.length > 1 ? arguments[1] : 'utf8')                                         // 96\n  }                                                                                                                    // 97\n                                                                                                                       // 98\n  // Unusual.                                                                                                          // 99\n  return fromObject(this, arg)                                                                                         // 100\n}                                                                                                                      // 101\n                                                                                                                       // 102\n// TODO: Legacy, not needed anymore. Remove in next major version.                                                     // 103\nBuffer._augment = function (arr) {                                                                                     // 104\n  arr.__proto__ = Buffer.prototype                                                                                     // 105\n  return arr                                                                                                           // 106\n}                                                                                                                      // 107\n                                                                                                                       // 108\nfunction fromNumber (that, length) {                                                                                   // 109\n  that = allocate(that, length < 0 ? 0 : checked(length) | 0)                                                          // 110\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {                                                                                   // 111\n    for (var i = 0; i < length; i++) {                                                                                 // 112\n      that[i] = 0                                                                                                      // 113\n    }                                                                                                                  // 114\n  }                                                                                                                    // 115\n  return that                                                                                                          // 116\n}                                                                                                                      // 117\n                                                                                                                       // 118\nfunction fromString (that, string, encoding) {                                                                         // 119\n  if (typeof encoding !== 'string' || encoding === '') encoding = 'utf8'                                               // 120\n                                                                                                                       // 121\n  // Assumption: byteLength() return value is always < kMaxLength.                                                     // 122\n  var length = byteLength(string, encoding) | 0                                                                        // 123\n  that = allocate(that, length)                                                                                        // 124\n                                                                                                                       // 125\n  that.write(string, encoding)                                                                                         // 126\n  return that                                                                                                          // 127\n}                                                                                                                      // 128\n                                                                                                                       // 129\nfunction fromObject (that, object) {                                                                                   // 130\n  if (Buffer.isBuffer(object)) return fromBuffer(that, object)                                                         // 131\n                                                                                                                       // 132\n  if (isArray(object)) return fromArray(that, object)                                                                  // 133\n                                                                                                                       // 134\n  if (object == null) {                                                                                                // 135\n    throw new TypeError('must start with number, buffer, array or string')                                             // 136\n  }                                                                                                                    // 137\n                                                                                                                       // 138\n  if (typeof ArrayBuffer !== 'undefined') {                                                                            // 139\n    if (object.buffer instanceof ArrayBuffer) {                                                                        // 140\n      return fromTypedArray(that, object)                                                                              // 141\n    }                                                                                                                  // 142\n    if (object instanceof ArrayBuffer) {                                                                               // 143\n      return fromArrayBuffer(that, object)                                                                             // 144\n    }                                                                                                                  // 145\n  }                                                                                                                    // 146\n                                                                                                                       // 147\n  if (object.length) return fromArrayLike(that, object)                                                                // 148\n                                                                                                                       // 149\n  return fromJsonObject(that, object)                                                                                  // 150\n}                                                                                                                      // 151\n                                                                                                                       // 152\nfunction fromBuffer (that, buffer) {                                                                                   // 153\n  var length = checked(buffer.length) | 0                                                                              // 154\n  that = allocate(that, length)                                                                                        // 155\n  buffer.copy(that, 0, 0, length)                                                                                      // 156\n  return that                                                                                                          // 157\n}                                                                                                                      // 158\n                                                                                                                       // 159\nfunction fromArray (that, array) {                                                                                     // 160\n  var length = checked(array.length) | 0                                                                               // 161\n  that = allocate(that, length)                                                                                        // 162\n  for (var i = 0; i < length; i += 1) {                                                                                // 163\n    that[i] = array[i] & 255                                                                                           // 164\n  }                                                                                                                    // 165\n  return that                                                                                                          // 166\n}                                                                                                                      // 167\n                                                                                                                       // 168\n// Duplicate of fromArray() to keep fromArray() monomorphic.                                                           // 169\nfunction fromTypedArray (that, array) {                                                                                // 170\n  var length = checked(array.length) | 0                                                                               // 171\n  that = allocate(that, length)                                                                                        // 172\n  // Truncating the elements is probably not what people expect from typed                                             // 173\n  // arrays with BYTES_PER_ELEMENT > 1 but it's compatible with the behavior                                           // 174\n  // of the old Buffer constructor.                                                                                    // 175\n  for (var i = 0; i < length; i += 1) {                                                                                // 176\n    that[i] = array[i] & 255                                                                                           // 177\n  }                                                                                                                    // 178\n  return that                                                                                                          // 179\n}                                                                                                                      // 180\n                                                                                                                       // 181\nfunction fromArrayBuffer (that, array) {                                                                               // 182\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer                                                // 183\n                                                                                                                       // 184\n  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                    // 185\n    // Return an augmented `Uint8Array` instance, for best performance                                                 // 186\n    that = new Uint8Array(array)                                                                                       // 187\n    that.__proto__ = Buffer.prototype                                                                                  // 188\n  } else {                                                                                                             // 189\n    // Fallback: Return an object instance of the Buffer class                                                         // 190\n    that = fromTypedArray(that, new Uint8Array(array))                                                                 // 191\n  }                                                                                                                    // 192\n  return that                                                                                                          // 193\n}                                                                                                                      // 194\n                                                                                                                       // 195\nfunction fromArrayLike (that, array) {                                                                                 // 196\n  var length = checked(array.length) | 0                                                                               // 197\n  that = allocate(that, length)                                                                                        // 198\n  for (var i = 0; i < length; i += 1) {                                                                                // 199\n    that[i] = array[i] & 255                                                                                           // 200\n  }                                                                                                                    // 201\n  return that                                                                                                          // 202\n}                                                                                                                      // 203\n                                                                                                                       // 204\n// Deserialize { type: 'Buffer', data: [1,2,3,...] } into a Buffer object.                                             // 205\n// Returns a zero-length buffer for inputs that don't conform to the spec.                                             // 206\nfunction fromJsonObject (that, object) {                                                                               // 207\n  var array                                                                                                            // 208\n  var length = 0                                                                                                       // 209\n                                                                                                                       // 210\n  if (object.type === 'Buffer' && isArray(object.data)) {                                                              // 211\n    array = object.data                                                                                                // 212\n    length = checked(array.length) | 0                                                                                 // 213\n  }                                                                                                                    // 214\n  that = allocate(that, length)                                                                                        // 215\n                                                                                                                       // 216\n  for (var i = 0; i < length; i += 1) {                                                                                // 217\n    that[i] = array[i] & 255                                                                                           // 218\n  }                                                                                                                    // 219\n  return that                                                                                                          // 220\n}                                                                                                                      // 221\n                                                                                                                       // 222\nif (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                      // 223\n  Buffer.prototype.__proto__ = Uint8Array.prototype                                                                    // 224\n  Buffer.__proto__ = Uint8Array                                                                                        // 225\n  if (typeof Symbol !== 'undefined' && Symbol.species &&                                                               // 226\n      Buffer[Symbol.species] === Buffer) {                                                                             // 227\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97                                         // 228\n    Object.defineProperty(Buffer, Symbol.species, {                                                                    // 229\n      value: null,                                                                                                     // 230\n      configurable: true                                                                                               // 231\n    })                                                                                                                 // 232\n  }                                                                                                                    // 233\n} else {                                                                                                               // 234\n  // pre-set for values that may exist in the future                                                                   // 235\n  Buffer.prototype.length = undefined                                                                                  // 236\n  Buffer.prototype.parent = undefined                                                                                  // 237\n}                                                                                                                      // 238\n                                                                                                                       // 239\nfunction allocate (that, length) {                                                                                     // 240\n  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                    // 241\n    // Return an augmented `Uint8Array` instance, for best performance                                                 // 242\n    that = new Uint8Array(length)                                                                                      // 243\n    that.__proto__ = Buffer.prototype                                                                                  // 244\n  } else {                                                                                                             // 245\n    // Fallback: Return an object instance of the Buffer class                                                         // 246\n    that.length = length                                                                                               // 247\n  }                                                                                                                    // 248\n                                                                                                                       // 249\n  var fromPool = length !== 0 && length <= Buffer.poolSize >>> 1                                                       // 250\n  if (fromPool) that.parent = rootParent                                                                               // 251\n                                                                                                                       // 252\n  return that                                                                                                          // 253\n}                                                                                                                      // 254\n                                                                                                                       // 255\nfunction checked (length) {                                                                                            // 256\n  // Note: cannot use `length < kMaxLength` here because that fails when                                               // 257\n  // length is NaN (which is otherwise coerced to zero.)                                                               // 258\n  if (length >= kMaxLength()) {                                                                                        // 259\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +                                           // 260\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')                                            // 261\n  }                                                                                                                    // 262\n  return length | 0                                                                                                    // 263\n}                                                                                                                      // 264\n                                                                                                                       // 265\nfunction SlowBuffer (subject, encoding) {                                                                              // 266\n  if (!(this instanceof SlowBuffer)) return new SlowBuffer(subject, encoding)                                          // 267\n                                                                                                                       // 268\n  var buf = new Buffer(subject, encoding)                                                                              // 269\n  delete buf.parent                                                                                                    // 270\n  return buf                                                                                                           // 271\n}                                                                                                                      // 272\n                                                                                                                       // 273\nBuffer.isBuffer = function isBuffer (b) {                                                                              // 274\n  return !!(b != null && b._isBuffer)                                                                                  // 275\n}                                                                                                                      // 276\n                                                                                                                       // 277\nBuffer.compare = function compare (a, b) {                                                                             // 278\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {                                                                    // 279\n    throw new TypeError('Arguments must be Buffers')                                                                   // 280\n  }                                                                                                                    // 281\n                                                                                                                       // 282\n  if (a === b) return 0                                                                                                // 283\n                                                                                                                       // 284\n  var x = a.length                                                                                                     // 285\n  var y = b.length                                                                                                     // 286\n                                                                                                                       // 287\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {                                                                // 288\n    if (a[i] !== b[i]) {                                                                                               // 289\n      x = a[i]                                                                                                         // 290\n      y = b[i]                                                                                                         // 291\n      break                                                                                                            // 292\n    }                                                                                                                  // 293\n  }                                                                                                                    // 294\n                                                                                                                       // 295\n  if (x < y) return -1                                                                                                 // 296\n  if (y < x) return 1                                                                                                  // 297\n  return 0                                                                                                             // 298\n}                                                                                                                      // 299\n                                                                                                                       // 300\nBuffer.isEncoding = function isEncoding (encoding) {                                                                   // 301\n  switch (String(encoding).toLowerCase()) {                                                                            // 302\n    case 'hex':                                                                                                        // 303\n    case 'utf8':                                                                                                       // 304\n    case 'utf-8':                                                                                                      // 305\n    case 'ascii':                                                                                                      // 306\n    case 'binary':                                                                                                     // 307\n    case 'base64':                                                                                                     // 308\n    case 'raw':                                                                                                        // 309\n    case 'ucs2':                                                                                                       // 310\n    case 'ucs-2':                                                                                                      // 311\n    case 'utf16le':                                                                                                    // 312\n    case 'utf-16le':                                                                                                   // 313\n      return true                                                                                                      // 314\n    default:                                                                                                           // 315\n      return false                                                                                                     // 316\n  }                                                                                                                    // 317\n}                                                                                                                      // 318\n                                                                                                                       // 319\nBuffer.concat = function concat (list, length) {                                                                       // 320\n  if (!isArray(list)) throw new TypeError('list argument must be an Array of Buffers.')                                // 321\n                                                                                                                       // 322\n  if (list.length === 0) {                                                                                             // 323\n    return new Buffer(0)                                                                                               // 324\n  }                                                                                                                    // 325\n                                                                                                                       // 326\n  var i                                                                                                                // 327\n  if (length === undefined) {                                                                                          // 328\n    length = 0                                                                                                         // 329\n    for (i = 0; i < list.length; i++) {                                                                                // 330\n      length += list[i].length                                                                                         // 331\n    }                                                                                                                  // 332\n  }                                                                                                                    // 333\n                                                                                                                       // 334\n  var buf = new Buffer(length)                                                                                         // 335\n  var pos = 0                                                                                                          // 336\n  for (i = 0; i < list.length; i++) {                                                                                  // 337\n    var item = list[i]                                                                                                 // 338\n    item.copy(buf, pos)                                                                                                // 339\n    pos += item.length                                                                                                 // 340\n  }                                                                                                                    // 341\n  return buf                                                                                                           // 342\n}                                                                                                                      // 343\n                                                                                                                       // 344\nfunction byteLength (string, encoding) {                                                                               // 345\n  if (typeof string !== 'string') string = '' + string                                                                 // 346\n                                                                                                                       // 347\n  var len = string.length                                                                                              // 348\n  if (len === 0) return 0                                                                                              // 349\n                                                                                                                       // 350\n  // Use a for loop to avoid recursion                                                                                 // 351\n  var loweredCase = false                                                                                              // 352\n  for (;;) {                                                                                                           // 353\n    switch (encoding) {                                                                                                // 354\n      case 'ascii':                                                                                                    // 355\n      case 'binary':                                                                                                   // 356\n      // Deprecated                                                                                                    // 357\n      case 'raw':                                                                                                      // 358\n      case 'raws':                                                                                                     // 359\n        return len                                                                                                     // 360\n      case 'utf8':                                                                                                     // 361\n      case 'utf-8':                                                                                                    // 362\n        return utf8ToBytes(string).length                                                                              // 363\n      case 'ucs2':                                                                                                     // 364\n      case 'ucs-2':                                                                                                    // 365\n      case 'utf16le':                                                                                                  // 366\n      case 'utf-16le':                                                                                                 // 367\n        return len * 2                                                                                                 // 368\n      case 'hex':                                                                                                      // 369\n        return len >>> 1                                                                                               // 370\n      case 'base64':                                                                                                   // 371\n        return base64ToBytes(string).length                                                                            // 372\n      default:                                                                                                         // 373\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8                                              // 374\n        encoding = ('' + encoding).toLowerCase()                                                                       // 375\n        loweredCase = true                                                                                             // 376\n    }                                                                                                                  // 377\n  }                                                                                                                    // 378\n}                                                                                                                      // 379\nBuffer.byteLength = byteLength                                                                                         // 380\n                                                                                                                       // 381\nfunction slowToString (encoding, start, end) {                                                                         // 382\n  var loweredCase = false                                                                                              // 383\n                                                                                                                       // 384\n  start = start | 0                                                                                                    // 385\n  end = end === undefined || end === Infinity ? this.length : end | 0                                                  // 386\n                                                                                                                       // 387\n  if (!encoding) encoding = 'utf8'                                                                                     // 388\n  if (start < 0) start = 0                                                                                             // 389\n  if (end > this.length) end = this.length                                                                             // 390\n  if (end <= start) return ''                                                                                          // 391\n                                                                                                                       // 392\n  while (true) {                                                                                                       // 393\n    switch (encoding) {                                                                                                // 394\n      case 'hex':                                                                                                      // 395\n        return hexSlice(this, start, end)                                                                              // 396\n                                                                                                                       // 397\n      case 'utf8':                                                                                                     // 398\n      case 'utf-8':                                                                                                    // 399\n        return utf8Slice(this, start, end)                                                                             // 400\n                                                                                                                       // 401\n      case 'ascii':                                                                                                    // 402\n        return asciiSlice(this, start, end)                                                                            // 403\n                                                                                                                       // 404\n      case 'binary':                                                                                                   // 405\n        return binarySlice(this, start, end)                                                                           // 406\n                                                                                                                       // 407\n      case 'base64':                                                                                                   // 408\n        return base64Slice(this, start, end)                                                                           // 409\n                                                                                                                       // 410\n      case 'ucs2':                                                                                                     // 411\n      case 'ucs-2':                                                                                                    // 412\n      case 'utf16le':                                                                                                  // 413\n      case 'utf-16le':                                                                                                 // 414\n        return utf16leSlice(this, start, end)                                                                          // 415\n                                                                                                                       // 416\n      default:                                                                                                         // 417\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)                                          // 418\n        encoding = (encoding + '').toLowerCase()                                                                       // 419\n        loweredCase = true                                                                                             // 420\n    }                                                                                                                  // 421\n  }                                                                                                                    // 422\n}                                                                                                                      // 423\n                                                                                                                       // 424\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect                                 // 425\n// Buffer instances.                                                                                                   // 426\nBuffer.prototype._isBuffer = true                                                                                      // 427\n                                                                                                                       // 428\nBuffer.prototype.toString = function toString () {                                                                     // 429\n  var length = this.length | 0                                                                                         // 430\n  if (length === 0) return ''                                                                                          // 431\n  if (arguments.length === 0) return utf8Slice(this, 0, length)                                                        // 432\n  return slowToString.apply(this, arguments)                                                                           // 433\n}                                                                                                                      // 434\n                                                                                                                       // 435\nBuffer.prototype.equals = function equals (b) {                                                                        // 436\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')                                            // 437\n  if (this === b) return true                                                                                          // 438\n  return Buffer.compare(this, b) === 0                                                                                 // 439\n}                                                                                                                      // 440\n                                                                                                                       // 441\nBuffer.prototype.inspect = function inspect () {                                                                       // 442\n  var str = ''                                                                                                         // 443\n  var max = exports.INSPECT_MAX_BYTES                                                                                  // 444\n  if (this.length > 0) {                                                                                               // 445\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')                                                        // 446\n    if (this.length > max) str += ' ... '                                                                              // 447\n  }                                                                                                                    // 448\n  return '<Buffer ' + str + '>'                                                                                        // 449\n}                                                                                                                      // 450\n                                                                                                                       // 451\nBuffer.prototype.compare = function compare (b) {                                                                      // 452\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')                                            // 453\n  return Buffer.compare(this, b)                                                                                       // 454\n}                                                                                                                      // 455\n                                                                                                                       // 456\nBuffer.prototype.indexOf = function indexOf (val, byteOffset) {                                                        // 457\n  if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff                                                                 // 458\n  else if (byteOffset < -0x80000000) byteOffset = -0x80000000                                                          // 459\n  byteOffset >>= 0                                                                                                     // 460\n                                                                                                                       // 461\n  if (this.length === 0) return -1                                                                                     // 462\n  if (byteOffset >= this.length) return -1                                                                             // 463\n                                                                                                                       // 464\n  // Negative offsets start from the end of the buffer                                                                 // 465\n  if (byteOffset < 0) byteOffset = Math.max(this.length + byteOffset, 0)                                               // 466\n                                                                                                                       // 467\n  if (typeof val === 'string') {                                                                                       // 468\n    if (val.length === 0) return -1 // special case: looking for empty string always fails                             // 469\n    return String.prototype.indexOf.call(this, val, byteOffset)                                                        // 470\n  }                                                                                                                    // 471\n  if (Buffer.isBuffer(val)) {                                                                                          // 472\n    return arrayIndexOf(this, val, byteOffset)                                                                         // 473\n  }                                                                                                                    // 474\n  if (typeof val === 'number') {                                                                                       // 475\n    if (Buffer.TYPED_ARRAY_SUPPORT && Uint8Array.prototype.indexOf === 'function') {                                   // 476\n      return Uint8Array.prototype.indexOf.call(this, val, byteOffset)                                                  // 477\n    }                                                                                                                  // 478\n    return arrayIndexOf(this, [ val ], byteOffset)                                                                     // 479\n  }                                                                                                                    // 480\n                                                                                                                       // 481\n  function arrayIndexOf (arr, val, byteOffset) {                                                                       // 482\n    var foundIndex = -1                                                                                                // 483\n    for (var i = 0; byteOffset + i < arr.length; i++) {                                                                // 484\n      if (arr[byteOffset + i] === val[foundIndex === -1 ? 0 : i - foundIndex]) {                                       // 485\n        if (foundIndex === -1) foundIndex = i                                                                          // 486\n        if (i - foundIndex + 1 === val.length) return byteOffset + foundIndex                                          // 487\n      } else {                                                                                                         // 488\n        foundIndex = -1                                                                                                // 489\n      }                                                                                                                // 490\n    }                                                                                                                  // 491\n    return -1                                                                                                          // 492\n  }                                                                                                                    // 493\n                                                                                                                       // 494\n  throw new TypeError('val must be string, number or Buffer')                                                          // 495\n}                                                                                                                      // 496\n                                                                                                                       // 497\nfunction hexWrite (buf, string, offset, length) {                                                                      // 498\n  offset = Number(offset) || 0                                                                                         // 499\n  var remaining = buf.length - offset                                                                                  // 500\n  if (!length) {                                                                                                       // 501\n    length = remaining                                                                                                 // 502\n  } else {                                                                                                             // 503\n    length = Number(length)                                                                                            // 504\n    if (length > remaining) {                                                                                          // 505\n      length = remaining                                                                                               // 506\n    }                                                                                                                  // 507\n  }                                                                                                                    // 508\n                                                                                                                       // 509\n  // must be an even number of digits                                                                                  // 510\n  var strLen = string.length                                                                                           // 511\n  if (strLen % 2 !== 0) throw new Error('Invalid hex string')                                                          // 512\n                                                                                                                       // 513\n  if (length > strLen / 2) {                                                                                           // 514\n    length = strLen / 2                                                                                                // 515\n  }                                                                                                                    // 516\n  for (var i = 0; i < length; i++) {                                                                                   // 517\n    var parsed = parseInt(string.substr(i * 2, 2), 16)                                                                 // 518\n    if (isNaN(parsed)) throw new Error('Invalid hex string')                                                           // 519\n    buf[offset + i] = parsed                                                                                           // 520\n  }                                                                                                                    // 521\n  return i                                                                                                             // 522\n}                                                                                                                      // 523\n                                                                                                                       // 524\nfunction utf8Write (buf, string, offset, length) {                                                                     // 525\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)                                     // 526\n}                                                                                                                      // 527\n                                                                                                                       // 528\nfunction asciiWrite (buf, string, offset, length) {                                                                    // 529\n  return blitBuffer(asciiToBytes(string), buf, offset, length)                                                         // 530\n}                                                                                                                      // 531\n                                                                                                                       // 532\nfunction binaryWrite (buf, string, offset, length) {                                                                   // 533\n  return asciiWrite(buf, string, offset, length)                                                                       // 534\n}                                                                                                                      // 535\n                                                                                                                       // 536\nfunction base64Write (buf, string, offset, length) {                                                                   // 537\n  return blitBuffer(base64ToBytes(string), buf, offset, length)                                                        // 538\n}                                                                                                                      // 539\n                                                                                                                       // 540\nfunction ucs2Write (buf, string, offset, length) {                                                                     // 541\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)                                  // 542\n}                                                                                                                      // 543\n                                                                                                                       // 544\nBuffer.prototype.write = function write (string, offset, length, encoding) {                                           // 545\n  // Buffer#write(string)                                                                                              // 546\n  if (offset === undefined) {                                                                                          // 547\n    encoding = 'utf8'                                                                                                  // 548\n    length = this.length                                                                                               // 549\n    offset = 0                                                                                                         // 550\n  // Buffer#write(string, encoding)                                                                                    // 551\n  } else if (length === undefined && typeof offset === 'string') {                                                     // 552\n    encoding = offset                                                                                                  // 553\n    length = this.length                                                                                               // 554\n    offset = 0                                                                                                         // 555\n  // Buffer#write(string, offset[, length][, encoding])                                                                // 556\n  } else if (isFinite(offset)) {                                                                                       // 557\n    offset = offset | 0                                                                                                // 558\n    if (isFinite(length)) {                                                                                            // 559\n      length = length | 0                                                                                              // 560\n      if (encoding === undefined) encoding = 'utf8'                                                                    // 561\n    } else {                                                                                                           // 562\n      encoding = length                                                                                                // 563\n      length = undefined                                                                                               // 564\n    }                                                                                                                  // 565\n  // legacy write(string, encoding, offset, length) - remove in v0.13                                                  // 566\n  } else {                                                                                                             // 567\n    var swap = encoding                                                                                                // 568\n    encoding = offset                                                                                                  // 569\n    offset = length | 0                                                                                                // 570\n    length = swap                                                                                                      // 571\n  }                                                                                                                    // 572\n                                                                                                                       // 573\n  var remaining = this.length - offset                                                                                 // 574\n  if (length === undefined || length > remaining) length = remaining                                                   // 575\n                                                                                                                       // 576\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {                                     // 577\n    throw new RangeError('attempt to write outside buffer bounds')                                                     // 578\n  }                                                                                                                    // 579\n                                                                                                                       // 580\n  if (!encoding) encoding = 'utf8'                                                                                     // 581\n                                                                                                                       // 582\n  var loweredCase = false                                                                                              // 583\n  for (;;) {                                                                                                           // 584\n    switch (encoding) {                                                                                                // 585\n      case 'hex':                                                                                                      // 586\n        return hexWrite(this, string, offset, length)                                                                  // 587\n                                                                                                                       // 588\n      case 'utf8':                                                                                                     // 589\n      case 'utf-8':                                                                                                    // 590\n        return utf8Write(this, string, offset, length)                                                                 // 591\n                                                                                                                       // 592\n      case 'ascii':                                                                                                    // 593\n        return asciiWrite(this, string, offset, length)                                                                // 594\n                                                                                                                       // 595\n      case 'binary':                                                                                                   // 596\n        return binaryWrite(this, string, offset, length)                                                               // 597\n                                                                                                                       // 598\n      case 'base64':                                                                                                   // 599\n        // Warning: maxLength not taken into account in base64Write                                                    // 600\n        return base64Write(this, string, offset, length)                                                               // 601\n                                                                                                                       // 602\n      case 'ucs2':                                                                                                     // 603\n      case 'ucs-2':                                                                                                    // 604\n      case 'utf16le':                                                                                                  // 605\n      case 'utf-16le':                                                                                                 // 606\n        return ucs2Write(this, string, offset, length)                                                                 // 607\n                                                                                                                       // 608\n      default:                                                                                                         // 609\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)                                          // 610\n        encoding = ('' + encoding).toLowerCase()                                                                       // 611\n        loweredCase = true                                                                                             // 612\n    }                                                                                                                  // 613\n  }                                                                                                                    // 614\n}                                                                                                                      // 615\n                                                                                                                       // 616\nBuffer.prototype.toJSON = function toJSON () {                                                                         // 617\n  return {                                                                                                             // 618\n    type: 'Buffer',                                                                                                    // 619\n    data: Array.prototype.slice.call(this._arr || this, 0)                                                             // 620\n  }                                                                                                                    // 621\n}                                                                                                                      // 622\n                                                                                                                       // 623\nfunction base64Slice (buf, start, end) {                                                                               // 624\n  if (start === 0 && end === buf.length) {                                                                             // 625\n    return base64.fromByteArray(buf)                                                                                   // 626\n  } else {                                                                                                             // 627\n    return base64.fromByteArray(buf.slice(start, end))                                                                 // 628\n  }                                                                                                                    // 629\n}                                                                                                                      // 630\n                                                                                                                       // 631\nfunction utf8Slice (buf, start, end) {                                                                                 // 632\n  end = Math.min(buf.length, end)                                                                                      // 633\n  var res = []                                                                                                         // 634\n                                                                                                                       // 635\n  var i = start                                                                                                        // 636\n  while (i < end) {                                                                                                    // 637\n    var firstByte = buf[i]                                                                                             // 638\n    var codePoint = null                                                                                               // 639\n    var bytesPerSequence = (firstByte > 0xEF) ? 4                                                                      // 640\n      : (firstByte > 0xDF) ? 3                                                                                         // 641\n      : (firstByte > 0xBF) ? 2                                                                                         // 642\n      : 1                                                                                                              // 643\n                                                                                                                       // 644\n    if (i + bytesPerSequence <= end) {                                                                                 // 645\n      var secondByte, thirdByte, fourthByte, tempCodePoint                                                             // 646\n                                                                                                                       // 647\n      switch (bytesPerSequence) {                                                                                      // 648\n        case 1:                                                                                                        // 649\n          if (firstByte < 0x80) {                                                                                      // 650\n            codePoint = firstByte                                                                                      // 651\n          }                                                                                                            // 652\n          break                                                                                                        // 653\n        case 2:                                                                                                        // 654\n          secondByte = buf[i + 1]                                                                                      // 655\n          if ((secondByte & 0xC0) === 0x80) {                                                                          // 656\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)                                            // 657\n            if (tempCodePoint > 0x7F) {                                                                                // 658\n              codePoint = tempCodePoint                                                                                // 659\n            }                                                                                                          // 660\n          }                                                                                                            // 661\n          break                                                                                                        // 662\n        case 3:                                                                                                        // 663\n          secondByte = buf[i + 1]                                                                                      // 664\n          thirdByte = buf[i + 2]                                                                                       // 665\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {                                           // 666\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)                 // 667\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {                         // 668\n              codePoint = tempCodePoint                                                                                // 669\n            }                                                                                                          // 670\n          }                                                                                                            // 671\n          break                                                                                                        // 672\n        case 4:                                                                                                        // 673\n          secondByte = buf[i + 1]                                                                                      // 674\n          thirdByte = buf[i + 2]                                                                                       // 675\n          fourthByte = buf[i + 3]                                                                                      // 676\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {           // 677\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {                                                  // 679\n              codePoint = tempCodePoint                                                                                // 680\n            }                                                                                                          // 681\n          }                                                                                                            // 682\n      }                                                                                                                // 683\n    }                                                                                                                  // 684\n                                                                                                                       // 685\n    if (codePoint === null) {                                                                                          // 686\n      // we did not generate a valid codePoint so insert a                                                             // 687\n      // replacement char (U+FFFD) and advance only 1 byte                                                             // 688\n      codePoint = 0xFFFD                                                                                               // 689\n      bytesPerSequence = 1                                                                                             // 690\n    } else if (codePoint > 0xFFFF) {                                                                                   // 691\n      // encode to utf16 (surrogate pair dance)                                                                        // 692\n      codePoint -= 0x10000                                                                                             // 693\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)                                                                      // 694\n      codePoint = 0xDC00 | codePoint & 0x3FF                                                                           // 695\n    }                                                                                                                  // 696\n                                                                                                                       // 697\n    res.push(codePoint)                                                                                                // 698\n    i += bytesPerSequence                                                                                              // 699\n  }                                                                                                                    // 700\n                                                                                                                       // 701\n  return decodeCodePointsArray(res)                                                                                    // 702\n}                                                                                                                      // 703\n                                                                                                                       // 704\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with                                               // 705\n// the lowest limit is Chrome, with 0x10000 args.                                                                      // 706\n// We go 1 magnitude less, for safety                                                                                  // 707\nvar MAX_ARGUMENTS_LENGTH = 0x1000                                                                                      // 708\n                                                                                                                       // 709\nfunction decodeCodePointsArray (codePoints) {                                                                          // 710\n  var len = codePoints.length                                                                                          // 711\n  if (len <= MAX_ARGUMENTS_LENGTH) {                                                                                   // 712\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()                                        // 713\n  }                                                                                                                    // 714\n                                                                                                                       // 715\n  // Decode in chunks to avoid \"call stack size exceeded\".                                                             // 716\n  var res = ''                                                                                                         // 717\n  var i = 0                                                                                                            // 718\n  while (i < len) {                                                                                                    // 719\n    res += String.fromCharCode.apply(                                                                                  // 720\n      String,                                                                                                          // 721\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)                                                                   // 722\n    )                                                                                                                  // 723\n  }                                                                                                                    // 724\n  return res                                                                                                           // 725\n}                                                                                                                      // 726\n                                                                                                                       // 727\nfunction asciiSlice (buf, start, end) {                                                                                // 728\n  var ret = ''                                                                                                         // 729\n  end = Math.min(buf.length, end)                                                                                      // 730\n                                                                                                                       // 731\n  for (var i = start; i < end; i++) {                                                                                  // 732\n    ret += String.fromCharCode(buf[i] & 0x7F)                                                                          // 733\n  }                                                                                                                    // 734\n  return ret                                                                                                           // 735\n}                                                                                                                      // 736\n                                                                                                                       // 737\nfunction binarySlice (buf, start, end) {                                                                               // 738\n  var ret = ''                                                                                                         // 739\n  end = Math.min(buf.length, end)                                                                                      // 740\n                                                                                                                       // 741\n  for (var i = start; i < end; i++) {                                                                                  // 742\n    ret += String.fromCharCode(buf[i])                                                                                 // 743\n  }                                                                                                                    // 744\n  return ret                                                                                                           // 745\n}                                                                                                                      // 746\n                                                                                                                       // 747\nfunction hexSlice (buf, start, end) {                                                                                  // 748\n  var len = buf.length                                                                                                 // 749\n                                                                                                                       // 750\n  if (!start || start < 0) start = 0                                                                                   // 751\n  if (!end || end < 0 || end > len) end = len                                                                          // 752\n                                                                                                                       // 753\n  var out = ''                                                                                                         // 754\n  for (var i = start; i < end; i++) {                                                                                  // 755\n    out += toHex(buf[i])                                                                                               // 756\n  }                                                                                                                    // 757\n  return out                                                                                                           // 758\n}                                                                                                                      // 759\n                                                                                                                       // 760\nfunction utf16leSlice (buf, start, end) {                                                                              // 761\n  var bytes = buf.slice(start, end)                                                                                    // 762\n  var res = ''                                                                                                         // 763\n  for (var i = 0; i < bytes.length; i += 2) {                                                                          // 764\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)                                                          // 765\n  }                                                                                                                    // 766\n  return res                                                                                                           // 767\n}                                                                                                                      // 768\n                                                                                                                       // 769\nBuffer.prototype.slice = function slice (start, end) {                                                                 // 770\n  var len = this.length                                                                                                // 771\n  start = ~~start                                                                                                      // 772\n  end = end === undefined ? len : ~~end                                                                                // 773\n                                                                                                                       // 774\n  if (start < 0) {                                                                                                     // 775\n    start += len                                                                                                       // 776\n    if (start < 0) start = 0                                                                                           // 777\n  } else if (start > len) {                                                                                            // 778\n    start = len                                                                                                        // 779\n  }                                                                                                                    // 780\n                                                                                                                       // 781\n  if (end < 0) {                                                                                                       // 782\n    end += len                                                                                                         // 783\n    if (end < 0) end = 0                                                                                               // 784\n  } else if (end > len) {                                                                                              // 785\n    end = len                                                                                                          // 786\n  }                                                                                                                    // 787\n                                                                                                                       // 788\n  if (end < start) end = start                                                                                         // 789\n                                                                                                                       // 790\n  var newBuf                                                                                                           // 791\n  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                    // 792\n    newBuf = this.subarray(start, end)                                                                                 // 793\n    newBuf.__proto__ = Buffer.prototype                                                                                // 794\n  } else {                                                                                                             // 795\n    var sliceLen = end - start                                                                                         // 796\n    newBuf = new Buffer(sliceLen, undefined)                                                                           // 797\n    for (var i = 0; i < sliceLen; i++) {                                                                               // 798\n      newBuf[i] = this[i + start]                                                                                      // 799\n    }                                                                                                                  // 800\n  }                                                                                                                    // 801\n                                                                                                                       // 802\n  if (newBuf.length) newBuf.parent = this.parent || this                                                               // 803\n                                                                                                                       // 804\n  return newBuf                                                                                                        // 805\n}                                                                                                                      // 806\n                                                                                                                       // 807\n/*                                                                                                                     // 808\n * Need to make sure that buffer isn't trying to write out of bounds.                                                  // 809\n */                                                                                                                    // 810\nfunction checkOffset (offset, ext, length) {                                                                           // 811\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')                                     // 812\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')                             // 813\n}                                                                                                                      // 814\n                                                                                                                       // 815\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {                                     // 816\n  offset = offset | 0                                                                                                  // 817\n  byteLength = byteLength | 0                                                                                          // 818\n  if (!noAssert) checkOffset(offset, byteLength, this.length)                                                          // 819\n                                                                                                                       // 820\n  var val = this[offset]                                                                                               // 821\n  var mul = 1                                                                                                          // 822\n  var i = 0                                                                                                            // 823\n  while (++i < byteLength && (mul *= 0x100)) {                                                                         // 824\n    val += this[offset + i] * mul                                                                                      // 825\n  }                                                                                                                    // 826\n                                                                                                                       // 827\n  return val                                                                                                           // 828\n}                                                                                                                      // 829\n                                                                                                                       // 830\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {                                     // 831\n  offset = offset | 0                                                                                                  // 832\n  byteLength = byteLength | 0                                                                                          // 833\n  if (!noAssert) {                                                                                                     // 834\n    checkOffset(offset, byteLength, this.length)                                                                       // 835\n  }                                                                                                                    // 836\n                                                                                                                       // 837\n  var val = this[offset + --byteLength]                                                                                // 838\n  var mul = 1                                                                                                          // 839\n  while (byteLength > 0 && (mul *= 0x100)) {                                                                           // 840\n    val += this[offset + --byteLength] * mul                                                                           // 841\n  }                                                                                                                    // 842\n                                                                                                                       // 843\n  return val                                                                                                           // 844\n}                                                                                                                      // 845\n                                                                                                                       // 846\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {                                                   // 847\n  if (!noAssert) checkOffset(offset, 1, this.length)                                                                   // 848\n  return this[offset]                                                                                                  // 849\n}                                                                                                                      // 850\n                                                                                                                       // 851\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {                                             // 852\n  if (!noAssert) checkOffset(offset, 2, this.length)                                                                   // 853\n  return this[offset] | (this[offset + 1] << 8)                                                                        // 854\n}                                                                                                                      // 855\n                                                                                                                       // 856\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {                                             // 857\n  if (!noAssert) checkOffset(offset, 2, this.length)                                                                   // 858\n  return (this[offset] << 8) | this[offset + 1]                                                                        // 859\n}                                                                                                                      // 860\n                                                                                                                       // 861\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {                                             // 862\n  if (!noAssert) checkOffset(offset, 4, this.length)                                                                   // 863\n                                                                                                                       // 864\n  return ((this[offset]) |                                                                                             // 865\n      (this[offset + 1] << 8) |                                                                                        // 866\n      (this[offset + 2] << 16)) +                                                                                      // 867\n      (this[offset + 3] * 0x1000000)                                                                                   // 868\n}                                                                                                                      // 869\n                                                                                                                       // 870\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {                                             // 871\n  if (!noAssert) checkOffset(offset, 4, this.length)                                                                   // 872\n                                                                                                                       // 873\n  return (this[offset] * 0x1000000) +                                                                                  // 874\n    ((this[offset + 1] << 16) |                                                                                        // 875\n    (this[offset + 2] << 8) |                                                                                          // 876\n    this[offset + 3])                                                                                                  // 877\n}                                                                                                                      // 878\n                                                                                                                       // 879\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {                                       // 880\n  offset = offset | 0                                                                                                  // 881\n  byteLength = byteLength | 0                                                                                          // 882\n  if (!noAssert) checkOffset(offset, byteLength, this.length)                                                          // 883\n                                                                                                                       // 884\n  var val = this[offset]                                                                                               // 885\n  var mul = 1                                                                                                          // 886\n  var i = 0                                                                                                            // 887\n  while (++i < byteLength && (mul *= 0x100)) {                                                                         // 888\n    val += this[offset + i] * mul                                                                                      // 889\n  }                                                                                                                    // 890\n  mul *= 0x80                                                                                                          // 891\n                                                                                                                       // 892\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)                                                                   // 893\n                                                                                                                       // 894\n  return val                                                                                                           // 895\n}                                                                                                                      // 896\n                                                                                                                       // 897\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {                                       // 898\n  offset = offset | 0                                                                                                  // 899\n  byteLength = byteLength | 0                                                                                          // 900\n  if (!noAssert) checkOffset(offset, byteLength, this.length)                                                          // 901\n                                                                                                                       // 902\n  var i = byteLength                                                                                                   // 903\n  var mul = 1                                                                                                          // 904\n  var val = this[offset + --i]                                                                                         // 905\n  while (i > 0 && (mul *= 0x100)) {                                                                                    // 906\n    val += this[offset + --i] * mul                                                                                    // 907\n  }                                                                                                                    // 908\n  mul *= 0x80                                                                                                          // 909\n                                                                                                                       // 910\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)                                                                   // 911\n                                                                                                                       // 912\n  return val                                                                                                           // 913\n}                                                                                                                      // 914\n                                                                                                                       // 915\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {                                                     // 916\n  if (!noAssert) checkOffset(offset, 1, this.length)                                                                   // 917\n  if (!(this[offset] & 0x80)) return (this[offset])                                                                    // 918\n  return ((0xff - this[offset] + 1) * -1)                                                                              // 919\n}                                                                                                                      // 920\n                                                                                                                       // 921\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {                                               // 922\n  if (!noAssert) checkOffset(offset, 2, this.length)                                                                   // 923\n  var val = this[offset] | (this[offset + 1] << 8)                                                                     // 924\n  return (val & 0x8000) ? val | 0xFFFF0000 : val                                                                       // 925\n}                                                                                                                      // 926\n                                                                                                                       // 927\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {                                               // 928\n  if (!noAssert) checkOffset(offset, 2, this.length)                                                                   // 929\n  var val = this[offset + 1] | (this[offset] << 8)                                                                     // 930\n  return (val & 0x8000) ? val | 0xFFFF0000 : val                                                                       // 931\n}                                                                                                                      // 932\n                                                                                                                       // 933\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {                                               // 934\n  if (!noAssert) checkOffset(offset, 4, this.length)                                                                   // 935\n                                                                                                                       // 936\n  return (this[offset]) |                                                                                              // 937\n    (this[offset + 1] << 8) |                                                                                          // 938\n    (this[offset + 2] << 16) |                                                                                         // 939\n    (this[offset + 3] << 24)                                                                                           // 940\n}                                                                                                                      // 941\n                                                                                                                       // 942\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {                                               // 943\n  if (!noAssert) checkOffset(offset, 4, this.length)                                                                   // 944\n                                                                                                                       // 945\n  return (this[offset] << 24) |                                                                                        // 946\n    (this[offset + 1] << 16) |                                                                                         // 947\n    (this[offset + 2] << 8) |                                                                                          // 948\n    (this[offset + 3])                                                                                                 // 949\n}                                                                                                                      // 950\n                                                                                                                       // 951\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {                                               // 952\n  if (!noAssert) checkOffset(offset, 4, this.length)                                                                   // 953\n  return ieee754.read(this, offset, true, 23, 4)                                                                       // 954\n}                                                                                                                      // 955\n                                                                                                                       // 956\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {                                               // 957\n  if (!noAssert) checkOffset(offset, 4, this.length)                                                                   // 958\n  return ieee754.read(this, offset, false, 23, 4)                                                                      // 959\n}                                                                                                                      // 960\n                                                                                                                       // 961\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {                                             // 962\n  if (!noAssert) checkOffset(offset, 8, this.length)                                                                   // 963\n  return ieee754.read(this, offset, true, 52, 8)                                                                       // 964\n}                                                                                                                      // 965\n                                                                                                                       // 966\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {                                             // 967\n  if (!noAssert) checkOffset(offset, 8, this.length)                                                                   // 968\n  return ieee754.read(this, offset, false, 52, 8)                                                                      // 969\n}                                                                                                                      // 970\n                                                                                                                       // 971\nfunction checkInt (buf, value, offset, ext, max, min) {                                                                // 972\n  if (!Buffer.isBuffer(buf)) throw new TypeError('buffer must be a Buffer instance')                                   // 973\n  if (value > max || value < min) throw new RangeError('value is out of bounds')                                       // 974\n  if (offset + ext > buf.length) throw new RangeError('index out of range')                                            // 975\n}                                                                                                                      // 976\n                                                                                                                       // 977\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {                            // 978\n  value = +value                                                                                                       // 979\n  offset = offset | 0                                                                                                  // 980\n  byteLength = byteLength | 0                                                                                          // 981\n  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)                             // 982\n                                                                                                                       // 983\n  var mul = 1                                                                                                          // 984\n  var i = 0                                                                                                            // 985\n  this[offset] = value & 0xFF                                                                                          // 986\n  while (++i < byteLength && (mul *= 0x100)) {                                                                         // 987\n    this[offset + i] = (value / mul) & 0xFF                                                                            // 988\n  }                                                                                                                    // 989\n                                                                                                                       // 990\n  return offset + byteLength                                                                                           // 991\n}                                                                                                                      // 992\n                                                                                                                       // 993\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {                            // 994\n  value = +value                                                                                                       // 995\n  offset = offset | 0                                                                                                  // 996\n  byteLength = byteLength | 0                                                                                          // 997\n  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)                             // 998\n                                                                                                                       // 999\n  var i = byteLength - 1                                                                                               // 1000\n  var mul = 1                                                                                                          // 1001\n  this[offset + i] = value & 0xFF                                                                                      // 1002\n  while (--i >= 0 && (mul *= 0x100)) {                                                                                 // 1003\n    this[offset + i] = (value / mul) & 0xFF                                                                            // 1004\n  }                                                                                                                    // 1005\n                                                                                                                       // 1006\n  return offset + byteLength                                                                                           // 1007\n}                                                                                                                      // 1008\n                                                                                                                       // 1009\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {                                          // 1010\n  value = +value                                                                                                       // 1011\n  offset = offset | 0                                                                                                  // 1012\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)                                                             // 1013\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)                                                           // 1014\n  this[offset] = (value & 0xff)                                                                                        // 1015\n  return offset + 1                                                                                                    // 1016\n}                                                                                                                      // 1017\n                                                                                                                       // 1018\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {                                                        // 1019\n  if (value < 0) value = 0xffff + value + 1                                                                            // 1020\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; i++) {                                                  // 1021\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>                                         // 1022\n      (littleEndian ? i : 1 - i) * 8                                                                                   // 1023\n  }                                                                                                                    // 1024\n}                                                                                                                      // 1025\n                                                                                                                       // 1026\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {                                    // 1027\n  value = +value                                                                                                       // 1028\n  offset = offset | 0                                                                                                  // 1029\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)                                                           // 1030\n  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                    // 1031\n    this[offset] = (value & 0xff)                                                                                      // 1032\n    this[offset + 1] = (value >>> 8)                                                                                   // 1033\n  } else {                                                                                                             // 1034\n    objectWriteUInt16(this, value, offset, true)                                                                       // 1035\n  }                                                                                                                    // 1036\n  return offset + 2                                                                                                    // 1037\n}                                                                                                                      // 1038\n                                                                                                                       // 1039\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {                                    // 1040\n  value = +value                                                                                                       // 1041\n  offset = offset | 0                                                                                                  // 1042\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)                                                           // 1043\n  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                    // 1044\n    this[offset] = (value >>> 8)                                                                                       // 1045\n    this[offset + 1] = (value & 0xff)                                                                                  // 1046\n  } else {                                                                                                             // 1047\n    objectWriteUInt16(this, value, offset, false)                                                                      // 1048\n  }                                                                                                                    // 1049\n  return offset + 2                                                                                                    // 1050\n}                                                                                                                      // 1051\n                                                                                                                       // 1052\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {                                                        // 1053\n  if (value < 0) value = 0xffffffff + value + 1                                                                        // 1054\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; i++) {                                                  // 1055\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff                                                // 1056\n  }                                                                                                                    // 1057\n}                                                                                                                      // 1058\n                                                                                                                       // 1059\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {                                    // 1060\n  value = +value                                                                                                       // 1061\n  offset = offset | 0                                                                                                  // 1062\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)                                                       // 1063\n  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                    // 1064\n    this[offset + 3] = (value >>> 24)                                                                                  // 1065\n    this[offset + 2] = (value >>> 16)                                                                                  // 1066\n    this[offset + 1] = (value >>> 8)                                                                                   // 1067\n    this[offset] = (value & 0xff)                                                                                      // 1068\n  } else {                                                                                                             // 1069\n    objectWriteUInt32(this, value, offset, true)                                                                       // 1070\n  }                                                                                                                    // 1071\n  return offset + 4                                                                                                    // 1072\n}                                                                                                                      // 1073\n                                                                                                                       // 1074\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {                                    // 1075\n  value = +value                                                                                                       // 1076\n  offset = offset | 0                                                                                                  // 1077\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)                                                       // 1078\n  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                    // 1079\n    this[offset] = (value >>> 24)                                                                                      // 1080\n    this[offset + 1] = (value >>> 16)                                                                                  // 1081\n    this[offset + 2] = (value >>> 8)                                                                                   // 1082\n    this[offset + 3] = (value & 0xff)                                                                                  // 1083\n  } else {                                                                                                             // 1084\n    objectWriteUInt32(this, value, offset, false)                                                                      // 1085\n  }                                                                                                                    // 1086\n  return offset + 4                                                                                                    // 1087\n}                                                                                                                      // 1088\n                                                                                                                       // 1089\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {                              // 1090\n  value = +value                                                                                                       // 1091\n  offset = offset | 0                                                                                                  // 1092\n  if (!noAssert) {                                                                                                     // 1093\n    var limit = Math.pow(2, 8 * byteLength - 1)                                                                        // 1094\n                                                                                                                       // 1095\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)                                                       // 1096\n  }                                                                                                                    // 1097\n                                                                                                                       // 1098\n  var i = 0                                                                                                            // 1099\n  var mul = 1                                                                                                          // 1100\n  var sub = value < 0 ? 1 : 0                                                                                          // 1101\n  this[offset] = value & 0xFF                                                                                          // 1102\n  while (++i < byteLength && (mul *= 0x100)) {                                                                         // 1103\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF                                                               // 1104\n  }                                                                                                                    // 1105\n                                                                                                                       // 1106\n  return offset + byteLength                                                                                           // 1107\n}                                                                                                                      // 1108\n                                                                                                                       // 1109\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {                              // 1110\n  value = +value                                                                                                       // 1111\n  offset = offset | 0                                                                                                  // 1112\n  if (!noAssert) {                                                                                                     // 1113\n    var limit = Math.pow(2, 8 * byteLength - 1)                                                                        // 1114\n                                                                                                                       // 1115\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)                                                       // 1116\n  }                                                                                                                    // 1117\n                                                                                                                       // 1118\n  var i = byteLength - 1                                                                                               // 1119\n  var mul = 1                                                                                                          // 1120\n  var sub = value < 0 ? 1 : 0                                                                                          // 1121\n  this[offset + i] = value & 0xFF                                                                                      // 1122\n  while (--i >= 0 && (mul *= 0x100)) {                                                                                 // 1123\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF                                                               // 1124\n  }                                                                                                                    // 1125\n                                                                                                                       // 1126\n  return offset + byteLength                                                                                           // 1127\n}                                                                                                                      // 1128\n                                                                                                                       // 1129\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {                                            // 1130\n  value = +value                                                                                                       // 1131\n  offset = offset | 0                                                                                                  // 1132\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)                                                         // 1133\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)                                                           // 1134\n  if (value < 0) value = 0xff + value + 1                                                                              // 1135\n  this[offset] = (value & 0xff)                                                                                        // 1136\n  return offset + 1                                                                                                    // 1137\n}                                                                                                                      // 1138\n                                                                                                                       // 1139\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {                                      // 1140\n  value = +value                                                                                                       // 1141\n  offset = offset | 0                                                                                                  // 1142\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)                                                     // 1143\n  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                    // 1144\n    this[offset] = (value & 0xff)                                                                                      // 1145\n    this[offset + 1] = (value >>> 8)                                                                                   // 1146\n  } else {                                                                                                             // 1147\n    objectWriteUInt16(this, value, offset, true)                                                                       // 1148\n  }                                                                                                                    // 1149\n  return offset + 2                                                                                                    // 1150\n}                                                                                                                      // 1151\n                                                                                                                       // 1152\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {                                      // 1153\n  value = +value                                                                                                       // 1154\n  offset = offset | 0                                                                                                  // 1155\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)                                                     // 1156\n  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                    // 1157\n    this[offset] = (value >>> 8)                                                                                       // 1158\n    this[offset + 1] = (value & 0xff)                                                                                  // 1159\n  } else {                                                                                                             // 1160\n    objectWriteUInt16(this, value, offset, false)                                                                      // 1161\n  }                                                                                                                    // 1162\n  return offset + 2                                                                                                    // 1163\n}                                                                                                                      // 1164\n                                                                                                                       // 1165\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {                                      // 1166\n  value = +value                                                                                                       // 1167\n  offset = offset | 0                                                                                                  // 1168\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)                                             // 1169\n  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                    // 1170\n    this[offset] = (value & 0xff)                                                                                      // 1171\n    this[offset + 1] = (value >>> 8)                                                                                   // 1172\n    this[offset + 2] = (value >>> 16)                                                                                  // 1173\n    this[offset + 3] = (value >>> 24)                                                                                  // 1174\n  } else {                                                                                                             // 1175\n    objectWriteUInt32(this, value, offset, true)                                                                       // 1176\n  }                                                                                                                    // 1177\n  return offset + 4                                                                                                    // 1178\n}                                                                                                                      // 1179\n                                                                                                                       // 1180\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {                                      // 1181\n  value = +value                                                                                                       // 1182\n  offset = offset | 0                                                                                                  // 1183\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)                                             // 1184\n  if (value < 0) value = 0xffffffff + value + 1                                                                        // 1185\n  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                    // 1186\n    this[offset] = (value >>> 24)                                                                                      // 1187\n    this[offset + 1] = (value >>> 16)                                                                                  // 1188\n    this[offset + 2] = (value >>> 8)                                                                                   // 1189\n    this[offset + 3] = (value & 0xff)                                                                                  // 1190\n  } else {                                                                                                             // 1191\n    objectWriteUInt32(this, value, offset, false)                                                                      // 1192\n  }                                                                                                                    // 1193\n  return offset + 4                                                                                                    // 1194\n}                                                                                                                      // 1195\n                                                                                                                       // 1196\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {                                                            // 1197\n  if (offset + ext > buf.length) throw new RangeError('index out of range')                                            // 1198\n  if (offset < 0) throw new RangeError('index out of range')                                                           // 1199\n}                                                                                                                      // 1200\n                                                                                                                       // 1201\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {                                                     // 1202\n  if (!noAssert) {                                                                                                     // 1203\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)                               // 1204\n  }                                                                                                                    // 1205\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)                                                               // 1206\n  return offset + 4                                                                                                    // 1207\n}                                                                                                                      // 1208\n                                                                                                                       // 1209\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {                                      // 1210\n  return writeFloat(this, value, offset, true, noAssert)                                                               // 1211\n}                                                                                                                      // 1212\n                                                                                                                       // 1213\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {                                      // 1214\n  return writeFloat(this, value, offset, false, noAssert)                                                              // 1215\n}                                                                                                                      // 1216\n                                                                                                                       // 1217\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {                                                    // 1218\n  if (!noAssert) {                                                                                                     // 1219\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)                             // 1220\n  }                                                                                                                    // 1221\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)                                                               // 1222\n  return offset + 8                                                                                                    // 1223\n}                                                                                                                      // 1224\n                                                                                                                       // 1225\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {                                    // 1226\n  return writeDouble(this, value, offset, true, noAssert)                                                              // 1227\n}                                                                                                                      // 1228\n                                                                                                                       // 1229\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {                                    // 1230\n  return writeDouble(this, value, offset, false, noAssert)                                                             // 1231\n}                                                                                                                      // 1232\n                                                                                                                       // 1233\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)                                           // 1234\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {                                              // 1235\n  if (!start) start = 0                                                                                                // 1236\n  if (!end && end !== 0) end = this.length                                                                             // 1237\n  if (targetStart >= target.length) targetStart = target.length                                                        // 1238\n  if (!targetStart) targetStart = 0                                                                                    // 1239\n  if (end > 0 && end < start) end = start                                                                              // 1240\n                                                                                                                       // 1241\n  // Copy 0 bytes; we're done                                                                                          // 1242\n  if (end === start) return 0                                                                                          // 1243\n  if (target.length === 0 || this.length === 0) return 0                                                               // 1244\n                                                                                                                       // 1245\n  // Fatal error conditions                                                                                            // 1246\n  if (targetStart < 0) {                                                                                               // 1247\n    throw new RangeError('targetStart out of bounds')                                                                  // 1248\n  }                                                                                                                    // 1249\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')                             // 1250\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')                                                         // 1251\n                                                                                                                       // 1252\n  // Are we oob?                                                                                                       // 1253\n  if (end > this.length) end = this.length                                                                             // 1254\n  if (target.length - targetStart < end - start) {                                                                     // 1255\n    end = target.length - targetStart + start                                                                          // 1256\n  }                                                                                                                    // 1257\n                                                                                                                       // 1258\n  var len = end - start                                                                                                // 1259\n  var i                                                                                                                // 1260\n                                                                                                                       // 1261\n  if (this === target && start < targetStart && targetStart < end) {                                                   // 1262\n    // descending copy from end                                                                                        // 1263\n    for (i = len - 1; i >= 0; i--) {                                                                                   // 1264\n      target[i + targetStart] = this[i + start]                                                                        // 1265\n    }                                                                                                                  // 1266\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {                                                              // 1267\n    // ascending copy from start                                                                                       // 1268\n    for (i = 0; i < len; i++) {                                                                                        // 1269\n      target[i + targetStart] = this[i + start]                                                                        // 1270\n    }                                                                                                                  // 1271\n  } else {                                                                                                             // 1272\n    Uint8Array.prototype.set.call(                                                                                     // 1273\n      target,                                                                                                          // 1274\n      this.subarray(start, start + len),                                                                               // 1275\n      targetStart                                                                                                      // 1276\n    )                                                                                                                  // 1277\n  }                                                                                                                    // 1278\n                                                                                                                       // 1279\n  return len                                                                                                           // 1280\n}                                                                                                                      // 1281\n                                                                                                                       // 1282\n// fill(value, start=0, end=buffer.length)                                                                             // 1283\nBuffer.prototype.fill = function fill (value, start, end) {                                                            // 1284\n  if (!value) value = 0                                                                                                // 1285\n  if (!start) start = 0                                                                                                // 1286\n  if (!end) end = this.length                                                                                          // 1287\n                                                                                                                       // 1288\n  if (end < start) throw new RangeError('end < start')                                                                 // 1289\n                                                                                                                       // 1290\n  // Fill 0 bytes; we're done                                                                                          // 1291\n  if (end === start) return                                                                                            // 1292\n  if (this.length === 0) return                                                                                        // 1293\n                                                                                                                       // 1294\n  if (start < 0 || start >= this.length) throw new RangeError('start out of bounds')                                   // 1295\n  if (end < 0 || end > this.length) throw new RangeError('end out of bounds')                                          // 1296\n                                                                                                                       // 1297\n  var i                                                                                                                // 1298\n  if (typeof value === 'number') {                                                                                     // 1299\n    for (i = start; i < end; i++) {                                                                                    // 1300\n      this[i] = value                                                                                                  // 1301\n    }                                                                                                                  // 1302\n  } else {                                                                                                             // 1303\n    var bytes = utf8ToBytes(value.toString())                                                                          // 1304\n    var len = bytes.length                                                                                             // 1305\n    for (i = start; i < end; i++) {                                                                                    // 1306\n      this[i] = bytes[i % len]                                                                                         // 1307\n    }                                                                                                                  // 1308\n  }                                                                                                                    // 1309\n                                                                                                                       // 1310\n  return this                                                                                                          // 1311\n}                                                                                                                      // 1312\n                                                                                                                       // 1313\n// HELPER FUNCTIONS                                                                                                    // 1314\n// ================                                                                                                    // 1315\n                                                                                                                       // 1316\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g                                                                           // 1317\n                                                                                                                       // 1318\nfunction base64clean (str) {                                                                                           // 1319\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not                             // 1320\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')                                                                 // 1321\n  // Node converts strings with length < 2 to ''                                                                       // 1322\n  if (str.length < 2) return ''                                                                                        // 1323\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not                              // 1324\n  while (str.length % 4 !== 0) {                                                                                       // 1325\n    str = str + '='                                                                                                    // 1326\n  }                                                                                                                    // 1327\n  return str                                                                                                           // 1328\n}                                                                                                                      // 1329\n                                                                                                                       // 1330\nfunction stringtrim (str) {                                                                                            // 1331\n  if (str.trim) return str.trim()                                                                                      // 1332\n  return str.replace(/^\\s+|\\s+$/g, '')                                                                                 // 1333\n}                                                                                                                      // 1334\n                                                                                                                       // 1335\nfunction toHex (n) {                                                                                                   // 1336\n  if (n < 16) return '0' + n.toString(16)                                                                              // 1337\n  return n.toString(16)                                                                                                // 1338\n}                                                                                                                      // 1339\n                                                                                                                       // 1340\nfunction utf8ToBytes (string, units) {                                                                                 // 1341\n  units = units || Infinity                                                                                            // 1342\n  var codePoint                                                                                                        // 1343\n  var length = string.length                                                                                           // 1344\n  var leadSurrogate = null                                                                                             // 1345\n  var bytes = []                                                                                                       // 1346\n                                                                                                                       // 1347\n  for (var i = 0; i < length; i++) {                                                                                   // 1348\n    codePoint = string.charCodeAt(i)                                                                                   // 1349\n                                                                                                                       // 1350\n    // is surrogate component                                                                                          // 1351\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {                                                                    // 1352\n      // last char was a lead                                                                                          // 1353\n      if (!leadSurrogate) {                                                                                            // 1354\n        // no lead yet                                                                                                 // 1355\n        if (codePoint > 0xDBFF) {                                                                                      // 1356\n          // unexpected trail                                                                                          // 1357\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)                                                          // 1358\n          continue                                                                                                     // 1359\n        } else if (i + 1 === length) {                                                                                 // 1360\n          // unpaired lead                                                                                             // 1361\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)                                                          // 1362\n          continue                                                                                                     // 1363\n        }                                                                                                              // 1364\n                                                                                                                       // 1365\n        // valid lead                                                                                                  // 1366\n        leadSurrogate = codePoint                                                                                      // 1367\n                                                                                                                       // 1368\n        continue                                                                                                       // 1369\n      }                                                                                                                // 1370\n                                                                                                                       // 1371\n      // 2 leads in a row                                                                                              // 1372\n      if (codePoint < 0xDC00) {                                                                                        // 1373\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)                                                            // 1374\n        leadSurrogate = codePoint                                                                                      // 1375\n        continue                                                                                                       // 1376\n      }                                                                                                                // 1377\n                                                                                                                       // 1378\n      // valid surrogate pair                                                                                          // 1379\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000                                        // 1380\n    } else if (leadSurrogate) {                                                                                        // 1381\n      // valid bmp char, but last char was a lead                                                                      // 1382\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)                                                              // 1383\n    }                                                                                                                  // 1384\n                                                                                                                       // 1385\n    leadSurrogate = null                                                                                               // 1386\n                                                                                                                       // 1387\n    // encode utf8                                                                                                     // 1388\n    if (codePoint < 0x80) {                                                                                            // 1389\n      if ((units -= 1) < 0) break                                                                                      // 1390\n      bytes.push(codePoint)                                                                                            // 1391\n    } else if (codePoint < 0x800) {                                                                                    // 1392\n      if ((units -= 2) < 0) break                                                                                      // 1393\n      bytes.push(                                                                                                      // 1394\n        codePoint >> 0x6 | 0xC0,                                                                                       // 1395\n        codePoint & 0x3F | 0x80                                                                                        // 1396\n      )                                                                                                                // 1397\n    } else if (codePoint < 0x10000) {                                                                                  // 1398\n      if ((units -= 3) < 0) break                                                                                      // 1399\n      bytes.push(                                                                                                      // 1400\n        codePoint >> 0xC | 0xE0,                                                                                       // 1401\n        codePoint >> 0x6 & 0x3F | 0x80,                                                                                // 1402\n        codePoint & 0x3F | 0x80                                                                                        // 1403\n      )                                                                                                                // 1404\n    } else if (codePoint < 0x110000) {                                                                                 // 1405\n      if ((units -= 4) < 0) break                                                                                      // 1406\n      bytes.push(                                                                                                      // 1407\n        codePoint >> 0x12 | 0xF0,                                                                                      // 1408\n        codePoint >> 0xC & 0x3F | 0x80,                                                                                // 1409\n        codePoint >> 0x6 & 0x3F | 0x80,                                                                                // 1410\n        codePoint & 0x3F | 0x80                                                                                        // 1411\n      )                                                                                                                // 1412\n    } else {                                                                                                           // 1413\n      throw new Error('Invalid code point')                                                                            // 1414\n    }                                                                                                                  // 1415\n  }                                                                                                                    // 1416\n                                                                                                                       // 1417\n  return bytes                                                                                                         // 1418\n}                                                                                                                      // 1419\n                                                                                                                       // 1420\nfunction asciiToBytes (str) {                                                                                          // 1421\n  var byteArray = []                                                                                                   // 1422\n  for (var i = 0; i < str.length; i++) {                                                                               // 1423\n    // Node's code seems to be doing this and not & 0x7F..                                                             // 1424\n    byteArray.push(str.charCodeAt(i) & 0xFF)                                                                           // 1425\n  }                                                                                                                    // 1426\n  return byteArray                                                                                                     // 1427\n}                                                                                                                      // 1428\n                                                                                                                       // 1429\nfunction utf16leToBytes (str, units) {                                                                                 // 1430\n  var c, hi, lo                                                                                                        // 1431\n  var byteArray = []                                                                                                   // 1432\n  for (var i = 0; i < str.length; i++) {                                                                               // 1433\n    if ((units -= 2) < 0) break                                                                                        // 1434\n                                                                                                                       // 1435\n    c = str.charCodeAt(i)                                                                                              // 1436\n    hi = c >> 8                                                                                                        // 1437\n    lo = c % 256                                                                                                       // 1438\n    byteArray.push(lo)                                                                                                 // 1439\n    byteArray.push(hi)                                                                                                 // 1440\n  }                                                                                                                    // 1441\n                                                                                                                       // 1442\n  return byteArray                                                                                                     // 1443\n}                                                                                                                      // 1444\n                                                                                                                       // 1445\nfunction base64ToBytes (str) {                                                                                         // 1446\n  return base64.toByteArray(base64clean(str))                                                                          // 1447\n}                                                                                                                      // 1448\n                                                                                                                       // 1449\nfunction blitBuffer (src, dst, offset, length) {                                                                       // 1450\n  for (var i = 0; i < length; i++) {                                                                                   // 1451\n    if ((i + offset >= dst.length) || (i >= src.length)) break                                                         // 1452\n    dst[i + offset] = src[i]                                                                                           // 1453\n  }                                                                                                                    // 1454\n  return i                                                                                                             // 1455\n}                                                                                                                      // 1456\n                                                                                                                       // 1457\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"node_modules\":{\"base64-js\":{\"package.json\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor-node-stubs/node_modules/buffer/node_modules/base64-js/package.json                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"base64-js\";                                                                                            // 1\nexports.version = \"1.1.2\";                                                                                             // 2\nexports.main = \"lib/b64.js\";                                                                                           // 3\n                                                                                                                       // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"lib\":{\"b64.js\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor-node-stubs/node_modules/buffer/node_modules/base64-js/lib/b64.js                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n'use strict'                                                                                                           // 1\n                                                                                                                       // 2\nexports.toByteArray = toByteArray                                                                                      // 3\nexports.fromByteArray = fromByteArray                                                                                  // 4\n                                                                                                                       // 5\nvar lookup = []                                                                                                        // 6\nvar revLookup = []                                                                                                     // 7\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array                                                       // 8\n                                                                                                                       // 9\nfunction init () {                                                                                                     // 10\n  var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'                                        // 11\n  for (var i = 0, len = code.length; i < len; ++i) {                                                                   // 12\n    lookup[i] = code[i]                                                                                                // 13\n    revLookup[code.charCodeAt(i)] = i                                                                                  // 14\n  }                                                                                                                    // 15\n                                                                                                                       // 16\n  revLookup['-'.charCodeAt(0)] = 62                                                                                    // 17\n  revLookup['_'.charCodeAt(0)] = 63                                                                                    // 18\n}                                                                                                                      // 19\n                                                                                                                       // 20\ninit()                                                                                                                 // 21\n                                                                                                                       // 22\nfunction toByteArray (b64) {                                                                                           // 23\n  var i, j, l, tmp, placeHolders, arr                                                                                  // 24\n  var len = b64.length                                                                                                 // 25\n                                                                                                                       // 26\n  if (len % 4 > 0) {                                                                                                   // 27\n    throw new Error('Invalid string. Length must be a multiple of 4')                                                  // 28\n  }                                                                                                                    // 29\n                                                                                                                       // 30\n  // the number of equal signs (place holders)                                                                         // 31\n  // if there are two placeholders, than the two characters before it                                                  // 32\n  // represent one byte                                                                                                // 33\n  // if there is only one, then the three characters before it represent 2 bytes                                       // 34\n  // this is just a cheap hack to not do indexOf twice                                                                 // 35\n  placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0                                               // 36\n                                                                                                                       // 37\n  // base64 is 4/3 + up to two characters of the original data                                                         // 38\n  arr = new Arr(len * 3 / 4 - placeHolders)                                                                            // 39\n                                                                                                                       // 40\n  // if there are placeholders, only get up to the last complete 4 chars                                               // 41\n  l = placeHolders > 0 ? len - 4 : len                                                                                 // 42\n                                                                                                                       // 43\n  var L = 0                                                                                                            // 44\n                                                                                                                       // 45\n  for (i = 0, j = 0; i < l; i += 4, j += 3) {                                                                          // 46\n    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]\n    arr[L++] = (tmp >> 16) & 0xFF                                                                                      // 48\n    arr[L++] = (tmp >> 8) & 0xFF                                                                                       // 49\n    arr[L++] = tmp & 0xFF                                                                                              // 50\n  }                                                                                                                    // 51\n                                                                                                                       // 52\n  if (placeHolders === 2) {                                                                                            // 53\n    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)                                // 54\n    arr[L++] = tmp & 0xFF                                                                                              // 55\n  } else if (placeHolders === 1) {                                                                                     // 56\n    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[L++] = (tmp >> 8) & 0xFF                                                                                       // 58\n    arr[L++] = tmp & 0xFF                                                                                              // 59\n  }                                                                                                                    // 60\n                                                                                                                       // 61\n  return arr                                                                                                           // 62\n}                                                                                                                      // 63\n                                                                                                                       // 64\nfunction tripletToBase64 (num) {                                                                                       // 65\n  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]            // 66\n}                                                                                                                      // 67\n                                                                                                                       // 68\nfunction encodeChunk (uint8, start, end) {                                                                             // 69\n  var tmp                                                                                                              // 70\n  var output = []                                                                                                      // 71\n  for (var i = start; i < end; i += 3) {                                                                               // 72\n    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])                                                      // 73\n    output.push(tripletToBase64(tmp))                                                                                  // 74\n  }                                                                                                                    // 75\n  return output.join('')                                                                                               // 76\n}                                                                                                                      // 77\n                                                                                                                       // 78\nfunction fromByteArray (uint8) {                                                                                       // 79\n  var tmp                                                                                                              // 80\n  var len = uint8.length                                                                                               // 81\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes                                                      // 82\n  var output = ''                                                                                                      // 83\n  var parts = []                                                                                                       // 84\n  var maxChunkLength = 16383 // must be multiple of 3                                                                  // 85\n                                                                                                                       // 86\n  // go through the array every three bytes, we'll deal with trailing stuff later                                      // 87\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {                                            // 88\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))                       // 89\n  }                                                                                                                    // 90\n                                                                                                                       // 91\n  // pad the end with zeros, but make sure to not forget the extra bytes                                               // 92\n  if (extraBytes === 1) {                                                                                              // 93\n    tmp = uint8[len - 1]                                                                                               // 94\n    output += lookup[tmp >> 2]                                                                                         // 95\n    output += lookup[(tmp << 4) & 0x3F]                                                                                // 96\n    output += '=='                                                                                                     // 97\n  } else if (extraBytes === 2) {                                                                                       // 98\n    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])                                                                     // 99\n    output += lookup[tmp >> 10]                                                                                        // 100\n    output += lookup[(tmp >> 4) & 0x3F]                                                                                // 101\n    output += lookup[(tmp << 2) & 0x3F]                                                                                // 102\n    output += '='                                                                                                      // 103\n  }                                                                                                                    // 104\n                                                                                                                       // 105\n  parts.push(output)                                                                                                   // 106\n                                                                                                                       // 107\n  return parts.join('')                                                                                                // 108\n}                                                                                                                      // 109\n                                                                                                                       // 110\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},\"ieee754\":{\"package.json\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor-node-stubs/node_modules/buffer/node_modules/ieee754/package.json                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"ieee754\";                                                                                              // 1\nexports.version = \"1.1.6\";                                                                                             // 2\nexports.main = \"index.js\";                                                                                             // 3\n                                                                                                                       // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor-node-stubs/node_modules/buffer/node_modules/ieee754/index.js                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {                                                         // 1\n  var e, m                                                                                                             // 2\n  var eLen = nBytes * 8 - mLen - 1                                                                                     // 3\n  var eMax = (1 << eLen) - 1                                                                                           // 4\n  var eBias = eMax >> 1                                                                                                // 5\n  var nBits = -7                                                                                                       // 6\n  var i = isLE ? (nBytes - 1) : 0                                                                                      // 7\n  var d = isLE ? -1 : 1                                                                                                // 8\n  var s = buffer[offset + i]                                                                                           // 9\n                                                                                                                       // 10\n  i += d                                                                                                               // 11\n                                                                                                                       // 12\n  e = s & ((1 << (-nBits)) - 1)                                                                                        // 13\n  s >>= (-nBits)                                                                                                       // 14\n  nBits += eLen                                                                                                        // 15\n  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}                                           // 16\n                                                                                                                       // 17\n  m = e & ((1 << (-nBits)) - 1)                                                                                        // 18\n  e >>= (-nBits)                                                                                                       // 19\n  nBits += mLen                                                                                                        // 20\n  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}                                           // 21\n                                                                                                                       // 22\n  if (e === 0) {                                                                                                       // 23\n    e = 1 - eBias                                                                                                      // 24\n  } else if (e === eMax) {                                                                                             // 25\n    return m ? NaN : ((s ? -1 : 1) * Infinity)                                                                         // 26\n  } else {                                                                                                             // 27\n    m = m + Math.pow(2, mLen)                                                                                          // 28\n    e = e - eBias                                                                                                      // 29\n  }                                                                                                                    // 30\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)                                                                      // 31\n}                                                                                                                      // 32\n                                                                                                                       // 33\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {                                                 // 34\n  var e, m, c                                                                                                          // 35\n  var eLen = nBytes * 8 - mLen - 1                                                                                     // 36\n  var eMax = (1 << eLen) - 1                                                                                           // 37\n  var eBias = eMax >> 1                                                                                                // 38\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)                                                     // 39\n  var i = isLE ? 0 : (nBytes - 1)                                                                                      // 40\n  var d = isLE ? 1 : -1                                                                                                // 41\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0                                                          // 42\n                                                                                                                       // 43\n  value = Math.abs(value)                                                                                              // 44\n                                                                                                                       // 45\n  if (isNaN(value) || value === Infinity) {                                                                            // 46\n    m = isNaN(value) ? 1 : 0                                                                                           // 47\n    e = eMax                                                                                                           // 48\n  } else {                                                                                                             // 49\n    e = Math.floor(Math.log(value) / Math.LN2)                                                                         // 50\n    if (value * (c = Math.pow(2, -e)) < 1) {                                                                           // 51\n      e--                                                                                                              // 52\n      c *= 2                                                                                                           // 53\n    }                                                                                                                  // 54\n    if (e + eBias >= 1) {                                                                                              // 55\n      value += rt / c                                                                                                  // 56\n    } else {                                                                                                           // 57\n      value += rt * Math.pow(2, 1 - eBias)                                                                             // 58\n    }                                                                                                                  // 59\n    if (value * c >= 2) {                                                                                              // 60\n      e++                                                                                                              // 61\n      c /= 2                                                                                                           // 62\n    }                                                                                                                  // 63\n                                                                                                                       // 64\n    if (e + eBias >= eMax) {                                                                                           // 65\n      m = 0                                                                                                            // 66\n      e = eMax                                                                                                         // 67\n    } else if (e + eBias >= 1) {                                                                                       // 68\n      m = (value * c - 1) * Math.pow(2, mLen)                                                                          // 69\n      e = e + eBias                                                                                                    // 70\n    } else {                                                                                                           // 71\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)                                                           // 72\n      e = 0                                                                                                            // 73\n    }                                                                                                                  // 74\n  }                                                                                                                    // 75\n                                                                                                                       // 76\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}                                     // 77\n                                                                                                                       // 78\n  e = (e << mLen) | m                                                                                                  // 79\n  eLen += mLen                                                                                                         // 80\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}                                      // 81\n                                                                                                                       // 82\n  buffer[offset + i - d] |= s * 128                                                                                    // 83\n}                                                                                                                      // 84\n                                                                                                                       // 85\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"isarray\":{\"package.json\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor-node-stubs/node_modules/buffer/node_modules/isarray/package.json                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"isarray\";                                                                                              // 1\nexports.version = \"1.0.0\";                                                                                             // 2\nexports.main = \"index.js\";                                                                                             // 3\n                                                                                                                       // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor-node-stubs/node_modules/buffer/node_modules/isarray/index.js                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar toString = {}.toString;                                                                                            // 1\n                                                                                                                       // 2\nmodule.exports = Array.isArray || function (arr) {                                                                     // 3\n  return toString.call(arr) == '[object Array]';                                                                       // 4\n};                                                                                                                     // 5\n                                                                                                                       // 6\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}},\"process\":{\"browser.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor-node-stubs/node_modules/process/browser.js                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// shim for using process in browser                                                                                   // 1\n                                                                                                                       // 2\nvar process = module.exports = {};                                                                                     // 3\nvar queue = [];                                                                                                        // 4\nvar draining = false;                                                                                                  // 5\nvar currentQueue;                                                                                                      // 6\nvar queueIndex = -1;                                                                                                   // 7\n                                                                                                                       // 8\nfunction cleanUpNextTick() {                                                                                           // 9\n    draining = false;                                                                                                  // 10\n    if (currentQueue.length) {                                                                                         // 11\n        queue = currentQueue.concat(queue);                                                                            // 12\n    } else {                                                                                                           // 13\n        queueIndex = -1;                                                                                               // 14\n    }                                                                                                                  // 15\n    if (queue.length) {                                                                                                // 16\n        drainQueue();                                                                                                  // 17\n    }                                                                                                                  // 18\n}                                                                                                                      // 19\n                                                                                                                       // 20\nfunction drainQueue() {                                                                                                // 21\n    if (draining) {                                                                                                    // 22\n        return;                                                                                                        // 23\n    }                                                                                                                  // 24\n    var timeout = setTimeout(cleanUpNextTick);                                                                         // 25\n    draining = true;                                                                                                   // 26\n                                                                                                                       // 27\n    var len = queue.length;                                                                                            // 28\n    while(len) {                                                                                                       // 29\n        currentQueue = queue;                                                                                          // 30\n        queue = [];                                                                                                    // 31\n        while (++queueIndex < len) {                                                                                   // 32\n            if (currentQueue) {                                                                                        // 33\n                currentQueue[queueIndex].run();                                                                        // 34\n            }                                                                                                          // 35\n        }                                                                                                              // 36\n        queueIndex = -1;                                                                                               // 37\n        len = queue.length;                                                                                            // 38\n    }                                                                                                                  // 39\n    currentQueue = null;                                                                                               // 40\n    draining = false;                                                                                                  // 41\n    clearTimeout(timeout);                                                                                             // 42\n}                                                                                                                      // 43\n                                                                                                                       // 44\nprocess.nextTick = function (fun) {                                                                                    // 45\n    var args = new Array(arguments.length - 1);                                                                        // 46\n    if (arguments.length > 1) {                                                                                        // 47\n        for (var i = 1; i < arguments.length; i++) {                                                                   // 48\n            args[i - 1] = arguments[i];                                                                                // 49\n        }                                                                                                              // 50\n    }                                                                                                                  // 51\n    queue.push(new Item(fun, args));                                                                                   // 52\n    if (queue.length === 1 && !draining) {                                                                             // 53\n        setTimeout(drainQueue, 0);                                                                                     // 54\n    }                                                                                                                  // 55\n};                                                                                                                     // 56\n                                                                                                                       // 57\n// v8 likes predictible objects                                                                                        // 58\nfunction Item(fun, array) {                                                                                            // 59\n    this.fun = fun;                                                                                                    // 60\n    this.array = array;                                                                                                // 61\n}                                                                                                                      // 62\nItem.prototype.run = function () {                                                                                     // 63\n    this.fun.apply(null, this.array);                                                                                  // 64\n};                                                                                                                     // 65\nprocess.title = 'browser';                                                                                             // 66\nprocess.browser = true;                                                                                                // 67\nprocess.env = {};                                                                                                      // 68\nprocess.argv = [];                                                                                                     // 69\nprocess.version = ''; // empty string to avoid regexp issues                                                           // 70\nprocess.versions = {};                                                                                                 // 71\n                                                                                                                       // 72\nfunction noop() {}                                                                                                     // 73\n                                                                                                                       // 74\nprocess.on = noop;                                                                                                     // 75\nprocess.addListener = noop;                                                                                            // 76\nprocess.once = noop;                                                                                                   // 77\nprocess.off = noop;                                                                                                    // 78\nprocess.removeListener = noop;                                                                                         // 79\nprocess.removeAllListeners = noop;                                                                                     // 80\nprocess.emit = noop;                                                                                                   // 81\n                                                                                                                       // 82\nprocess.binding = function (name) {                                                                                    // 83\n    throw new Error('process.binding is not supported');                                                               // 84\n};                                                                                                                     // 85\n                                                                                                                       // 86\nprocess.cwd = function () { return '/' };                                                                              // 87\nprocess.chdir = function (dir) {                                                                                       // 88\n    throw new Error('process.chdir is not supported');                                                                 // 89\n};                                                                                                                     // 90\nprocess.umask = function() { return 0; };                                                                              // 91\n                                                                                                                       // 92\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"domain-browser\":{\"package.json\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor-node-stubs/node_modules/domain-browser/package.json                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"domain-browser\";                                                                                       // 1\nexports.version = \"1.1.7\";                                                                                             // 2\nexports.main = \"./index.js\";                                                                                           // 3\n                                                                                                                       // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":[\"events\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor-node-stubs/node_modules/domain-browser/index.js                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// This file should be ES5 compatible                                                                                  // 1\n/* eslint prefer-spread:0, no-var:0, prefer-reflect:0, no-magic-numbers:0 */                                           // 2\n'use strict'                                                                                                           // 3\nmodule.exports = (function () {                                                                                        // 4\n\t// Import Events                                                                                                      // 5\n\tvar events = require('events')                                                                                        // 6\n                                                                                                                       // 7\n\t// Export Domain                                                                                                      // 8\n\tvar domain = {}                                                                                                       // 9\n\tdomain.createDomain = domain.create = function () {                                                                   // 10\n\t\tvar d = new events.EventEmitter()                                                                                    // 11\n                                                                                                                       // 12\n\t\tfunction emitError (e) {                                                                                             // 13\n\t\t\td.emit('error', e)                                                                                                  // 14\n\t\t}                                                                                                                    // 15\n                                                                                                                       // 16\n\t\td.add = function (emitter) {                                                                                         // 17\n\t\t\temitter.on('error', emitError)                                                                                      // 18\n\t\t}                                                                                                                    // 19\n\t\td.remove = function (emitter) {                                                                                      // 20\n\t\t\temitter.removeListener('error', emitError)                                                                          // 21\n\t\t}                                                                                                                    // 22\n\t\td.bind = function (fn) {                                                                                             // 23\n\t\t\treturn function () {                                                                                                // 24\n\t\t\t\tvar args = Array.prototype.slice.call(arguments)                                                                   // 25\n\t\t\t\ttry {                                                                                                              // 26\n\t\t\t\t\tfn.apply(null, args)                                                                                              // 27\n\t\t\t\t}                                                                                                                  // 28\n\t\t\t\tcatch (err) {                                                                                                      // 29\n\t\t\t\t\temitError(err)                                                                                                    // 30\n\t\t\t\t}                                                                                                                  // 31\n\t\t\t}                                                                                                                   // 32\n\t\t}                                                                                                                    // 33\n\t\td.intercept = function (fn) {                                                                                        // 34\n\t\t\treturn function (err) {                                                                                             // 35\n\t\t\t\tif ( err ) {                                                                                                       // 36\n\t\t\t\t\temitError(err)                                                                                                    // 37\n\t\t\t\t}                                                                                                                  // 38\n\t\t\t\telse {                                                                                                             // 39\n\t\t\t\t\tvar args = Array.prototype.slice.call(arguments, 1)                                                               // 40\n\t\t\t\t\ttry {                                                                                                             // 41\n\t\t\t\t\t\tfn.apply(null, args)                                                                                             // 42\n\t\t\t\t\t}                                                                                                                 // 43\n\t\t\t\t\tcatch (err) {                                                                                                     // 44\n\t\t\t\t\t\temitError(err)                                                                                                   // 45\n\t\t\t\t\t}                                                                                                                 // 46\n\t\t\t\t}                                                                                                                  // 47\n\t\t\t}                                                                                                                   // 48\n\t\t}                                                                                                                    // 49\n\t\td.run = function (fn) {                                                                                              // 50\n\t\t\ttry {                                                                                                               // 51\n\t\t\t\tfn()                                                                                                               // 52\n\t\t\t}                                                                                                                   // 53\n\t\t\tcatch (err) {                                                                                                       // 54\n\t\t\t\temitError(err)                                                                                                     // 55\n\t\t\t}                                                                                                                   // 56\n\t\t\treturn this                                                                                                         // 57\n\t\t}                                                                                                                    // 58\n\t\td.dispose = function () {                                                                                            // 59\n\t\t\tthis.removeAllListeners()                                                                                           // 60\n\t\t\treturn this                                                                                                         // 61\n\t\t}                                                                                                                    // 62\n\t\td.enter = d.exit = function () {                                                                                     // 63\n\t\t\treturn this                                                                                                         // 64\n\t\t}                                                                                                                    // 65\n\t\treturn d                                                                                                             // 66\n\t}                                                                                                                     // 67\n\treturn domain                                                                                                         // 68\n}).call(this)                                                                                                          // 69\n                                                                                                                       // 70\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"events\":{\"package.json\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor-node-stubs/node_modules/events/package.json                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"events\";                                                                                               // 1\nexports.version = \"1.1.0\";                                                                                             // 2\nexports.main = \"./events.js\";                                                                                          // 3\n                                                                                                                       // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"events.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor-node-stubs/node_modules/events/events.js                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// Copyright Joyent, Inc. and other Node contributors.                                                                 // 1\n//                                                                                                                     // 2\n// Permission is hereby granted, free of charge, to any person obtaining a                                             // 3\n// copy of this software and associated documentation files (the                                                       // 4\n// \"Software\"), to deal in the Software without restriction, including                                                 // 5\n// without limitation the rights to use, copy, modify, merge, publish,                                                 // 6\n// distribute, sublicense, and/or sell copies of the Software, and to permit                                           // 7\n// persons to whom the Software is furnished to do so, subject to the                                                  // 8\n// following conditions:                                                                                               // 9\n//                                                                                                                     // 10\n// The above copyright notice and this permission notice shall be included                                             // 11\n// in all copies or substantial portions of the Software.                                                              // 12\n//                                                                                                                     // 13\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS                                             // 14\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF                                                          // 15\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN                                           // 16\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,                                            // 17\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR                                               // 18\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE                                           // 19\n// USE OR OTHER DEALINGS IN THE SOFTWARE.                                                                              // 20\n                                                                                                                       // 21\nfunction EventEmitter() {                                                                                              // 22\n  this._events = this._events || {};                                                                                   // 23\n  this._maxListeners = this._maxListeners || undefined;                                                                // 24\n}                                                                                                                      // 25\nmodule.exports = EventEmitter;                                                                                         // 26\n                                                                                                                       // 27\n// Backwards-compat with node 0.10.x                                                                                   // 28\nEventEmitter.EventEmitter = EventEmitter;                                                                              // 29\n                                                                                                                       // 30\nEventEmitter.prototype._events = undefined;                                                                            // 31\nEventEmitter.prototype._maxListeners = undefined;                                                                      // 32\n                                                                                                                       // 33\n// By default EventEmitters will print a warning if more than 10 listeners are                                         // 34\n// added to it. This is a useful default which helps finding memory leaks.                                             // 35\nEventEmitter.defaultMaxListeners = 10;                                                                                 // 36\n                                                                                                                       // 37\n// Obviously not all Emitters should be limited to 10. This function allows                                            // 38\n// that to be increased. Set to zero for unlimited.                                                                    // 39\nEventEmitter.prototype.setMaxListeners = function(n) {                                                                 // 40\n  if (!isNumber(n) || n < 0 || isNaN(n))                                                                               // 41\n    throw TypeError('n must be a positive number');                                                                    // 42\n  this._maxListeners = n;                                                                                              // 43\n  return this;                                                                                                         // 44\n};                                                                                                                     // 45\n                                                                                                                       // 46\nEventEmitter.prototype.emit = function(type) {                                                                         // 47\n  var er, handler, len, args, i, listeners;                                                                            // 48\n                                                                                                                       // 49\n  if (!this._events)                                                                                                   // 50\n    this._events = {};                                                                                                 // 51\n                                                                                                                       // 52\n  // If there is no 'error' event listener then throw.                                                                 // 53\n  if (type === 'error') {                                                                                              // 54\n    if (!this._events.error ||                                                                                         // 55\n        (isObject(this._events.error) && !this._events.error.length)) {                                                // 56\n      er = arguments[1];                                                                                               // 57\n      if (er instanceof Error) {                                                                                       // 58\n        throw er; // Unhandled 'error' event                                                                           // 59\n      }                                                                                                                // 60\n      throw TypeError('Uncaught, unspecified \"error\" event.');                                                         // 61\n    }                                                                                                                  // 62\n  }                                                                                                                    // 63\n                                                                                                                       // 64\n  handler = this._events[type];                                                                                        // 65\n                                                                                                                       // 66\n  if (isUndefined(handler))                                                                                            // 67\n    return false;                                                                                                      // 68\n                                                                                                                       // 69\n  if (isFunction(handler)) {                                                                                           // 70\n    switch (arguments.length) {                                                                                        // 71\n      // fast cases                                                                                                    // 72\n      case 1:                                                                                                          // 73\n        handler.call(this);                                                                                            // 74\n        break;                                                                                                         // 75\n      case 2:                                                                                                          // 76\n        handler.call(this, arguments[1]);                                                                              // 77\n        break;                                                                                                         // 78\n      case 3:                                                                                                          // 79\n        handler.call(this, arguments[1], arguments[2]);                                                                // 80\n        break;                                                                                                         // 81\n      // slower                                                                                                        // 82\n      default:                                                                                                         // 83\n        args = Array.prototype.slice.call(arguments, 1);                                                               // 84\n        handler.apply(this, args);                                                                                     // 85\n    }                                                                                                                  // 86\n  } else if (isObject(handler)) {                                                                                      // 87\n    args = Array.prototype.slice.call(arguments, 1);                                                                   // 88\n    listeners = handler.slice();                                                                                       // 89\n    len = listeners.length;                                                                                            // 90\n    for (i = 0; i < len; i++)                                                                                          // 91\n      listeners[i].apply(this, args);                                                                                  // 92\n  }                                                                                                                    // 93\n                                                                                                                       // 94\n  return true;                                                                                                         // 95\n};                                                                                                                     // 96\n                                                                                                                       // 97\nEventEmitter.prototype.addListener = function(type, listener) {                                                        // 98\n  var m;                                                                                                               // 99\n                                                                                                                       // 100\n  if (!isFunction(listener))                                                                                           // 101\n    throw TypeError('listener must be a function');                                                                    // 102\n                                                                                                                       // 103\n  if (!this._events)                                                                                                   // 104\n    this._events = {};                                                                                                 // 105\n                                                                                                                       // 106\n  // To avoid recursion in the case that type === \"newListener\"! Before                                                // 107\n  // adding it to the listeners, first emit \"newListener\".                                                             // 108\n  if (this._events.newListener)                                                                                        // 109\n    this.emit('newListener', type,                                                                                     // 110\n              isFunction(listener.listener) ?                                                                          // 111\n              listener.listener : listener);                                                                           // 112\n                                                                                                                       // 113\n  if (!this._events[type])                                                                                             // 114\n    // Optimize the case of one listener. Don't need the extra array object.                                           // 115\n    this._events[type] = listener;                                                                                     // 116\n  else if (isObject(this._events[type]))                                                                               // 117\n    // If we've already got an array, just append.                                                                     // 118\n    this._events[type].push(listener);                                                                                 // 119\n  else                                                                                                                 // 120\n    // Adding the second element, need to change to array.                                                             // 121\n    this._events[type] = [this._events[type], listener];                                                               // 122\n                                                                                                                       // 123\n  // Check for listener leak                                                                                           // 124\n  if (isObject(this._events[type]) && !this._events[type].warned) {                                                    // 125\n    if (!isUndefined(this._maxListeners)) {                                                                            // 126\n      m = this._maxListeners;                                                                                          // 127\n    } else {                                                                                                           // 128\n      m = EventEmitter.defaultMaxListeners;                                                                            // 129\n    }                                                                                                                  // 130\n                                                                                                                       // 131\n    if (m && m > 0 && this._events[type].length > m) {                                                                 // 132\n      this._events[type].warned = true;                                                                                // 133\n      console.error('(node) warning: possible EventEmitter memory ' +                                                  // 134\n                    'leak detected. %d listeners added. ' +                                                            // 135\n                    'Use emitter.setMaxListeners() to increase limit.',                                                // 136\n                    this._events[type].length);                                                                        // 137\n      if (typeof console.trace === 'function') {                                                                       // 138\n        // not supported in IE 10                                                                                      // 139\n        console.trace();                                                                                               // 140\n      }                                                                                                                // 141\n    }                                                                                                                  // 142\n  }                                                                                                                    // 143\n                                                                                                                       // 144\n  return this;                                                                                                         // 145\n};                                                                                                                     // 146\n                                                                                                                       // 147\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;                                                        // 148\n                                                                                                                       // 149\nEventEmitter.prototype.once = function(type, listener) {                                                               // 150\n  if (!isFunction(listener))                                                                                           // 151\n    throw TypeError('listener must be a function');                                                                    // 152\n                                                                                                                       // 153\n  var fired = false;                                                                                                   // 154\n                                                                                                                       // 155\n  function g() {                                                                                                       // 156\n    this.removeListener(type, g);                                                                                      // 157\n                                                                                                                       // 158\n    if (!fired) {                                                                                                      // 159\n      fired = true;                                                                                                    // 160\n      listener.apply(this, arguments);                                                                                 // 161\n    }                                                                                                                  // 162\n  }                                                                                                                    // 163\n                                                                                                                       // 164\n  g.listener = listener;                                                                                               // 165\n  this.on(type, g);                                                                                                    // 166\n                                                                                                                       // 167\n  return this;                                                                                                         // 168\n};                                                                                                                     // 169\n                                                                                                                       // 170\n// emits a 'removeListener' event iff the listener was removed                                                         // 171\nEventEmitter.prototype.removeListener = function(type, listener) {                                                     // 172\n  var list, position, length, i;                                                                                       // 173\n                                                                                                                       // 174\n  if (!isFunction(listener))                                                                                           // 175\n    throw TypeError('listener must be a function');                                                                    // 176\n                                                                                                                       // 177\n  if (!this._events || !this._events[type])                                                                            // 178\n    return this;                                                                                                       // 179\n                                                                                                                       // 180\n  list = this._events[type];                                                                                           // 181\n  length = list.length;                                                                                                // 182\n  position = -1;                                                                                                       // 183\n                                                                                                                       // 184\n  if (list === listener ||                                                                                             // 185\n      (isFunction(list.listener) && list.listener === listener)) {                                                     // 186\n    delete this._events[type];                                                                                         // 187\n    if (this._events.removeListener)                                                                                   // 188\n      this.emit('removeListener', type, listener);                                                                     // 189\n                                                                                                                       // 190\n  } else if (isObject(list)) {                                                                                         // 191\n    for (i = length; i-- > 0;) {                                                                                       // 192\n      if (list[i] === listener ||                                                                                      // 193\n          (list[i].listener && list[i].listener === listener)) {                                                       // 194\n        position = i;                                                                                                  // 195\n        break;                                                                                                         // 196\n      }                                                                                                                // 197\n    }                                                                                                                  // 198\n                                                                                                                       // 199\n    if (position < 0)                                                                                                  // 200\n      return this;                                                                                                     // 201\n                                                                                                                       // 202\n    if (list.length === 1) {                                                                                           // 203\n      list.length = 0;                                                                                                 // 204\n      delete this._events[type];                                                                                       // 205\n    } else {                                                                                                           // 206\n      list.splice(position, 1);                                                                                        // 207\n    }                                                                                                                  // 208\n                                                                                                                       // 209\n    if (this._events.removeListener)                                                                                   // 210\n      this.emit('removeListener', type, listener);                                                                     // 211\n  }                                                                                                                    // 212\n                                                                                                                       // 213\n  return this;                                                                                                         // 214\n};                                                                                                                     // 215\n                                                                                                                       // 216\nEventEmitter.prototype.removeAllListeners = function(type) {                                                           // 217\n  var key, listeners;                                                                                                  // 218\n                                                                                                                       // 219\n  if (!this._events)                                                                                                   // 220\n    return this;                                                                                                       // 221\n                                                                                                                       // 222\n  // not listening for removeListener, no need to emit                                                                 // 223\n  if (!this._events.removeListener) {                                                                                  // 224\n    if (arguments.length === 0)                                                                                        // 225\n      this._events = {};                                                                                               // 226\n    else if (this._events[type])                                                                                       // 227\n      delete this._events[type];                                                                                       // 228\n    return this;                                                                                                       // 229\n  }                                                                                                                    // 230\n                                                                                                                       // 231\n  // emit removeListener for all listeners on all events                                                               // 232\n  if (arguments.length === 0) {                                                                                        // 233\n    for (key in this._events) {                                                                                        // 234\n      if (key === 'removeListener') continue;                                                                          // 235\n      this.removeAllListeners(key);                                                                                    // 236\n    }                                                                                                                  // 237\n    this.removeAllListeners('removeListener');                                                                         // 238\n    this._events = {};                                                                                                 // 239\n    return this;                                                                                                       // 240\n  }                                                                                                                    // 241\n                                                                                                                       // 242\n  listeners = this._events[type];                                                                                      // 243\n                                                                                                                       // 244\n  if (isFunction(listeners)) {                                                                                         // 245\n    this.removeListener(type, listeners);                                                                              // 246\n  } else if (listeners) {                                                                                              // 247\n    // LIFO order                                                                                                      // 248\n    while (listeners.length)                                                                                           // 249\n      this.removeListener(type, listeners[listeners.length - 1]);                                                      // 250\n  }                                                                                                                    // 251\n  delete this._events[type];                                                                                           // 252\n                                                                                                                       // 253\n  return this;                                                                                                         // 254\n};                                                                                                                     // 255\n                                                                                                                       // 256\nEventEmitter.prototype.listeners = function(type) {                                                                    // 257\n  var ret;                                                                                                             // 258\n  if (!this._events || !this._events[type])                                                                            // 259\n    ret = [];                                                                                                          // 260\n  else if (isFunction(this._events[type]))                                                                             // 261\n    ret = [this._events[type]];                                                                                        // 262\n  else                                                                                                                 // 263\n    ret = this._events[type].slice();                                                                                  // 264\n  return ret;                                                                                                          // 265\n};                                                                                                                     // 266\n                                                                                                                       // 267\nEventEmitter.prototype.listenerCount = function(type) {                                                                // 268\n  if (this._events) {                                                                                                  // 269\n    var evlistener = this._events[type];                                                                               // 270\n                                                                                                                       // 271\n    if (isFunction(evlistener))                                                                                        // 272\n      return 1;                                                                                                        // 273\n    else if (evlistener)                                                                                               // 274\n      return evlistener.length;                                                                                        // 275\n  }                                                                                                                    // 276\n  return 0;                                                                                                            // 277\n};                                                                                                                     // 278\n                                                                                                                       // 279\nEventEmitter.listenerCount = function(emitter, type) {                                                                 // 280\n  return emitter.listenerCount(type);                                                                                  // 281\n};                                                                                                                     // 282\n                                                                                                                       // 283\nfunction isFunction(arg) {                                                                                             // 284\n  return typeof arg === 'function';                                                                                    // 285\n}                                                                                                                      // 286\n                                                                                                                       // 287\nfunction isNumber(arg) {                                                                                               // 288\n  return typeof arg === 'number';                                                                                      // 289\n}                                                                                                                      // 290\n                                                                                                                       // 291\nfunction isObject(arg) {                                                                                               // 292\n  return typeof arg === 'object' && arg !== null;                                                                      // 293\n}                                                                                                                      // 294\n                                                                                                                       // 295\nfunction isUndefined(arg) {                                                                                            // 296\n  return arg === void 0;                                                                                               // 297\n}                                                                                                                      // 298\n                                                                                                                       // 299\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}}},{\"extensions\":[\".js\",\".json\"]});\nvar exports = require(\"./node_modules/meteor/modules/client.js\");\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package.modules = exports, {\n  meteorInstall: meteorInstall,\n  Buffer: Buffer,\n  process: process\n});\n\n})();\n","servePath":"/packages/modules.js"}]