[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////\n//                                                                     //\n// packages/webpack_css/webpack.config.js                              //\n//                                                                     //\n/////////////////////////////////////////////////////////////////////////\n                                                                       //\nvar weight = 200;\n\nfunction dependencies(settings) {\n  return {\n    devDependencies: {\n      'style-loader' : '^0.13.0',\n      'css-loader': '^0.23.0',\n      'extract-text-webpack-plugin': '^0.9.1'\n    }\n  };\n}\n\nfunction config(settings, require) {\n  var cssLoader = '';\n  var loaders = [];\n  var plugins = [];\n\n  var queries = settings.css || {};\n\n  // Support old setting\n  if (queries.module) {\n    queries.modules = queries.module;\n    delete queries.module;\n  }\n\n  if (!queries.localIdentName) {\n    queries.localIdentName = '[name]__[local]__[hash:base64:5]';\n  }\n\n  if (settings.isDebug) {\n    if (settings.platform === 'server') {\n      settings.cssLoader = 'css/locals?' + JSON.stringify(queries);\n    } else {\n      settings.cssLoader = 'style!css?' + JSON.stringify(queries);\n    }\n  } else {\n    if (settings.platform === 'server') {\n      settings.cssLoader = 'css/locals?' + JSON.stringify(queries);\n    } else {\n      settings.cssLoader = 'css?' + JSON.stringify(queries);\n      settings.cssExtract = true;\n    }\n  }\n\n  var cssLoader = settings.cssLoader;\n\n  if (settings.cssExtract) {\n    var ExtractTextPlugin = require('extract-text-webpack-plugin');\n    plugins.push(new ExtractTextPlugin('style.css'));\n    cssLoader = ExtractTextPlugin.extract('style', cssLoader);\n  }\n\n  // Let postcss control CSS files if it is there\n  if (cssLoader && settings.packages.indexOf('webpack:postcss') < 0) {\n    loaders.push({ test: /\\.css$/, loader: cssLoader });\n  }\n\n  return {\n    loaders: loaders,\n    plugins: plugins,\n    extensions: ['.css']\n  };\n}\n\n/////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['webpack:css'] = {};\n\n})();\n","servePath":"/packages/webpack_css.js"}]